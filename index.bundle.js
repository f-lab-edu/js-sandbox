(()=>{"use strict";var t="./js-sandbox/";const e=new class{db;constructor(t,e,i){this.dbName=t,this.dbVersion=e,this.stores=i}async openDB(){return new Promise(((t,e)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,t()},i.onerror=t=>{e(t)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((t=>{this.db.objectStoreNames.contains(t)&&this.db.deleteObjectStore(t),this.db.createObjectStore(t,{keyPath:"id"})}))}}))}async getData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readonly").objectStore(t).get(e);n.onsuccess=()=>{i(n.result)},n.onerror=t=>{s(t)}}))}async getAllData(t){return new Promise(((e,i)=>{const s=this.db.transaction(t,"readonly").objectStore(t).getAll();s.onsuccess=()=>{e(s.result)},s.onerror=t=>{i(t)}}))}async upsertData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t),o={...e,id:e.id||(new Date).getTime()},a=n.put(o);a.onsuccess=()=>{i(a.result)},a.onerror=()=>{console.log(a.error),s(a.error)}}))}async deleteData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t).delete(e);n.onsuccess=()=>{i(!0)},n.onerror=t=>{s(t)}}))}}("sandboxDB",2,["notepad"]),i=(t,...e)=>String.raw(t,...e);class s extends HTMLElement{constructor(){super(),this.render=this.render.bind(this)}connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}bindMethods(...t){t.forEach((t=>{this[t]=this[t].bind(this)}))}}class n extends s{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const o=t+"2a583f97b153f7da7d41.png",a="/js-sandbox",r=[{path:"/",html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:t+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:t+"39b884119b49599495ed.png"},{path:"/notepad",html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:o},{path:"/notepad/:id",html:i`<my-notepad data-id=":id"></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null}],l=r.reduce(((t,e)=>{const{path:i,label:s,iconSrc:n}=e;return e.iconSrc?[...t,{path:i,label:s,iconSrc:n}]:t}),[]),c=async()=>[...(await e.getAllData("notepad")).reduce(((t,e)=>{const{id:i,title:s}=e;return[...t,{path:`/notepad/${i}`,label:s,iconSrc:o}]}),[])],d=r,h=new class{constructor(t){this.routes=t}pathToRegexp(t){return new RegExp(`^${t.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const t=window.location.pathname,e=this.routes.find((e=>this.pathToRegexp(this.getUrlFrom(e.path)).test(t)));e?document.querySelector("#page").innerHTML=e.html.replace(":id",this.getIdFromPath(t)):this.replaceTo("/")}getIdFromPath(t){return t.match(/\d+/)?.[0]}navigateTo(t){this.getUrlFrom(t)!==window.location.pathname&&(window.history.pushState(null,null,a+t),this.render())}replaceTo(t){window.history.replaceState(null,null,a+t),this.render()}getUrlFrom(t){return`${a}${t}`}back(){window.history.back(),this.render()}}(d),u=t+"59cb65e4f8f2627d6c2c.png",p=t+"bc8d31a2338dd0b3f68a.png";class m extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${u} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${p} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${l.map((t=>i` <my-icon data-path="${t.path}" data-iconSrc="${t.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}}class b extends s{}class y extends s{constructor(){super(),this.score=0,this.handleStart=this.handleStart.bind(this)}connectedCallback(){super.connectedCallback(),this.querySelector("#start-button").addEventListener("click",this.handleStart)}injectHTML(){return i`
      <my-tetris-playground id="1"></my-tetris-playground>
      <button id="start-button">게임 시작</button>
      <my-tetris-playground id="2"></my-tetris-playground>
    `}handleStart(){this.querySelectorAll("my-tetris-playground").forEach((t=>t.startGame()))}}class k extends s{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class v extends s{async connectedCallback(){this.icons=[...l,...await c()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange),this.addEventListener("iconDelete",this.handleIconDelete)}static get observedAttributes(){return["icons"]}attributeChangedCallback(t,e,i){e!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((t=>i`
            <my-icon data-path=${t.path} data-label=${t.label} data-iconSrc=${t.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(t){this.setAttribute("icons",JSON.stringify(t))}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");e.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((t=>{t!==e&&t.removeAttribute("checked")}))}handleDoubleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}handleKeyDown(t){const e=this.querySelectorAll("my-icon[checked]");if("Enter"===t.key){if(e.length>1)return;if(!e)return;h.navigateTo(e[0].dataset.path)}}handleIconChange(t){const{path:e,label:i,iconSrc:s}=t.detail,n=this.icons.findIndex((t=>t.path===e));if(-1===n)this.icons=[...this.icons,{path:e,label:i,iconSrc:s}];else{const t=[...this.icons];t[n]={path:e,label:i,iconSrc:s},this.icons=t}}handleIconDelete(t){const{path:e}=t.detail;this.icons=this.icons.filter((t=>t.path!==e))}}class g extends s{injectHTML(){const{label:t,iconsrc:e}=this.dataset;return i`
      <img alt="${t}_icon" src=${e} />
      ${t?`<span class="icon_name">${t}</span>`:""}
    `}}class w extends s{async connectedCallback(){this.data=await e.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave),this.addEventListener("delete",this.handleDelete)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave),this.removeEventListener("delete",this.handleDelete)}injectHTML(){const{title:t,content:e}=this.data;return i`
      <my-notepad-header title=${t}></my-notepad-header>
      <textarea>${e}</textarea>
    `}handleLocalSave(t){t.preventDefault();const e=this.getNotePadData();if(!e)return;const i=new Blob([e.content],{type:"text/plain"}),s=document.createElement("a");s.href=URL.createObjectURL(i),s.download=`${e.title}.txt`,s.click()}async handleSave(t){t.stopPropagation();const i=this.getNotePadData();if(i)try{const t=await e.upsertData("notepad",i),s=`/notepad/${t}`;alert("저장되었습니다.");const n=new CustomEvent("iconChange",{detail:{path:s,label:i.title,iconSrc:o}});document.querySelector("my-icons").dispatchEvent(n),this.id===t?this.title=i.title.replace(/&nbsp;/g," "):h.navigateTo(s)}catch(t){alert("저장에 실패했습니다.")}}async handleDelete(t){try{if(t.stopPropagation(),!window.confirm("정말 삭제하시겠습니까?"))return;await e.deleteData("notepad",this.id),alert("삭제되었습니다.");const i=new CustomEvent("iconDelete",{detail:{path:`/notepad/${this.id}`}});document.querySelector("my-icons").dispatchEvent(i),h.replaceTo("/notepad")}catch(t){alert("삭제에 실패했습니다.")}}getNotePadData(){const t=this.querySelector("textarea").value.trim();if(!t)return alert("내용이 없습니다."),null;let e;for(;!e;)if(!(e=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),e||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:e.trim().replace(/ /g,"&nbsp;"),content:t.replace(/ /g,"&nbsp;")}}get id(){return Number(this.getAttribute("data-id"))}set title(t){this.querySelector("my-notepad-header").setAttribute("title",t)}}const f=!0,S=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],onClick:function(){const t=document.querySelector("my-notepad");t.getAttribute("data-id")?h.navigateTo("/notepad"):t.render()}},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],onClick:function(){document.querySelector("my-notepad").getAttribute("data-id")&&this.dispatchEvent(new CustomEvent("delete",{bubbles:!0}))}},{id:5,text:"페이지 설정(U)...",key:[],disable:f},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:f},{id:7,text:"끝내기(X)",key:[],disable:f}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:f},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:f},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:f},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:f},{id:12,text:"삭제(D)",key:["Del"],disable:f},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:f},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:f},{id:15,text:"다음 찾기(N)",key:["F3"],disable:f},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:f},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:f},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:f},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:f},{id:20,text:"시간/날짜(D)",key:["F5"],disable:f}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:f},{id:22,text:"글꼴(F)...",key:[],disable:f}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:f},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:f},{id:25,text:"상태 표시줄(S)",key:[],disable:f}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:f},{id:27,text:"피드백 보내기(F)",key:[],disable:f},{id:28,text:"메모장 정보(A)",key:[],disable:f}]}],x=S.reduce(((t,e)=>[...t,...e.slots]),[]),C=S;class E extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}static get observedAttributes(){return["title"]}attributeChangedCallback(t,e,i){"title"===t&&e&&(this.querySelector("#title").innerText=i)}injectHTML(){return i`
      <header>
        <span>
          <img alt="notepad_icon" src=${o} />
          <span id="title">${this.title}</span> - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${C.map((t=>i`
              <button class="edit_button">
                ${t.title}(<u>${t.key}</u>)
                <div class="popup">
                  ${t.slots.map((t=>i`
                        <div class="sub" data-id="${t.id}" data-disable="${!!t.disable}">
                          <div>${t.text}</div>
                          ${t.key.length>0?`<div>${t.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(t){const e=t.target.closest(".view_button"),i=t.target.closest(".edit_button"),s=t.target.closest(".sub");e?this.clickViewButton(e):i?this.clickEditButton(i,s):this.closePopup()}clickViewButton(t){switch(t.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":h.back()}}clickEditButton(t,e){if(e){const t=Number(e.dataset.id),{onClick:i}=x.find((e=>e.id===t))||{};i&&i.call(this)}else this.togglePopup(t)}togglePopup(t){const e=t.querySelector(".popup");e.classList.contains("show")?e.classList.remove("show"):(this.closePopup(),e.classList.add("show"))}closePopup(){const t=this.querySelector(".popup.show");t?.classList.remove("show")}get title(){return this.getAttribute("title")}}const L={I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[2,0,0],[2,2,2],[0,0,0]],L:[[0,0,3],[3,3,3],[0,0,0]],O:[[4,4],[4,4]],S:[[0,5,5],[5,5,0],[0,0,0]],T:[[0,6,0],[6,6,6],[0,0,0]],Z:[[7,7,0],[0,7,7],[0,0,0]]},$={0:"empty",1:"I",2:"J",3:"L",4:"O",5:"S",6:"T",7:"Z",10:"I freeze",20:"J freeze",30:"L freeze",40:"O freeze",50:"S freeze",60:"T freeze",70:"Z freeze"},D={1:100,2:300,3:500,4:800},T=10,B=new Map([["1",new Map([["s","moveDown"],["a","moveLeft"],["d","moveRight"],["w","rotate"],["S","moveDown"],["A","moveLeft"],["D","moveRight"],["W","rotate"]])],["2",new Map([["ArrowDown","moveDown"],["ArrowLeft","moveLeft"],["ArrowRight","moveRight"],["ArrowUp","rotate"]])]]),j=t=>Object.values(t).sort((()=>Math.random()-.5)),A=(t,e)=>Array.from(Array(e),(()=>Array(t).fill(0))),F="freeze",M="createNewBlock";class H{static observers={[M]:[],[F]:[]};constructor(t,e=!0){this.$playground=t,this.$board=t.querySelector("my-tetris-board"),this.blockQueue=j(L),this.observers={[M]:[],[F]:[]},e&&this.createNewBlock()}subscribe(t,e){this.observers[t].push(e)}notify(t){this.observers[t].forEach((t=>t()))}unsubscribe(t,e){this.observers[t]=this.observers[t].filter((t=>t!==e))}getNextTetrominos(){return this.blockQueue.slice(0,5)}createNewBlock(){this.block=this.blockQueue.shift(),this.blockQueue.length<5&&(this.blockQueue=this.blockQueue.concat(j(L)));const t=((t,e)=>{const i=e.findIndex((t=>t.some((t=>0!==t))));return{x:Math.floor((10-e[0].length)/2),y:-i}})(0,this.block);this.x=t.x,this.y=t.y,this.notify(M)}rotate(){const t=this.block[0].map(((t,e)=>this.block.map((t=>t[e])).reverse())),e=t[0].length,i=t.length;let s=this.x,n=this.y;s+e>T&&(s=T-e),s<0&&(s=0),n+i>20&&(n=20-i),n<0&&(n=0),this.canMove(s,n,t)&&(this.block=t,this.x=s,this.y=n)}moveLeft(){this.canMove(this.x-1,this.y,this.block)&&(this.x-=1)}moveRight(){this.canMove(this.x+1,this.y,this.block)&&(this.x+=1)}moveDown(){this.canMove(this.x,this.y+1,this.block)?this.y+=1:0===this.y?(this.freeze(),this.$board.stopGame()):(this.freeze(),this.createNewBlock())}freeze(){const{block:t,x:e,y:i}=this;t.forEach(((t,s)=>{t.forEach(((t,n)=>{0!==t&&(this.$board.data[i+s][e+n]=10*t)}))})),this.notify(F)}canMove(t,e,i){for(let s=0;s<i.length;s+=1)for(let n=0;n<i[s].length;n+=1)if(0!==i[s][n]){const i=t+n,o=e+s;if(i<0||i>=T||o<0||o>=20||this.$board.data[o][i]>=10)return!1}return!0}clone(){const t=new H(this.$playground,!1);return t.block=this.block.map((t=>[...t])),t.x=this.x,t.y=this.y,t}}class N extends s{constructor(){super(),this.data=A(T,20),this.$playground=null,this.start=!1,this.tetromino=null,this.lastTime=null,this.dropInterval=1e3,this.tetrominoCounter=0,this.animationId=null,this.keyState=new Set,this.bindMethods("startGame","dropBlock","increaseDropSpeed","removeFullRows","keyupHandler","keydownHandler","handleKeys","render")}connectedCallback(){super.connectedCallback()}disconnectedCallback(){this.tetromino.unsubscribe(M,this.increaseDropSpeed),this.tetromino.unsubscribe(F,this.removeFullRows)}injectHTML(){return i`
      ${this.data.map((t=>i`
            <ul>
              ${t.map((t=>i`<li class="cell-${$[t]}"></li>`)).join("")}
            </ul>
          `)).join("")}
    `}increaseDropSpeed(){10===this.tetrominoCounter&&(this.tetrominoCounter=0,this.dropInterval*=.9),this.tetrominoCounter+=1}startGame(t,e){this.start||(this.data=A(T,20),this.tetromino=e,this.tetromino.subscribe(M,this.increaseDropSpeed),this.tetromino.subscribe(F,this.removeFullRows),this.start=!0,this.$playground=t,this.updateBoard(),document.addEventListener("keydown",this.keydownHandler),document.addEventListener("keyup",this.keyupHandler),this.lastTime=performance.now(),requestAnimationFrame(this.dropBlock))}stopGame(){this.start=!1,this.tetrominoCounter=0,this.dropInterval=1e3,document.removeEventListener("keydown",this.keydownHandler),document.removeEventListener("keyup",this.keyupHandler)}dropBlock(t){if(t-this.lastTime>this.dropInterval){const e=this.tetromino.clone();this.tetromino.moveDown(),this.updateBoard(e),this.lastTime=t}this.start?this.animationId=requestAnimationFrame(this.dropBlock):cancelAnimationFrame(this.animationId)}keydownHandler(t){this.keyState.add(t.key),this.handleKeys()}keyupHandler(t){this.keyState.delete(t.key)}handleKeys(){const t=this.tetromino.clone();B.get(this.$playground.id).forEach(((t,e)=>{this.keyState.has(e)&&this.tetromino[t]()})),requestAnimationFrame((()=>this.updateBoard(t)))}updateBoard(t=null){t&&this.removeOldBlock(t),this.putNewBlock(this.data),this.render()}removeOldBlock(t){const{block:e,x:i,y:s}=t;e.forEach(((t,e)=>{t.forEach(((t,n)=>{this.data[s+e]?.[i+n]===t&&(this.data[s+e][i+n]=0)}))}))}putNewBlock(){const{x:t,y:e,block:i}=this.tetromino;i.forEach(((i,s)=>{i.forEach(((i,n)=>{0!==i&&(this.data[e+s][t+n]=i)}))}))}removeFullRows(){console.log("removeFullRows");let t=0;this.data.forEach(((e,i)=>{e.every((t=>t>=10))&&(t+=1,this.data.splice(i,1),this.data.unshift(Array(T).fill(0)))})),t>0&&this.$playground.scoreUp(D[t])}}class P extends s{constructor(){super(),this.$playground=null,this.tetromino=null}connectedCallback(){super.connectedCallback()}disconnectedCallback(){this.tetromino.unsubscribe(M,this.render)}injectHTML(){return i`
      ${this.tetromino?.getNextTetrominos().map((t=>i`
            <div class="tetromino-preview">
              ${t.map((t=>i`
                    <ul class="tetromino-preview-row">
                      ${t.map((t=>i` <li class="cell-${$[t]}"></li> `)).join("")}
                    </ul>
                  `)).join("")}
            </div>
          `)).join("")||""}
    `}startGame(t,e){this.$playground=t,this.tetromino=e,this.tetromino.subscribe(M,this.render),this.render()}}class q extends s{constructor(){super(),this.score=0}connectedCallback(){super.connectedCallback()}injectHTML(){return i`
      <div class="container">
        <my-tetris-board class="board"></my-tetris-board>
        <my-tetris-preview class="tetromino-previews"></my-tetris-preview>
      </div>
      <span class="score">${this.score}</span>
    `}startGame(){this.tetromino=new H(this),this.querySelector("my-tetris-board").startGame(this,this.tetromino),this.querySelector("my-tetris-preview").startGame(this,this.tetromino)}scoreUp(t){this.score+=t,this.querySelector(".score").innerText=this.score}}(async()=>{try{await e.openDB()}catch(t){queueMicrotask((()=>alert("IndexedDB를 사용할 수 없습니다.")))}customElements.define("my-app",n),customElements.define("my-footer",m),customElements.define("my-home",b),customElements.define("my-tetris",y),customElements.define("my-tetris-playground",q),customElements.define("my-tetris-board",N),customElements.define("my-tetris-preview",P),customElements.define("my-flappybird",k),customElements.define("my-icons",v),customElements.define("my-icon",g),customElements.define("my-notepad",w),customElements.define("my-notepad-header",E)})(),window.addEventListener("load",(()=>h.render())),window.addEventListener("popstate",(()=>h.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,