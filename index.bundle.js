(()=>{"use strict";var e="/js-sandbox/";const t=new class{db;constructor(e,t,n){this.dbName=e,this.dbVersion=t,this.stores=n}async openDB(){return new Promise(((e,t)=>{const n=window.indexedDB.open(this.dbName,this.dbVersion);n.onsuccess=()=>{this.db=n.result,e()},n.onerror=e=>{t(e)},n.onupgradeneeded=()=>{this.db=n.result,this.stores.forEach((e=>{this.db.objectStoreNames.contains(e)&&this.db.deleteObjectStore(e),this.db.createObjectStore(e,{keyPath:"id"})}))}}))}async getData(e,t){return new Promise(((n,i)=>{const s=this.db.transaction(e,"readonly").objectStore(e).get(t);s.onsuccess=()=>{n(s.result)},s.onerror=e=>{i(e)}}))}async getAllData(e){return new Promise(((t,n)=>{const i=this.db.transaction(e,"readonly").objectStore(e).getAll();i.onsuccess=()=>{t(i.result)},i.onerror=e=>{n(e)}}))}async upsertData(e,t){return new Promise(((n,i)=>{const s=this.db.transaction(e,"readwrite").objectStore(e),a={...t,id:t.id||(new Date).getTime()},o=s.put(a);o.onsuccess=()=>{n(o.result)},o.onerror=e=>{console.error(e),i(e)}}))}async deleteData(e,t){return new Promise(((n,i)=>{const s=this.db.transaction(e,"readwrite").objectStore(e).delete(t);s.onsuccess=()=>{n(s.result)},s.onerror=e=>{i(e)}}))}}("sandboxDB",2,["notepad"]),n=(e,...t)=>String.raw(e,...t);class i extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class s extends i{injectHTML(){return n`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const a=e+"2a583f97b153f7da7d41.png",o=[{path:"/",html:n`<my-home></my-home>`,label:"Home",iconSrc:null,tag:"my-home"},{path:"/tetris",html:n`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:e+"71c0bea6462001116fcf.png",tag:"my-tetris"},{path:"/flappybird",html:n`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:e+"39b884119b49599495ed.png",tag:"my-flappybird"},{path:"/notepad",html:n`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:a,tag:"my-notepad"},{path:"/notepad/:id",html:n`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null,tag:"my-notepad"}],c=o.reduce(((e,t)=>{const{path:n,label:i,iconSrc:s}=t;return t.iconSrc?[...e,{path:n,label:i,iconSrc:s}]:e}),[]),l=async()=>[...(await t.getAllData("notepad")).reduce(((e,t)=>{const{id:n,title:i}=t;return[...e,{path:`/notepad/${n}`,label:i,iconSrc:a}]}),[])],r=o,d="/js-sandbox",h=new class{constructor(e){this.routes=e}pathToRegexp(e){return new RegExp(`^${e.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const e=this.routes.find((e=>null!==window.location.pathname.replace(d,"").match(this.pathToRegexp(e.path))));if(e){if(e.path.includes("/:id")){const t=window.location.pathname.replace(d,"").match(/\d+/)[0];e.html=e.html.replace(`${e.tag}`,`${e.tag} id="${t}"`)}document.querySelector("#page").innerHTML=e.html}else this.replaceTo("/")}navigateTo(e){window.history.pushState(null,null,d+e),this.render()}replaceTo(e){window.history.replaceState(null,null,d+e),this.render()}back(){window.history.back(),this.render()}}(r),p=e+"59cb65e4f8f2627d6c2c.png",u=e+"bc8d31a2338dd0b3f68a.png";class b extends i{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return n`
      <img alt="window_logo" src=${p} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${u} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${c.map((e=>n` <my-icon data-path="${e.path}" data-iconSrc="${e.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");h.navigateTo(t.dataset.path)}}class m extends i{}class y extends i{injectHTML(){return n`
      <h1>Tetris</h1>
      <p>You are viewing the Tetris component!</p>
    `}}class g extends i{injectHTML(){return n`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class k extends i{async connectedCallback(){this.icons=[...c,...await l()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange)}static get observedAttributes(){return["icons"]}attributeChangedCallback(e,t,n){t!==n&&this.render()}injectHTML(){return n`
      ${this.icons.map((e=>n`
            <my-icon data-path=${e.path} data-label=${e.label} data-iconSrc=${e.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(e){this.setAttribute("icons",JSON.stringify(e))}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");t.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((e=>{e!==t&&e.removeAttribute("checked")}))}handleDoubleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");h.navigateTo(t.dataset.path)}handleKeyDown(e){const t=this.querySelectorAll("my-icon[checked]");if("Enter"===e.key){if(t.length>1)return;if(!t)return;h.navigateTo(t[0].dataset.path)}}handleIconChange(e){const{path:t,label:n,iconSrc:i}=e.detail,s=this.icons.findIndex((e=>e.path===t));if(-1===s)this.icons=[...this.icons,{path:t,label:n,iconSrc:i}];else{const e=[...this.icons];e[s]={path:t,label:n,iconSrc:i},this.icons=e}}}class v extends i{injectHTML(){const{label:e,iconsrc:t}=this.dataset;return n`
      <img alt="${e}_icon" src=${t} />
      ${e?`<span class="icon_name">${e}</span>`:""}
    `}}class w extends i{async connectedCallback(){this.data=await t.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave)}injectHTML(){const{title:e,content:t}=this.data;return n`
      <my-notepad-header title=${e}></my-notepad-header>
      <textarea>${t}</textarea>
    `}handleLocalSave(e){e.preventDefault();const t=this.getNotePadData();if(!t)return;const n=new Blob([t.content],{type:"text/plain"}),i=document.createElement("a");i.href=URL.createObjectURL(n),i.download=`${t.title}.txt`,i.click()}async handleSave(e){try{e.stopPropagation();const n=this.getNotePadData();if(!n)return;const i=await t.upsertData("notepad",n);if(!i)return;const s=`/notepad/${i}`;alert("저장되었습니다.");const o=new CustomEvent("iconChange",{detail:{path:s,label:n.title.replace(/ /g,"&nbsp;"),iconSrc:a}});document.querySelector("my-icons").dispatchEvent(o),h.navigateTo(s)}catch(e){alert("저장에 실패했습니다.")}}getNotePadData(){const e=this.querySelector("textarea").value.trim();if(!e)return alert("내용이 없습니다."),null;let t;for(;!t;)if(!(t=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),t||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:t.trim().replace(/ /g,"&nbsp;"),content:e.replace(/ /g,"&nbsp;").replace(/\n/g,"<br>").replace(/\t/g,"&nbsp;&nbsp;&nbsp;&nbsp;")}}get id(){return Number(this.getAttribute("id"))}}const f=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],disable:!0},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],disable:!0},{id:5,text:"페이지 설정(U)...",key:[],disable:!0},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:!0},{id:7,text:"끝내기(X)",key:[],disable:!0}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:!0},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:!0},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:!0},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:!0},{id:12,text:"삭제(D)",key:["Del"],disable:!0},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:!0},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:!0},{id:15,text:"다음 찾기(N)",key:["F3"],disable:!0},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:!0},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:!0},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:!0},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:!0},{id:20,text:"시간/날짜(D)",key:["F5"],disable:!0}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:!0},{id:22,text:"글꼴(F)...",key:[],disable:!0}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:!0},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:!0},{id:25,text:"상태 표시줄(S)",key:[],disable:!0}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:!0},{id:27,text:"피드백 보내기(F)",key:[],disable:!0},{id:28,text:"메모장 정보(A)",key:[],disable:!0}]}],x=f.reduce(((e,t)=>[...e,...t.slots]),[]),S=f;class C extends i{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}injectHTML(){return n`
      <header>
        <span>
          <img alt="notepad_icon" src=${a} />
          ${this.title} - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${S.map((e=>n`
              <button class="edit_button">
                ${e.title}(<u>${e.key}</u>)
                <div class="popup">
                  ${e.slots.map((e=>n`
                        <div class="sub" data-id="${e.id}" data-disable="${!!e.disable}">
                          <div>${e.text}</div>
                          ${e.key.length>0?`<div>${e.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(e){const t=e.target.closest(".view_button"),n=e.target.closest(".edit_button"),i=e.target.closest(".sub");t?this.clickViewButton(t):n?this.clickEditButton(n,i):this.closePopup()}clickViewButton(e){switch(e.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":h.back()}}clickEditButton(e,t){if(this.closePopup(),t){const e=Number(t.dataset.id),{onClick:n}=x.find((t=>t.id===e))||{};n&&n.call(this)}else e.querySelector(".popup").classList.toggle("show")}closePopup(){const e=this.querySelector(".popup.show");e&&e.classList.remove("show")}get title(){return this.getAttribute("title")}}(async()=>{await t.openDB(),customElements.define("my-app",s),customElements.define("my-footer",b),customElements.define("my-home",m),customElements.define("my-tetris",y),customElements.define("my-flappybird",g),customElements.define("my-icons",k),customElements.define("my-icon",v),customElements.define("my-notepad",w),customElements.define("my-notepad-header",C)})(),window.addEventListener("load",(()=>h.render())),window.addEventListener("popstate",(()=>h.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQU8yRSxpQkFBaUIsWUFBWSxJQUFNLFkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy9jb3JlL0luZGV4ZWREQi5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL2NvcmUvV2ViQ29tcG9uZW50LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3V0aWxzL3JvdXRlcy5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvY29yZS9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvQ29tbW9uL0Zvb3Rlci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Ib21lL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L1RldHJpcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9GbGFwcHlCaXJkL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0NvbW1vbi9JY29ucy5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Db21tb24vSWNvbi5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Ob3RlUGFkL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L05vdGVQYWQvY29uc3QvYnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Ob3RlUGFkL2NvbXBvbmVudHMvTm90ZVBhZEhlYWRlci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2pzLXNhbmRib3gvXCI7IiwiY2xhc3MgSW5kZXhlZERCIHtcbiAgZGI7XG5cbiAgLyoqXG4gICAqIOyDneyEseyekFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGJOYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYlZlcnNpb25cbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gc3RvcmVzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkYk5hbWUsIGRiVmVyc2lvbiwgc3RvcmVzKSB7XG4gICAgdGhpcy5kYk5hbWUgPSBkYk5hbWU7XG4gICAgdGhpcy5kYlZlcnNpb24gPSBkYlZlcnNpb247XG4gICAgdGhpcy5zdG9yZXMgPSBzdG9yZXM7XG4gIH1cblxuICAvKipcbiAgICogREIg7Jik7ZSIIOuplOyEnOuTnFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGFzeW5jIG9wZW5EQigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IHdpbmRvdy5pbmRleGVkREIub3Blbih0aGlzLmRiTmFtZSwgdGhpcy5kYlZlcnNpb24pO1xuXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5kYiA9IHJlcXVlc3QucmVzdWx0O1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5kYiA9IHJlcXVlc3QucmVzdWx0O1xuXG4gICAgICAgIHRoaXMuc3RvcmVzLmZvckVhY2goKHN0b3JlKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZGIuZGVsZXRlT2JqZWN0U3RvcmUoc3RvcmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmRiLmNyZWF0ZU9iamVjdFN0b3JlKHN0b3JlLCB7IGtleVBhdGg6ICdpZCcgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDrjbDsnbTthLAg7KGw7ZqMIOuplOyEnOuTnFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fVxuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YShzdG9yZU5hbWUsIGlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWRvbmx5Jykub2JqZWN0U3RvcmUoc3RvcmVOYW1lKS5nZXQoaWQpO1xuXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOuNsOydtO2EsCDsoITssrQg7KGw7ZqMIOuplOyEnOuTnFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdFtdPn1cbiAgICovXG4gIGFzeW5jIGdldEFsbERhdGEoc3RvcmVOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWRvbmx5Jykub2JqZWN0U3RvcmUoc3RvcmVOYW1lKS5nZXRBbGwoKTtcblxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDrjbDsnbTthLAg7LaU6rCAIOuplOyEnOuTnFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59XG4gICAqL1xuICBhc3luYyB1cHNlcnREYXRhKHN0b3JlTmFtZSwgZGF0YSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBvYmplY3RTdG9yZSA9IHRoaXMuZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZHdyaXRlJykub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcbiAgICAgIGNvbnN0IG1vZGlmaWVkRGF0YSA9IHsgLi4uZGF0YSwgaWQ6IGRhdGEuaWQgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCkgfTtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBvYmplY3RTdG9yZS5wdXQobW9kaWZpZWREYXRhKTtcblxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDrjbDsnbTthLAg7IKt7KCcIOuplOyEnOuTnFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlRGF0YShzdG9yZU5hbWUsIGlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWR3cml0ZScpLm9iamVjdFN0b3JlKHN0b3JlTmFtZSkuZGVsZXRlKGlkKTtcblxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuXG5jb25zdCBzYW5kYm94REIgPSBuZXcgSW5kZXhlZERCKCdzYW5kYm94REInLCAyLCBbJ25vdGVwYWQnXSk7XG5cbmV4cG9ydCBkZWZhdWx0IHNhbmRib3hEQjtcbiIsImNvbnN0IHJlbmRlclJhdyA9IChzdHJpbmcsIC4uLnZhbHVlcykgPT4ge1xyXG4gIHJldHVybiBTdHJpbmcucmF3KHN0cmluZywgLi4udmFsdWVzKTtcclxufTtcclxuXHJcbmV4cG9ydCB7IHJlbmRlclJhdyBhcyBodG1sLCByZW5kZXJSYXcgYXMgY3NzIH07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMuaW5qZWN0SFRNTCgpO1xyXG4gIH1cclxuXHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxkaXYgaWQ9XCJwYWdlXCI+PC9kaXY+XHJcbiAgICAgIDxteS1pY29ucyB0YWJpbmRleD1cIi0xXCI+PC9teS1pY29ucz5cclxuICAgICAgPG15LWZvb3Rlcj48L215LWZvb3Rlcj5cclxuICAgIGA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHRldHJpcyBmcm9tICcuLi8uLi9wdWJsaWMvdGV0cmlzLnBuZyc7XHJcbmltcG9ydCBmbGFwcHlCaXJkIGZyb20gJy4uLy4uL3B1YmxpYy9mbGFwcHlCaXJkLnBuZyc7XHJcbmltcG9ydCBub3RlcGFkIGZyb20gJy4uLy4uL3B1YmxpYy9ub3RlcGFkLnBuZyc7XHJcbmltcG9ydCBzYW5kYm94REIgZnJvbSAnLi4vY29yZS9JbmRleGVkREInO1xyXG5cclxuY29uc3Qgcm91dGVzID0gW1xyXG4gIHtcclxuICAgIHBhdGg6ICcvJyxcclxuICAgIGh0bWw6IGh0bWxgPG15LWhvbWU+PC9teS1ob21lPmAsXHJcbiAgICBsYWJlbDogJ0hvbWUnLFxyXG4gICAgaWNvblNyYzogbnVsbCxcclxuICAgIHRhZzogJ215LWhvbWUnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogJy90ZXRyaXMnLFxyXG4gICAgaHRtbDogaHRtbGA8bXktdGV0cmlzPjwvbXktdGV0cmlzPmAsXHJcbiAgICBsYWJlbDogJ1RldHJpcycsXHJcbiAgICBpY29uU3JjOiB0ZXRyaXMsXHJcbiAgICB0YWc6ICdteS10ZXRyaXMnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogJy9mbGFwcHliaXJkJyxcclxuICAgIGh0bWw6IGh0bWxgPG15LWZsYXBweWJpcmQ+PC9teS1mbGFwcHliaXJkPmAsXHJcbiAgICBsYWJlbDogJ0ZsYXBweSZuYnNwO0JpcmQnLFxyXG4gICAgaWNvblNyYzogZmxhcHB5QmlyZCxcclxuICAgIHRhZzogJ215LWZsYXBweWJpcmQnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogJy9ub3RlcGFkJyxcclxuICAgIGh0bWw6IGh0bWxgPG15LW5vdGVwYWQ+PC9teS1ub3RlcGFkPmAsXHJcbiAgICBsYWJlbDogJ05vdGUmbmJzcDtQYWQnLFxyXG4gICAgaWNvblNyYzogbm90ZXBhZCxcclxuICAgIHRhZzogJ215LW5vdGVwYWQnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogJy9ub3RlcGFkLzppZCcsXHJcbiAgICBodG1sOiBodG1sYDxteS1ub3RlcGFkPjwvbXktbm90ZXBhZD5gLFxyXG4gICAgbGFiZWw6ICdOb3RlJm5ic3A7UGFkJyxcclxuICAgIGljb25TcmM6IG51bGwsXHJcbiAgICB0YWc6ICdteS1ub3RlcGFkJyxcclxuICB9LFxyXG5dO1xyXG5cclxuY29uc3QgbWFpbkljb25zID0gcm91dGVzLnJlZHVjZSgocHJldiwgcm91dGVyKSA9PiB7XHJcbiAgY29uc3QgeyBwYXRoLCBsYWJlbCwgaWNvblNyYyB9ID0gcm91dGVyO1xyXG4gIGlmICghcm91dGVyLmljb25TcmMpIHJldHVybiBwcmV2O1xyXG4gIHJldHVybiBbLi4ucHJldiwgeyBwYXRoLCBsYWJlbCwgaWNvblNyYyB9XTtcclxufSwgW10pO1xyXG5cclxuY29uc3QgZ2V0TG9jYWxJY29ucyA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCBub3RlcGFkRGF0YSA9IGF3YWl0IHNhbmRib3hEQi5nZXRBbGxEYXRhKCdub3RlcGFkJyk7XHJcbiAgY29uc3Qgbm90ZXBhZEljb25zID0gbm90ZXBhZERhdGEucmVkdWNlKChwcmV2LCBpY29uKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkLCB0aXRsZSB9ID0gaWNvbjtcclxuICAgIHJldHVybiBbLi4ucHJldiwgeyBwYXRoOiBgL25vdGVwYWQvJHtpZH1gLCBsYWJlbDogdGl0bGUsIGljb25TcmM6IG5vdGVwYWQgfV07XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4gWy4uLm5vdGVwYWRJY29uc107XHJcbn07XHJcblxyXG5jb25zdCBCQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gJycgOiAnL2pzLXNhbmRib3gnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVzO1xyXG5leHBvcnQgeyBtYWluSWNvbnMsIGdldExvY2FsSWNvbnMsIEJBU0VfVVJMIH07XHJcbiIsImltcG9ydCByb3V0ZXMgZnJvbSAnLi4vdXRpbHMvcm91dGVzJztcclxuXHJcbmNvbnN0IEJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyAnJyA6ICcvanMtc2FuZGJveCc7XHJcblxyXG5jbGFzcyBSb3V0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKHJvdXRlKSB7XHJcbiAgICB0aGlzLnJvdXRlcyA9IHJvdXRlO1xyXG4gIH1cclxuXHJcbiAgcGF0aFRvUmVnZXhwKHBhdGgpIHtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKGBeJHtwYXRoLnJlcGxhY2UoL1xcLy9nLCAnXFxcXC8nKS5yZXBsYWNlKC86XFx3Ky9nLCAnKC4rKScpfSRgKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHJvdXRlID0gdGhpcy5yb3V0ZXMuZmluZChcclxuICAgICAgKHZhbHVlKSA9PiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZShCQVNFX1VSTCwgJycpLm1hdGNoKHRoaXMucGF0aFRvUmVnZXhwKHZhbHVlLnBhdGgpKSAhPT0gbnVsbFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoIXJvdXRlKSB7XHJcbiAgICAgIHRoaXMucmVwbGFjZVRvKCcvJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocm91dGUucGF0aC5pbmNsdWRlcygnLzppZCcpKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoQkFTRV9VUkwsICcnKS5tYXRjaCgvXFxkKy8pWzBdO1xyXG4gICAgICByb3V0ZS5odG1sID0gcm91dGUuaHRtbC5yZXBsYWNlKGAke3JvdXRlLnRhZ31gLCBgJHtyb3V0ZS50YWd9IGlkPVwiJHtpZH1cImApO1xyXG4gICAgfVxyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYWdlJykuaW5uZXJIVE1MID0gcm91dGUuaHRtbDtcclxuICB9XHJcblxyXG4gIG5hdmlnYXRlVG8odXJsKSB7XHJcbiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgQkFTRV9VUkwgKyB1cmwpO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIHJlcGxhY2VUbyh1cmwpIHtcclxuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCBCQVNFX1VSTCArIHVybCk7XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgYmFjaygpIHtcclxuICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCByb3V0ZXIgPSBuZXcgUm91dGVyKHJvdXRlcyk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XHJcbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBtYWluSWNvbnMgfSBmcm9tICcuLi8uLi91dGlscy9yb3V0ZXMnO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL2NvcmUvUm91dGVyJztcclxuaW1wb3J0IHdpbmRvd0xvZ28gZnJvbSAnLi4vLi4vLi4vcHVibGljL3dpbmRvd0xvZ28ucG5nJztcclxuaW1wb3J0IHNlYXJjaEljb24gZnJvbSAnLi4vLi4vLi4vcHVibGljL3NlYXJjaEljb24ucG5nJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RlciBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxpbWcgYWx0PVwid2luZG93X2xvZ29cIiBzcmM9JHt3aW5kb3dMb2dvfSBjbGFzcz1cIndpbmRvd19pY29uXCIgLz5cclxuICAgICAgPGRpdiBjbGFzcz1cImlucHV0X2JveFwiPlxyXG4gICAgICAgIDxpbWcgYWx0PVwic2VhcmNoXCIgc3JjPSR7c2VhcmNoSWNvbn0gY2xhc3M9XCJ3aW5kb3dfaWNvblwiIC8+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCLssL7quLBcIiAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgJHttYWluSWNvbnNcclxuICAgICAgICAubWFwKChpY29uKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gaHRtbGAgPG15LWljb24gZGF0YS1wYXRoPVwiJHtpY29uLnBhdGh9XCIgZGF0YS1pY29uU3JjPVwiJHtpY29uLmljb25TcmN9XCI+PC9teS1pY29uPiBgO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgYDtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNsaWNrKGUpIHtcclxuICAgIGlmICghZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKTtcclxuICAgIHJvdXRlci5uYXZpZ2F0ZVRvKGljb24uZGF0YXNldC5wYXRoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIGV4dGVuZHMgV2ViQ29tcG9uZW50IHt9XHJcbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV0cmlzIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxoMT5UZXRyaXM8L2gxPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIFRldHJpcyBjb21wb25lbnQhPC9wPlxyXG4gICAgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbGFwcHlCaXJkIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxoMT5GbGFwcHkgQmlyZDwvaDE+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICBgO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL2NvcmUvUm91dGVyJztcclxuaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGdldExvY2FsSWNvbnMsIG1haW5JY29ucyB9IGZyb20gJy4uLy4uL3V0aWxzL3JvdXRlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJY29ucyBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICB0aGlzLmljb25zID0gWy4uLm1haW5JY29ucywgLi4uKGF3YWl0IGdldExvY2FsSWNvbnMoKSldO1xyXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLmhhbmRsZURvdWJsZUNsaWNrKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ljb25DaGFuZ2UnLCB0aGlzLmhhbmRsZUljb25DaGFuZ2UpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XHJcbiAgICByZXR1cm4gWydpY29ucyddO1xyXG4gIH1cclxuXHJcbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgJHt0aGlzLmljb25zXHJcbiAgICAgICAgLm1hcCgoaWNvbikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgICAgICAgIDxteS1pY29uIGRhdGEtcGF0aD0ke2ljb24ucGF0aH0gZGF0YS1sYWJlbD0ke2ljb24ubGFiZWx9IGRhdGEtaWNvblNyYz0ke2ljb24uaWNvblNyY30+PC9teS1pY29uPlxyXG4gICAgICAgICAgYDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5qb2luKCcnKX1cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICBnZXQgaWNvbnMoKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmdldEF0dHJpYnV0ZSgnaWNvbnMnKSk7XHJcbiAgfVxyXG5cclxuICBzZXQgaWNvbnModmFsdWUpIHtcclxuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdpY29ucycsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDbGljayhlKSB7XHJcbiAgICBpZiAoIWUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGljb24gPSBlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJyk7XHJcbiAgICBpY29uLnRvZ2dsZUF0dHJpYnV0ZSgnY2hlY2tlZCcpO1xyXG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCdteS1pY29uJykuZm9yRWFjaCgobm9kZSkgPT4ge1xyXG4gICAgICBpZiAobm9kZSAhPT0gaWNvbikge1xyXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdjaGVja2VkJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRG91YmxlQ2xpY2soZSkge1xyXG4gICAgaWYgKCFlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJykpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpY29uID0gZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpO1xyXG4gICAgcm91dGVyLm5hdmlnYXRlVG8oaWNvbi5kYXRhc2V0LnBhdGgpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlS2V5RG93bihlKSB7XHJcbiAgICBjb25zdCBjaGVja2VkRWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJ215LWljb25bY2hlY2tlZF0nKTtcclxuICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICBpZiAoY2hlY2tlZEVsLmxlbmd0aCA+IDEpIHJldHVybjtcclxuICAgICAgaWYgKCFjaGVja2VkRWwpIHJldHVybjtcclxuICAgICAgcm91dGVyLm5hdmlnYXRlVG8oY2hlY2tlZEVsWzBdLmRhdGFzZXQucGF0aCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVJY29uQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfSA9IGUuZGV0YWlsO1xyXG4gICAgY29uc3QgcHJldkljb25JbmRleCA9IHRoaXMuaWNvbnMuZmluZEluZGV4KChpY29uKSA9PiBpY29uLnBhdGggPT09IHBhdGgpO1xyXG5cclxuICAgIGlmIChwcmV2SWNvbkluZGV4ID09PSAtMSkge1xyXG4gICAgICB0aGlzLmljb25zID0gWy4uLnRoaXMuaWNvbnMsIHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBuZXdJY29ucyA9IFsuLi50aGlzLmljb25zXTtcclxuICAgICAgbmV3SWNvbnNbcHJldkljb25JbmRleF0gPSB7IHBhdGgsIGxhYmVsLCBpY29uU3JjIH07XHJcbiAgICAgIHRoaXMuaWNvbnMgPSBuZXdJY29ucztcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJY29uIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgY29uc3QgeyBsYWJlbCwgaWNvbnNyYyB9ID0gdGhpcy5kYXRhc2V0O1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxpbWcgYWx0PVwiJHtsYWJlbH1faWNvblwiIHNyYz0ke2ljb25zcmN9IC8+XHJcbiAgICAgICR7bGFiZWwgPyBgPHNwYW4gY2xhc3M9XCJpY29uX25hbWVcIj4ke2xhYmVsfTwvc3Bhbj5gIDogJyd9XHJcbiAgICBgO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcclxuaW1wb3J0IHNhbmRib3hEQiBmcm9tICcuLi8uLi9jb3JlL0luZGV4ZWREQic7XHJcbmltcG9ydCBOb3RlUGFkSWNvbiBmcm9tICcuLi8uLi8uLi9wdWJsaWMvbm90ZXBhZC5wbmcnO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL2NvcmUvUm91dGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGVQYWQgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgdGhpcy5kYXRhID0gKGF3YWl0IHNhbmRib3hEQi5nZXREYXRhKCdub3RlcGFkJywgdGhpcy5pZCkpID8/IHtcclxuICAgICAgdGl0bGU6ICfsoJzrqqnsl4bsnYwnLFxyXG4gICAgICBjb250ZW50OiAnJyxcclxuICAgIH07XHJcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdzYXZlJywgdGhpcy5oYW5kbGVTYXZlKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbG9jYWxTYXZlJywgdGhpcy5oYW5kbGVMb2NhbFNhdmUpO1xyXG4gIH1cclxuXHJcbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NhdmUnLCB0aGlzLmhhbmRsZVNhdmUpO1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2NhbFNhdmUnLCB0aGlzLmhhbmRsZUxvY2FsU2F2ZSk7XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgY29uc3QgeyB0aXRsZSwgY29udGVudCB9ID0gdGhpcy5kYXRhO1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxteS1ub3RlcGFkLWhlYWRlciB0aXRsZT0ke3RpdGxlfT48L215LW5vdGVwYWQtaGVhZGVyPlxyXG4gICAgICA8dGV4dGFyZWE+JHtjb250ZW50fTwvdGV4dGFyZWE+XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlTG9jYWxTYXZlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IG5vdGVQYWREYXRhID0gdGhpcy5nZXROb3RlUGFkRGF0YSgpO1xyXG4gICAgaWYgKCFub3RlUGFkRGF0YSkgcmV0dXJuO1xyXG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtub3RlUGFkRGF0YS5jb250ZW50XSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XHJcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgIGxpbmsuZG93bmxvYWQgPSBgJHtub3RlUGFkRGF0YS50aXRsZX0udHh0YDtcclxuICAgIGxpbmsuY2xpY2soKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGhhbmRsZVNhdmUoZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgY29uc3Qgbm90ZVBhZERhdGEgPSB0aGlzLmdldE5vdGVQYWREYXRhKCk7XHJcbiAgICAgIGlmICghbm90ZVBhZERhdGEpIHJldHVybjtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNhbmRib3hEQi51cHNlcnREYXRhKCdub3RlcGFkJywgbm90ZVBhZERhdGEpO1xyXG4gICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgY29uc3QgcGF0aCA9IGAvbm90ZXBhZC8ke3Jlc3VsdH1gO1xyXG5cclxuICAgICAgYWxlcnQoJ+yggOyepeuQmOyXiOyKteuLiOuLpC4nKTtcclxuICAgICAgY29uc3QgaWNvbkNoYW5nZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpY29uQ2hhbmdlJywge1xyXG4gICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgcGF0aCxcclxuICAgICAgICAgIGxhYmVsOiBub3RlUGFkRGF0YS50aXRsZS5yZXBsYWNlKC8gL2csICcmbmJzcDsnKSxcclxuICAgICAgICAgIGljb25TcmM6IE5vdGVQYWRJY29uLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdteS1pY29ucycpLmRpc3BhdGNoRXZlbnQoaWNvbkNoYW5nZUV2ZW50KTtcclxuICAgICAgcm91dGVyLm5hdmlnYXRlVG8ocGF0aCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgYWxlcnQoJ+yggOyepeyXkCDsi6TtjKjtlojsirXri4jri6QuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXROb3RlUGFkRGF0YSgpIHtcclxuICAgIGNvbnN0IGNvbnRlbnRFbCA9IHRoaXMucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBjb250ZW50RWwudmFsdWUudHJpbSgpO1xyXG4gICAgaWYgKCFjb250ZW50KSB7XHJcbiAgICAgIGFsZXJ0KCfrgrTsmqnsnbQg7JeG7Iq164uI64ukLicpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdGl0bGU7XHJcbiAgICB3aGlsZSAoIXRpdGxlKSB7XHJcbiAgICAgIHRpdGxlID0gcHJvbXB0KCftjIzsnbzrqoXsnYQg7J6F66Cl7ZWY7IS47JqULicsIHRoaXMuZGF0YS50aXRsZS5yZXBsYWNlKC8mbmJzcDsvZywgJyAnKSk7XHJcbiAgICAgIGlmICghdGl0bGUpIHtcclxuICAgICAgICBjb25zdCBjb25maXJtUmVzdWx0ID0gd2luZG93LmNvbmZpcm0oJ+ygnOuqqeydgCDtlYTsiJjsnoXri4jri6QuJyk7XHJcbiAgICAgICAgaWYgKCFjb25maXJtUmVzdWx0KSByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICB0aXRsZTogdGl0bGUudHJpbSgpLnJlcGxhY2UoLyAvZywgJyZuYnNwOycpLFxyXG4gICAgICBjb250ZW50OiBjb250ZW50LnJlcGxhY2UoLyAvZywgJyZuYnNwOycpLnJlcGxhY2UoL1xcbi9nLCAnPGJyPicpLnJlcGxhY2UoL1xcdC9nLCAnJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7JyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlkKCkge1xyXG4gICAgcmV0dXJuIE51bWJlcih0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKSk7XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IGJ1dHRvbnMgPSBbXHJcbiAge1xyXG4gICAgaWQ6ICdmaWxlJyxcclxuICAgIHRpdGxlOiAn7YyM7J28JyxcclxuICAgIGtleTogJ0YnLFxyXG4gICAgc2xvdHM6IFtcclxuICAgICAgeyBpZDogMSwgdGV4dDogJ+yDiOuhnCDrp4zrk6TquLAoTiknLCBrZXk6IFsnQ3RybCcsICdOJ10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogMiwgdGV4dDogJ+uCtCDsu7Ttk6jthLDsl5Ag7KCA7J6lKFcpJywga2V5OiBbJ0N0cmwnLCAnU2hpZnQnLCAnTiddLCBvbkNsaWNrOiBoYW5kbGVMb2NhbFNhdmVDbGljayB9LFxyXG4gICAgICB7IGlkOiAzLCB0ZXh0OiAn7KCA7J6lKFMpJywga2V5OiBbJ0N0cmwnLCAnUyddLCBvbkNsaWNrOiBoYW5kbGVTYXZlQ2xpY2sgfSxcclxuICAgICAgeyBpZDogNCwgdGV4dDogJ+yCreygnChEKScsIGtleTogWydDdHJsJywgJ1NoaWZ0JywgJ1MnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiA1LCB0ZXh0OiAn7Y6Y7J207KeAIOyEpOyglShVKS4uLicsIGtleTogW10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogNiwgdGV4dDogJ+yduOyHhChQKS4uLicsIGtleTogWydDdHJsJywgJ1AnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiA3LCB0ZXh0OiAn64Gd64K06riwKFgpJywga2V5OiBbXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnZWRpdCcsXHJcbiAgICB0aXRsZTogJ+2OuOynkScsXHJcbiAgICBrZXk6ICdFJyxcclxuICAgIHNsb3RzOiBbXHJcbiAgICAgIHsgaWQ6IDgsIHRleHQ6ICfsi6Ttlokg7Leo7IaMKFUpJywga2V5OiBbJ0N0cmwnLCAnWiddLCBkaXNhYmxlOiB0cnVlIH0sXHJcbiAgICAgIHsgaWQ6IDksIHRleHQ6ICfsnpjrnbzrgrTquLAoVCknLCBrZXk6IFsnQ3RybCcsICdYJ10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogMTAsIHRleHQ6ICfrs7XsgqwoQyknLCBrZXk6IFsnQ3RybCcsICdDJ10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogMTEsIHRleHQ6ICfrtpnsl6zrhKPquLAoUCknLCBrZXk6IFsnQ3RybCcsICdWJ10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogMTIsIHRleHQ6ICfsgq3soJwoRCknLCBrZXk6IFsnRGVsJ10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogMTMsIHRleHQ6ICdCaW5n7Jy866GcIOqygOyDiShTKS4uLicsIGtleTogWydDdHJsJywgJ0UnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiAxNCwgdGV4dDogJ+ywvuq4sChGKS4uLicsIGtleTogWydDdHJsJywgJ0YnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiAxNSwgdGV4dDogJ+uLpOydjCDssL7quLAoTiknLCBrZXk6IFsnRjMnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiAxNiwgdGV4dDogJ+ydtOyghCDssL7quLAoViknLCBrZXk6IFsnU2hpZnQnLCAnRjMnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiAxNywgdGV4dDogJ+uwlOq+uOq4sChSKS4uLicsIGtleTogWydDdHJsJywgJ0gnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiAxOCwgdGV4dDogJ+ydtOuPmShHKS4uLicsIGtleTogWydDdHJsJywgJ0cnXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgICB7IGlkOiAxOSwgdGV4dDogJ+uqqOuRkCDshKDtg50oQSknLCBrZXk6IFsnQ3RybCcsICdBJ10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogMjAsIHRleHQ6ICfsi5zqsIQv64Kg7KecKEQpJywga2V5OiBbJ0Y1J10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2Zvcm1hdCcsXHJcbiAgICB0aXRsZTogJ+yEnOyLnScsXHJcbiAgICBrZXk6ICdPJyxcclxuICAgIHNsb3RzOiBbXHJcbiAgICAgIHsgaWQ6IDIxLCB0ZXh0OiAn7J6Q64+ZIOykhCDrsJTqv4goVyknLCBrZXk6IFtdLCBkaXNhYmxlOiB0cnVlIH0sXHJcbiAgICAgIHsgaWQ6IDIyLCB0ZXh0OiAn6riA6ry0KEYpLi4uJywga2V5OiBbXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAndmlldycsXHJcbiAgICB0aXRsZTogJ+uztOq4sCcsXHJcbiAgICBrZXk6ICdWJyxcclxuICAgIHNsb3RzOiBbXHJcbiAgICAgIHsgaWQ6IDIzLCB0ZXh0OiAn7ZmV64yA7ZWY6riwKFopJywga2V5OiBbJ0N0cmwnLCAnKyddLCBkaXNhYmxlOiB0cnVlIH0sXHJcbiAgICAgIHsgaWQ6IDI0LCB0ZXh0OiAn7LaV7IaM7ZWY6riwKFgpJywga2V5OiBbJ0N0cmwnLCAnLSddLCBkaXNhYmxlOiB0cnVlIH0sXHJcbiAgICAgIHsgaWQ6IDI1LCB0ZXh0OiAn7IOB7YOcIO2RnOyLnOykhChTKScsIGtleTogW10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2hlbHAnLFxyXG4gICAgdGl0bGU6ICfrj4Tsm4Drp5AnLFxyXG4gICAga2V5OiAnSCcsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAyNiwgdGV4dDogJ+uPhOybgOunkCDrs7TquLAoSCknLCBrZXk6IFtdLCBkaXNhYmxlOiB0cnVlIH0sXHJcbiAgICAgIHsgaWQ6IDI3LCB0ZXh0OiAn7ZS865Oc67CxIOuztOuCtOq4sChGKScsIGtleTogW10sIGRpc2FibGU6IHRydWUgfSxcclxuICAgICAgeyBpZDogMjgsIHRleHQ6ICfrqZTrqqjsnqUg7KCV67O0KEEpJywga2V5OiBbXSwgZGlzYWJsZTogdHJ1ZSB9LFxyXG4gICAgXSxcclxuICB9LFxyXG5dO1xyXG5cclxuY29uc3Qgc2xvdHMgPSBidXR0b25zLnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcclxuICByZXR1cm4gWy4uLmFjYywgLi4uY3VyLnNsb3RzXTtcclxufSwgW10pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYnV0dG9ucztcclxuZXhwb3J0IHsgc2xvdHMgfTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVNhdmVDbGljaygpIHtcclxuICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzYXZlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlTG9jYWxTYXZlQ2xpY2soKSB7XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnbG9jYWxTYXZlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcclxufVxyXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuaW1wb3J0IGJ1dHRvbnMsIHsgc2xvdHMgfSBmcm9tICcuLi9jb25zdC9idXR0b25zJztcclxuaW1wb3J0IE5vdGVQYWRJY29uIGZyb20gJy4uLy4uLy4uLy4uL3B1YmxpYy9ub3RlcGFkLnBuZyc7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi4vLi4vLi4vY29yZS9Sb3V0ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90ZVBhZEhlYWRlciBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spO1xyXG4gIH1cclxuXHJcbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxoZWFkZXI+XHJcbiAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICA8aW1nIGFsdD1cIm5vdGVwYWRfaWNvblwiIHNyYz0ke05vdGVQYWRJY29ufSAvPlxyXG4gICAgICAgICAgJHt0aGlzLnRpdGxlfSAtIFdpbmRvd3Mg66mU66qo7J6lXHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2aWV3X2J1dHRvbnNcIj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2aWV3X2J1dHRvblwiIGlkPVwibWluaVwiPvCfl5U8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2aWV3X2J1dHRvblwiIGlkPVwiZnVsbFwiPvCfl5Y8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2aWV3X2J1dHRvblwiIGlkPVwiY2xvc2VcIj7ihak8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9oZWFkZXI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJlZGl0X2J1dHRvbnNcIj5cclxuICAgICAgICAke2J1dHRvbnNcclxuICAgICAgICAgIC5tYXAoXHJcbiAgICAgICAgICAgIChidXR0b24pID0+IGh0bWxgXHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXRfYnV0dG9uXCI+XHJcbiAgICAgICAgICAgICAgICAke2J1dHRvbi50aXRsZX0oPHU+JHtidXR0b24ua2V5fTwvdT4pXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9wdXBcIj5cclxuICAgICAgICAgICAgICAgICAgJHtidXR0b24uc2xvdHNcclxuICAgICAgICAgICAgICAgICAgICAubWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgKHNsb3QpID0+IGh0bWxgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWJcIiBkYXRhLWlkPVwiJHtzbG90LmlkfVwiIGRhdGEtZGlzYWJsZT1cIiR7ISFzbG90LmRpc2FibGV9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4ke3Nsb3QudGV4dH08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAke3Nsb3Qua2V5Lmxlbmd0aCA+IDAgPyBgPGRpdj4ke3Nsb3Qua2V5LmpvaW4oJyArICcpfTwvZGl2PmAgOiAnJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcnKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICBgXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAuam9pbignJyl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNsaWNrKGUpIHtcclxuICAgIGNvbnN0IHZpZXdCdXR0b24gPSBlLnRhcmdldC5jbG9zZXN0KCcudmlld19idXR0b24nKTtcclxuICAgIGNvbnN0IGVkaXRCdXR0b24gPSBlLnRhcmdldC5jbG9zZXN0KCcuZWRpdF9idXR0b24nKTtcclxuICAgIGNvbnN0IHN1YiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5zdWInKTtcclxuXHJcbiAgICBpZiAodmlld0J1dHRvbikge1xyXG4gICAgICB0aGlzLmNsaWNrVmlld0J1dHRvbih2aWV3QnV0dG9uKTtcclxuICAgIH0gZWxzZSBpZiAoZWRpdEJ1dHRvbikge1xyXG4gICAgICB0aGlzLmNsaWNrRWRpdEJ1dHRvbihlZGl0QnV0dG9uLCBzdWIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jbG9zZVBvcHVwKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGlja1ZpZXdCdXR0b24odmlld0J1dHRvbikge1xyXG4gICAgc3dpdGNoICh2aWV3QnV0dG9uLmlkKSB7XHJcbiAgICAgIGNhc2UgJ2Z1bGwnOlxyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdmdWxsc2NyZWVuJyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ21pbmknOlxyXG4gICAgICBjYXNlICdjbG9zZSc6XHJcbiAgICAgICAgcm91dGVyLmJhY2soKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrRWRpdEJ1dHRvbihlZGl0QnV0dG9uLCBzdWIpIHtcclxuICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xyXG4gICAgaWYgKHN1Yikge1xyXG4gICAgICBjb25zdCBzbG90SWQgPSBOdW1iZXIoc3ViLmRhdGFzZXQuaWQpO1xyXG4gICAgICBjb25zdCB7IG9uQ2xpY2sgfSA9IHNsb3RzLmZpbmQoKHNsb3QpID0+IHNsb3QuaWQgPT09IHNsb3RJZCkgfHwge307XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljay5jYWxsKHRoaXMpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBwb3B1cCA9IGVkaXRCdXR0b24ucXVlcnlTZWxlY3RvcignLnBvcHVwJyk7XHJcbiAgICAgIHBvcHVwLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsb3NlUG9wdXAoKSB7XHJcbiAgICBjb25zdCBwb3B1cCA9IHRoaXMucXVlcnlTZWxlY3RvcignLnBvcHVwLnNob3cnKTtcclxuICAgIGlmIChwb3B1cCkge1xyXG4gICAgICBwb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgdGl0bGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAnLi9zdHlsZS5zY3NzJztcclxuaW1wb3J0IHNhbmRib3hEQiBmcm9tICcuL2NvcmUvSW5kZXhlZERCJztcclxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XHJcbmltcG9ydCBGb290ZXIgZnJvbSAnLi92aWV3L0NvbW1vbi9Gb290ZXInO1xyXG5pbXBvcnQgSG9tZSBmcm9tICcuL3ZpZXcvSG9tZSc7XHJcbmltcG9ydCBUZXRyaXMgZnJvbSAnLi92aWV3L1RldHJpcyc7XHJcbmltcG9ydCBGbGFwcHlCaXJkIGZyb20gJy4vdmlldy9GbGFwcHlCaXJkJztcclxuaW1wb3J0IEljb25zIGZyb20gJy4vdmlldy9Db21tb24vSWNvbnMnO1xyXG5pbXBvcnQgSWNvbiBmcm9tICcuL3ZpZXcvQ29tbW9uL0ljb24nO1xyXG5pbXBvcnQgTm90ZVBhZCBmcm9tICcuL3ZpZXcvTm90ZVBhZCc7XHJcbmltcG9ydCBOb3RlUGFkSGVhZGVyIGZyb20gJy4vdmlldy9Ob3RlUGFkL2NvbXBvbmVudHMvTm90ZVBhZEhlYWRlcic7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9jb3JlL1JvdXRlcic7XHJcblxyXG4oYXN5bmMgKCkgPT4ge1xyXG4gIGF3YWl0IHNhbmRib3hEQi5vcGVuREIoKTtcclxuXHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1hcHAnLCBBcHApO1xyXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbXktZm9vdGVyJywgRm9vdGVyKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWhvbWUnLCBIb21lKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LXRldHJpcycsIFRldHJpcyk7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1mbGFwcHliaXJkJywgRmxhcHB5QmlyZCk7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1pY29ucycsIEljb25zKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWljb24nLCBJY29uKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LW5vdGVwYWQnLCBOb3RlUGFkKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LW5vdGVwYWQtaGVhZGVyJywgTm90ZVBhZEhlYWRlcik7XHJcbn0pKCk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHJvdXRlci5yZW5kZXIoKSk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsICgpID0+IHJvdXRlci5yZW5kZXIoKSk7XHJcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZGIiLCJjb25zdHJ1Y3RvciIsImRiTmFtZSIsImRiVmVyc2lvbiIsInN0b3JlcyIsInRoaXMiLCJhc3luYyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdCIsIndpbmRvdyIsImluZGV4ZWREQiIsIm9wZW4iLCJvbnN1Y2Nlc3MiLCJyZXN1bHQiLCJvbmVycm9yIiwiZSIsIm9udXBncmFkZW5lZWRlZCIsImZvckVhY2giLCJzdG9yZSIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsImRlbGV0ZU9iamVjdFN0b3JlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwic3RvcmVOYW1lIiwiaWQiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiZ2V0IiwiZ2V0QWxsIiwiZGF0YSIsIm1vZGlmaWVkRGF0YSIsIkRhdGUiLCJnZXRUaW1lIiwicHV0IiwiY29uc29sZSIsImVycm9yIiwiZGVsZXRlIiwicmVuZGVyUmF3Iiwic3RyaW5nIiwidmFsdWVzIiwiU3RyaW5nIiwicmF3IiwiV2ViQ29tcG9uZW50IiwiSFRNTEVsZW1lbnQiLCJjb25uZWN0ZWRDYWxsYmFjayIsInJlbmRlciIsImlubmVySFRNTCIsImluamVjdEhUTUwiLCJBcHAiLCJyb3V0ZXMiLCJwYXRoIiwiaHRtbCIsImxhYmVsIiwiaWNvblNyYyIsInRhZyIsIm1haW5JY29ucyIsInJlZHVjZSIsInByZXYiLCJyb3V0ZXIiLCJnZXRMb2NhbEljb25zIiwiaWNvbiIsInRpdGxlIiwicm91dGUiLCJwYXRoVG9SZWdleHAiLCJSZWdFeHAiLCJyZXBsYWNlIiwiZmluZCIsInZhbHVlIiwibG9jYXRpb24iLCJwYXRobmFtZSIsIm1hdGNoIiwiaW5jbHVkZXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZXBsYWNlVG8iLCJuYXZpZ2F0ZVRvIiwidXJsIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSIsImJhY2siLCJGb290ZXIiLCJzdXBlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVDbGljayIsImJpbmQiLCJqb2luIiwidGFyZ2V0IiwiY2xvc2VzdCIsImRhdGFzZXQiLCJIb21lIiwiVGV0cmlzIiwiRmxhcHB5QmlyZCIsIkljb25zIiwiaWNvbnMiLCJoYW5kbGVEb3VibGVDbGljayIsImhhbmRsZUtleURvd24iLCJoYW5kbGVJY29uQ2hhbmdlIiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwibmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJtYXAiLCJKU09OIiwicGFyc2UiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzdHJpbmdpZnkiLCJ0b2dnbGVBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibm9kZSIsInJlbW92ZUF0dHJpYnV0ZSIsImNoZWNrZWRFbCIsImtleSIsImxlbmd0aCIsImRldGFpbCIsInByZXZJY29uSW5kZXgiLCJmaW5kSW5kZXgiLCJuZXdJY29ucyIsIkljb24iLCJpY29uc3JjIiwiTm90ZVBhZCIsImNvbnRlbnQiLCJoYW5kbGVTYXZlIiwiaGFuZGxlTG9jYWxTYXZlIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJub3RlUGFkRGF0YSIsImdldE5vdGVQYWREYXRhIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwibGluayIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG93bmxvYWQiLCJjbGljayIsInN0b3BQcm9wYWdhdGlvbiIsImFsZXJ0IiwiaWNvbkNoYW5nZUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZXJyIiwidHJpbSIsInByb21wdCIsImNvbmZpcm0iLCJOdW1iZXIiLCJidXR0b25zIiwic2xvdHMiLCJ0ZXh0IiwiZGlzYWJsZSIsIm9uQ2xpY2siLCJidWJibGVzIiwiYWNjIiwiY3VyIiwiTm90ZVBhZEhlYWRlciIsImJ1dHRvbiIsInNsb3QiLCJ2aWV3QnV0dG9uIiwiZWRpdEJ1dHRvbiIsInN1YiIsImNsaWNrVmlld0J1dHRvbiIsImNsaWNrRWRpdEJ1dHRvbiIsImNsb3NlUG9wdXAiLCJwYXJlbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwic2xvdElkIiwiY2FsbCIsInBvcHVwIiwicmVtb3ZlIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiXSwic291cmNlUm9vdCI6IiJ9