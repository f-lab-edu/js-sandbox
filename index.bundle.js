(()=>{"use strict";var t="/js-sandbox/";const e=new class{db;constructor(t,e,i){this.dbName=t,this.dbVersion=e,this.stores=i}async openDB(){return new Promise(((t,e)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,t()},i.onerror=t=>{e(t)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((t=>{this.db.objectStoreNames.contains(t)&&this.db.deleteObjectStore(t),this.db.createObjectStore(t,{keyPath:"id"})}))}}))}async getData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readonly").objectStore(t).get(e);n.onsuccess=()=>{i(n.result)},n.onerror=t=>{s(t)}}))}async getAllData(t){return new Promise(((e,i)=>{const s=this.db.transaction(t,"readonly").objectStore(t).getAll();s.onsuccess=()=>{e(s.result)},s.onerror=t=>{i(t)}}))}async upsertData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t),o={...e,id:e.id||(new Date).getTime()},a=n.put(o);a.onsuccess=()=>{i(a.result)},a.onerror=()=>{console.log(a.error),s(a.error)}}))}async deleteData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t).delete(e);n.onsuccess=()=>{i(!0)},n.onerror=t=>{s(t)}}))}}("sandboxDB",2,["notepad"]),i=(t,...e)=>String.raw(t,...e);class s extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class n extends s{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const o=t+"2a583f97b153f7da7d41.png",a="/js-sandbox",r=[{path:"/",html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:t+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:t+"39b884119b49599495ed.png"},{path:"/notepad",html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:o},{path:"/notepad/:id",html:i`<my-notepad data-id=":id"></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null}],l=r.reduce(((t,e)=>{const{path:i,label:s,iconSrc:n}=e;return e.iconSrc?[...t,{path:i,label:s,iconSrc:n}]:t}),[]),c=async()=>[...(await e.getAllData("notepad")).reduce(((t,e)=>{const{id:i,title:s}=e;return[...t,{path:`/notepad/${i}`,label:s,iconSrc:o}]}),[])],d=r,h=new class{constructor(t){this.routes=t}pathToRegexp(t){return new RegExp(`^${t.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const t=window.location.pathname,e=this.routes.find((e=>this.pathToRegexp(this.getUrlFrom(e.path)).test(t)));e?document.querySelector("#page").innerHTML=e.html.replace(":id",this.getIdFromPath(t)):this.replaceTo("/")}getIdFromPath(t){return t.match(/\d+/)?.[0]}navigateTo(t){this.getUrlFrom(t)!==window.location.pathname&&(window.history.pushState(null,null,a+t),this.render())}replaceTo(t){window.history.replaceState(null,null,a+t),this.render()}getUrlFrom(t){return`${a}${t}`}back(){window.history.back(),this.render()}}(d),u=t+"59cb65e4f8f2627d6c2c.png",p=t+"bc8d31a2338dd0b3f68a.png";class b extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${u} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${p} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${l.map((t=>i` <my-icon data-path="${t.path}" data-iconSrc="${t.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}}class m extends s{}const y={I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[2,0,0],[2,2,2],[0,0,0]],L:[[0,0,3],[3,3,3],[0,0,0]],O:[[4,4],[4,4]],S:[[0,5,5],[5,5,0],[0,0,0]],T:[[0,6,0],[6,6,6],[0,0,0]],Z:[[7,7,0],[0,7,7],[0,0,0]]},k={0:"empty",1:"I",2:"J",3:"L",4:"O",5:"S",6:"T",7:"Z",10:"I freeze",20:"J freeze",30:"L freeze",40:"O freeze",50:"S freeze",60:"T freeze",70:"Z freeze"},v={1:100,2:300,3:500,4:800},g=10;class w{static blockQueue=w.createShuffleBlockQueue();static createShuffleBlockQueue(){return Object.values(y).sort((()=>Math.random()-.5))}static getNextTetrominos(){return w.blockQueue.slice(0,3)}constructor(t,e=!0){this.$board=t,e&&this.createNewBlock()}createNewBlock(){this.block=w.blockQueue.shift(),w.blockQueue.length<3&&(w.blockQueue=w.blockQueue.concat(w.createShuffleBlockQueue()));const t=this.getInitialBlockPos(g,this.block);this.x=t.x,this.y=t.y}rotate(t){const e=this.block[0].map(((t,e)=>this.block.map((t=>t[e])).reverse())),i=e[0].length,s=e.length;let n=this.x,o=this.y;n+i>g&&(n=g-i),n<0&&(n=0),o+s>20&&(o=20-s),o<0&&(o=0),this.canMove(t,n,o,e)&&(this.block=e,this.x=n,this.y=o)}moveLeft(t){this.canMove(t,this.x-1,this.y,this.block)&&(this.x-=1)}moveRight(t){this.canMove(t,this.x+1,this.y,this.block)&&(this.x+=1)}moveDown(t){this.canMove(t,this.x,this.y+1,this.block)?this.y+=1:0===this.y?(this.freeze(t),this.$board.stopGame()):(this.freeze(t),this.scoreUp(this.removeFullRows(t)),this.speedUp(),this.createNewBlock())}freeze(t){const{block:e,x:i,y:s}=this;e.forEach(((e,n)=>{e.forEach(((e,o)=>{0!==e&&(t[s+n][i+o]=10*e)}))}))}removeFullRows(t){let e=0;return t.forEach(((i,s)=>{i.every((t=>t>=10))&&(e+=1,t.splice(s,1),t.unshift(Array(g).fill(0)))})),e}speedUp(){10===this.$board.tetrominoCounter&&(this.$board.tetrominoCounter=0,this.$board.dropInterval*=.9),this.$board.tetrominoCounter+=1}scoreUp(t){t>0&&(this.$board.score+=v[t]??0)}canMove(t,e,i,s){for(let n=0;n<s.length;n+=1)for(let o=0;o<s[n].length;o+=1)if(0!==s[n][o]){const s=e+o,a=i+n;if(s<0||s>=g||a<0||a>=20||t[a][s]>=10)return!1}return!0}getInitialBlockPos(t,e){const i=e.findIndex((t=>t.some((t=>0!==t))));return{x:Math.floor((t-e[0].length)/2),y:-i}}clone(){const t=new w(this.$board,!1);return t.block=this.block.map((t=>[...t])),t.x=this.x,t.y=this.y,t}}class f extends s{constructor(){super(),this.board=this.getInitialBoard(g,20),this.start=!1,this.tetromino=null,this.score=0,this.lastTime=null,this.dropInterval=1e3,this.tetrominoCounter=0,this.animationId=null,this.startGame=this.startGame.bind(this),this.keydownHandler=this.keydownHandler.bind(this),this.dropBlock=this.dropBlock.bind(this)}connectedCallback(){super.connectedCallback(),this.querySelector("#start-button").addEventListener("click",this.startGame)}injectHTML(){return i`
      <button id="start-button">게임 시작</button>
      <div class="board">
        ${this.board.map((t=>i`
              <ul>
                ${t.map((t=>i`<li class="cell-${k[t]}"></li>`)).join("")}
              </ul>
            `)).join("")}
      </div>
      <div class="tetromino-previews">
        ${this.nextTetrominos.map((t=>i`
              <div class="tetromino-preview">
                ${t.map((t=>i`
                      <ul class="tetromino-preview-row">
                        ${t.map((t=>i`<li class="cell-${k[t]}"></li>`)).join("")}
                      </ul>
                    `)).join("")}
              </div>
            `)).join("")}
      </div>

      <!--      <div class="score">점수: <span class="score">${this.score}</span></div>-->
    `}get nextTetrominos(){return w.getNextTetrominos()}static get observedAttributes(){return["board"]}attributeChangedCallback(t){"board"===t&&this.render()}getInitialBoard(t,e){return Array.from(Array(e),(()=>Array(t).fill(0)))}startGame(){this.start||(this.start=!0,this.tetromino=new w(this),this.tetrominoCounter+=1,this.updateBoard(),document.addEventListener("keydown",this.keydownHandler),this.lastTime=performance.now(),requestAnimationFrame(this.dropBlock))}stopGame(){this.start=!1,this.board=this.getInitialBoard(g,20),this.tetrominoCounter=0,this.dropInterval=1e3,cancelAnimationFrame(this.animationId),document.removeEventListener("keydown",this.keydownHandler)}dropBlock(t){if(t-this.lastTime>this.dropInterval){const e=this.tetromino.clone(),i=this.board;this.tetromino.moveDown(i),this.updateBoard(i,e),this.lastTime=t}this.start&&(this.animationId=requestAnimationFrame(this.dropBlock))}keydownHandler(t){const e=this.tetromino.clone(),i=this.board;"ArrowDown"===t.key?this.tetromino.moveDown(i):"ArrowUp"===t.key?this.tetromino.rotate(i):"ArrowLeft"===t.key?this.tetromino.moveLeft(i):"ArrowRight"===t.key&&this.tetromino.moveRight(i),this.updateBoard(i,e)}updateBoard(t=this.board,e=null){e&&this.removeOldBlock(e,t),this.putNewBlock(this.tetromino,t),this.board=t}removeOldBlock(t,e){const{block:i,x:s,y:n}=t;i.forEach(((t,i)=>{t.forEach(((t,o)=>{e[n+i]?.[s+o]===t&&(e[n+i][s+o]=0)}))}))}putNewBlock(t,e){const{x:i,y:s,block:n}=t;n.forEach(((t,n)=>{t.forEach(((t,o)=>{0!==t&&(e[s+n][i+o]=t)}))}))}get board(){return JSON.parse(this.getAttribute("board"))}set board(t){this.setAttribute("board",JSON.stringify(t))}}class x extends s{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class S extends s{async connectedCallback(){this.icons=[...l,...await c()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange),this.addEventListener("iconDelete",this.handleIconDelete)}static get observedAttributes(){return["icons"]}attributeChangedCallback(t,e,i){e!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((t=>i`
            <my-icon data-path=${t.path} data-label=${t.label} data-iconSrc=${t.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(t){this.setAttribute("icons",JSON.stringify(t))}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");e.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((t=>{t!==e&&t.removeAttribute("checked")}))}handleDoubleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}handleKeyDown(t){const e=this.querySelectorAll("my-icon[checked]");if("Enter"===t.key){if(e.length>1)return;if(!e)return;h.navigateTo(e[0].dataset.path)}}handleIconChange(t){const{path:e,label:i,iconSrc:s}=t.detail,n=this.icons.findIndex((t=>t.path===e));if(-1===n)this.icons=[...this.icons,{path:e,label:i,iconSrc:s}];else{const t=[...this.icons];t[n]={path:e,label:i,iconSrc:s},this.icons=t}}handleIconDelete(t){const{path:e}=t.detail;this.icons=this.icons.filter((t=>t.path!==e))}}class C extends s{injectHTML(){const{label:t,iconsrc:e}=this.dataset;return i`
      <img alt="${t}_icon" src=${e} />
      ${t?`<span class="icon_name">${t}</span>`:""}
    `}}class E extends s{async connectedCallback(){this.data=await e.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave),this.addEventListener("delete",this.handleDelete)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave),this.removeEventListener("delete",this.handleDelete)}injectHTML(){const{title:t,content:e}=this.data;return i`
      <my-notepad-header title=${t}></my-notepad-header>
      <textarea>${e}</textarea>
    `}handleLocalSave(t){t.preventDefault();const e=this.getNotePadData();if(!e)return;const i=new Blob([e.content],{type:"text/plain"}),s=document.createElement("a");s.href=URL.createObjectURL(i),s.download=`${e.title}.txt`,s.click()}async handleSave(t){t.stopPropagation();const i=this.getNotePadData();if(i)try{const t=await e.upsertData("notepad",i),s=`/notepad/${t}`;alert("저장되었습니다.");const n=new CustomEvent("iconChange",{detail:{path:s,label:i.title,iconSrc:o}});document.querySelector("my-icons").dispatchEvent(n),this.id===t?this.title=i.title.replace(/&nbsp;/g," "):h.navigateTo(s)}catch(t){alert("저장에 실패했습니다.")}}async handleDelete(t){try{if(t.stopPropagation(),!window.confirm("정말 삭제하시겠습니까?"))return;await e.deleteData("notepad",this.id),alert("삭제되었습니다.");const i=new CustomEvent("iconDelete",{detail:{path:`/notepad/${this.id}`}});document.querySelector("my-icons").dispatchEvent(i),h.replaceTo("/notepad")}catch(t){alert("삭제에 실패했습니다.")}}getNotePadData(){const t=this.querySelector("textarea").value.trim();if(!t)return alert("내용이 없습니다."),null;let e;for(;!e;)if(!(e=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),e||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:e.trim().replace(/ /g,"&nbsp;"),content:t.replace(/ /g,"&nbsp;")}}get id(){return Number(this.getAttribute("data-id"))}set title(t){this.querySelector("my-notepad-header").setAttribute("title",t)}}const $=!0,L=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],onClick:function(){const t=document.querySelector("my-notepad");t.getAttribute("data-id")?h.navigateTo("/notepad"):t.render()}},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],onClick:function(){document.querySelector("my-notepad").getAttribute("data-id")&&this.dispatchEvent(new CustomEvent("delete",{bubbles:!0}))}},{id:5,text:"페이지 설정(U)...",key:[],disable:$},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:$},{id:7,text:"끝내기(X)",key:[],disable:$}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:$},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:$},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:$},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:$},{id:12,text:"삭제(D)",key:["Del"],disable:$},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:$},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:$},{id:15,text:"다음 찾기(N)",key:["F3"],disable:$},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:$},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:$},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:$},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:$},{id:20,text:"시간/날짜(D)",key:["F5"],disable:$}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:$},{id:22,text:"글꼴(F)...",key:[],disable:$}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:$},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:$},{id:25,text:"상태 표시줄(S)",key:[],disable:$}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:$},{id:27,text:"피드백 보내기(F)",key:[],disable:$},{id:28,text:"메모장 정보(A)",key:[],disable:$}]}],B=L.reduce(((t,e)=>[...t,...e.slots]),[]),T=L;class D extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}static get observedAttributes(){return["title"]}attributeChangedCallback(t,e,i){"title"===t&&e&&(this.querySelector("#title").innerText=i)}injectHTML(){return i`
      <header>
        <span>
          <img alt="notepad_icon" src=${o} />
          <span id="title">${this.title}</span> - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${T.map((t=>i`
              <button class="edit_button">
                ${t.title}(<u>${t.key}</u>)
                <div class="popup">
                  ${t.slots.map((t=>i`
                        <div class="sub" data-id="${t.id}" data-disable="${!!t.disable}">
                          <div>${t.text}</div>
                          ${t.key.length>0?`<div>${t.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(t){const e=t.target.closest(".view_button"),i=t.target.closest(".edit_button"),s=t.target.closest(".sub");e?this.clickViewButton(e):i?this.clickEditButton(i,s):this.closePopup()}clickViewButton(t){switch(t.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":h.back()}}clickEditButton(t,e){if(e){const t=Number(e.dataset.id),{onClick:i}=B.find((e=>e.id===t))||{};i&&i.call(this)}else this.togglePopup(t)}togglePopup(t){const e=t.querySelector(".popup");e.classList.contains("show")?e.classList.remove("show"):(this.closePopup(),e.classList.add("show"))}closePopup(){const t=this.querySelector(".popup.show");t?.classList.remove("show")}get title(){return this.getAttribute("title")}}(async()=>{try{await e.openDB()}catch(t){queueMicrotask((()=>alert("IndexedDB를 사용할 수 없습니다.")))}customElements.define("my-app",n),customElements.define("my-footer",b),customElements.define("my-home",m),customElements.define("my-tetris",f),customElements.define("my-flappybird",x),customElements.define("my-icons",S),customElements.define("my-icon",C),customElements.define("my-notepad",E),customElements.define("my-notepad-header",D)})(),window.addEventListener("load",(()=>h.render())),window.addEventListener("popstate",(()=>h.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,