(()=>{"use strict";var t="/js-sandbox/";const e=new class{db;constructor(t,e,i){this.dbName=t,this.dbVersion=e,this.stores=i}async openDB(){return new Promise(((t,e)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,t()},i.onerror=t=>{e(t)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((t=>{this.db.objectStoreNames.contains(t)&&this.db.deleteObjectStore(t),this.db.createObjectStore(t,{keyPath:"id"})}))}}))}async getData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readonly").objectStore(t).get(e);n.onsuccess=()=>{i(n.result)},n.onerror=t=>{s(t)}}))}async getAllData(t){return new Promise(((e,i)=>{const s=this.db.transaction(t,"readonly").objectStore(t).getAll();s.onsuccess=()=>{e(s.result)},s.onerror=t=>{i(t)}}))}async upsertData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t),o={...e,id:e.id||(new Date).getTime()},a=n.put(o);a.onsuccess=()=>{i(a.result)},a.onerror=()=>{console.log(a.error),s(a.error)}}))}async deleteData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t).delete(e);n.onsuccess=()=>{i(!0)},n.onerror=t=>{s(t)}}))}}("sandboxDB",2,["notepad"]),i=(t,...e)=>String.raw(t,...e);class s extends HTMLElement{constructor(){super(),this.render=this.render.bind(this)}connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}bindMethods(...t){t.forEach((t=>{this[t]=this[t].bind(this)}))}}class n extends s{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const o=t+"2a583f97b153f7da7d41.png",a="/js-sandbox",r=[{path:"/",html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:t+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:t+"39b884119b49599495ed.png"},{path:"/notepad",html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:o},{path:"/notepad/:id",html:i`<my-notepad data-id=":id"></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null}],l=r.reduce(((t,e)=>{const{path:i,label:s,iconSrc:n}=e;return e.iconSrc?[...t,{path:i,label:s,iconSrc:n}]:t}),[]),c=async()=>[...(await e.getAllData("notepad")).reduce(((t,e)=>{const{id:i,title:s}=e;return[...t,{path:`/notepad/${i}`,label:s,iconSrc:o}]}),[])],d=r,h=new class{constructor(t){this.routes=t}pathToRegexp(t){return new RegExp(`^${t.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const t=window.location.pathname,e=this.routes.find((e=>this.pathToRegexp(this.getUrlFrom(e.path)).test(t)));e?document.querySelector("#page").innerHTML=e.html.replace(":id",this.getIdFromPath(t)):this.replaceTo("/")}getIdFromPath(t){return t.match(/\d+/)?.[0]}navigateTo(t){this.getUrlFrom(t)!==window.location.pathname&&(window.history.pushState(null,null,a+t),this.render())}replaceTo(t){window.history.replaceState(null,null,a+t),this.render()}getUrlFrom(t){return`${a}${t}`}back(){window.history.back(),this.render()}}(d),u=t+"59cb65e4f8f2627d6c2c.png",p=t+"bc8d31a2338dd0b3f68a.png";class m extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${u} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${p} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${l.map((t=>i` <my-icon data-path="${t.path}" data-iconSrc="${t.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}}class b extends s{}class y extends s{constructor(){super(),this.score=0,this.handleStart=this.handleStart.bind(this)}connectedCallback(){super.connectedCallback(),this.querySelector("#start-button").addEventListener("click",this.handleStart)}injectHTML(){return i`
      <my-tetris-playground id="1"></my-tetris-playground>
      <button id="start-button">게임 시작</button>
      <my-tetris-playground id="2"></my-tetris-playground>
    `}handleStart(){this.querySelectorAll("my-tetris-playground").forEach((t=>t.startGame()))}}class k extends s{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class v extends s{async connectedCallback(){this.icons=[...l,...await c()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange),this.addEventListener("iconDelete",this.handleIconDelete)}static get observedAttributes(){return["icons"]}attributeChangedCallback(t,e,i){e!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((t=>i`
            <my-icon data-path=${t.path} data-label=${t.label} data-iconSrc=${t.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(t){this.setAttribute("icons",JSON.stringify(t))}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");e.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((t=>{t!==e&&t.removeAttribute("checked")}))}handleDoubleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}handleKeyDown(t){const e=this.querySelectorAll("my-icon[checked]");if("Enter"===t.key){if(e.length>1)return;if(!e)return;h.navigateTo(e[0].dataset.path)}}handleIconChange(t){const{path:e,label:i,iconSrc:s}=t.detail,n=this.icons.findIndex((t=>t.path===e));if(-1===n)this.icons=[...this.icons,{path:e,label:i,iconSrc:s}];else{const t=[...this.icons];t[n]={path:e,label:i,iconSrc:s},this.icons=t}}handleIconDelete(t){const{path:e}=t.detail;this.icons=this.icons.filter((t=>t.path!==e))}}class g extends s{injectHTML(){const{label:t,iconsrc:e}=this.dataset;return i`
      <img alt="${t}_icon" src=${e} />
      ${t?`<span class="icon_name">${t}</span>`:""}
    `}}class w extends s{async connectedCallback(){this.data=await e.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave),this.addEventListener("delete",this.handleDelete)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave),this.removeEventListener("delete",this.handleDelete)}injectHTML(){const{title:t,content:e}=this.data;return i`
      <my-notepad-header title=${t}></my-notepad-header>
      <textarea>${e}</textarea>
    `}handleLocalSave(t){t.preventDefault();const e=this.getNotePadData();if(!e)return;const i=new Blob([e.content],{type:"text/plain"}),s=document.createElement("a");s.href=URL.createObjectURL(i),s.download=`${e.title}.txt`,s.click()}async handleSave(t){t.stopPropagation();const i=this.getNotePadData();if(i)try{const t=await e.upsertData("notepad",i),s=`/notepad/${t}`;alert("저장되었습니다.");const n=new CustomEvent("iconChange",{detail:{path:s,label:i.title,iconSrc:o}});document.querySelector("my-icons").dispatchEvent(n),this.id===t?this.title=i.title.replace(/&nbsp;/g," "):h.navigateTo(s)}catch(t){alert("저장에 실패했습니다.")}}async handleDelete(t){try{if(t.stopPropagation(),!window.confirm("정말 삭제하시겠습니까?"))return;await e.deleteData("notepad",this.id),alert("삭제되었습니다.");const i=new CustomEvent("iconDelete",{detail:{path:`/notepad/${this.id}`}});document.querySelector("my-icons").dispatchEvent(i),h.replaceTo("/notepad")}catch(t){alert("삭제에 실패했습니다.")}}getNotePadData(){const t=this.querySelector("textarea").value.trim();if(!t)return alert("내용이 없습니다."),null;let e;for(;!e;)if(!(e=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),e||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:e.trim().replace(/ /g,"&nbsp;"),content:t.replace(/ /g,"&nbsp;")}}get id(){return Number(this.getAttribute("data-id"))}set title(t){this.querySelector("my-notepad-header").setAttribute("title",t)}}const f=!0,S=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],onClick:function(){const t=document.querySelector("my-notepad");t.getAttribute("data-id")?h.navigateTo("/notepad"):t.render()}},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],onClick:function(){document.querySelector("my-notepad").getAttribute("data-id")&&this.dispatchEvent(new CustomEvent("delete",{bubbles:!0}))}},{id:5,text:"페이지 설정(U)...",key:[],disable:f},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:f},{id:7,text:"끝내기(X)",key:[],disable:f}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:f},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:f},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:f},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:f},{id:12,text:"삭제(D)",key:["Del"],disable:f},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:f},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:f},{id:15,text:"다음 찾기(N)",key:["F3"],disable:f},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:f},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:f},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:f},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:f},{id:20,text:"시간/날짜(D)",key:["F5"],disable:f}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:f},{id:22,text:"글꼴(F)...",key:[],disable:f}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:f},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:f},{id:25,text:"상태 표시줄(S)",key:[],disable:f}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:f},{id:27,text:"피드백 보내기(F)",key:[],disable:f},{id:28,text:"메모장 정보(A)",key:[],disable:f}]}],x=S.reduce(((t,e)=>[...t,...e.slots]),[]),C=S;class E extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}static get observedAttributes(){return["title"]}attributeChangedCallback(t,e,i){"title"===t&&e&&(this.querySelector("#title").innerText=i)}injectHTML(){return i`
      <header>
        <span>
          <img alt="notepad_icon" src=${o} />
          <span id="title">${this.title}</span> - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${C.map((t=>i`
              <button class="edit_button">
                ${t.title}(<u>${t.key}</u>)
                <div class="popup">
                  ${t.slots.map((t=>i`
                        <div class="sub" data-id="${t.id}" data-disable="${!!t.disable}">
                          <div>${t.text}</div>
                          ${t.key.length>0?`<div>${t.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(t){const e=t.target.closest(".view_button"),i=t.target.closest(".edit_button"),s=t.target.closest(".sub");e?this.clickViewButton(e):i?this.clickEditButton(i,s):this.closePopup()}clickViewButton(t){switch(t.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":h.back()}}clickEditButton(t,e){if(e){const t=Number(e.dataset.id),{onClick:i}=x.find((e=>e.id===t))||{};i&&i.call(this)}else this.togglePopup(t)}togglePopup(t){const e=t.querySelector(".popup");e.classList.contains("show")?e.classList.remove("show"):(this.closePopup(),e.classList.add("show"))}closePopup(){const t=this.querySelector(".popup.show");t?.classList.remove("show")}get title(){return this.getAttribute("title")}}const L={I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[2,0,0],[2,2,2],[0,0,0]],L:[[0,0,3],[3,3,3],[0,0,0]],O:[[4,4],[4,4]],S:[[0,5,5],[5,5,0],[0,0,0]],T:[[0,6,0],[6,6,6],[0,0,0]],Z:[[7,7,0],[0,7,7],[0,0,0]]},$={0:"empty",1:"I",2:"J",3:"L",4:"O",5:"S",6:"T",7:"Z",10:"I freeze",20:"J freeze",30:"L freeze",40:"O freeze",50:"S freeze",60:"T freeze",70:"Z freeze"},D={1:100,2:300,3:500,4:800},T=10,B=new Map([["1",new Map([["s","moveDown"],["a","moveLeft"],["d","moveRight"],["w","rotate"],["S","moveDown"],["A","moveLeft"],["D","moveRight"],["W","rotate"]])],["2",new Map([["ArrowDown","moveDown"],["ArrowLeft","moveLeft"],["ArrowRight","moveRight"],["ArrowUp","rotate"]])]]),j=t=>Object.values(t).sort((()=>Math.random()-.5)),A=(t,e)=>Array.from(Array(e),(()=>Array(t).fill(0))),F="freeze",M="createNewBlock";class H{static observers={[M]:[],[F]:[]};constructor(t,e=!0){this.$playground=t,this.$board=t.querySelector("my-tetris-board"),this.blockQueue=j(L),this.observers={[M]:[],[F]:[]},e&&this.createNewBlock()}subscribe(t,e){this.observers[t].push(e)}notify(t){this.observers[t].forEach((t=>t()))}unsubscribe(t,e){this.observers[t]=this.observers[t].filter((t=>t!==e))}getNextTetrominos(){return this.blockQueue.slice(0,5)}createNewBlock(){this.block=this.blockQueue.shift(),this.blockQueue.length<5&&(this.blockQueue=this.blockQueue.concat(j(L)));const t=((t,e)=>{const i=e.findIndex((t=>t.some((t=>0!==t))));return{x:Math.floor((10-e[0].length)/2),y:-i}})(0,this.block);this.x=t.x,this.y=t.y,this.notify(M)}rotate(){const t=this.block[0].map(((t,e)=>this.block.map((t=>t[e])).reverse())),e=t[0].length,i=t.length;let s=this.x,n=this.y;s+e>T&&(s=T-e),s<0&&(s=0),n+i>20&&(n=20-i),n<0&&(n=0),this.canMove(s,n,t)&&(this.block=t,this.x=s,this.y=n)}moveLeft(){this.canMove(this.x-1,this.y,this.block)&&(this.x-=1)}moveRight(){this.canMove(this.x+1,this.y,this.block)&&(this.x+=1)}moveDown(){this.canMove(this.x,this.y+1,this.block)?this.y+=1:0===this.y?(this.freeze(),this.$board.stopGame()):(this.freeze(),this.createNewBlock())}freeze(){const{block:t,x:e,y:i}=this;t.forEach(((t,s)=>{t.forEach(((t,n)=>{0!==t&&(this.$board.data[i+s][e+n]=10*t)}))})),this.notify(F)}canMove(t,e,i){for(let s=0;s<i.length;s+=1)for(let n=0;n<i[s].length;n+=1)if(0!==i[s][n]){const i=t+n,o=e+s;if(i<0||i>=T||o<0||o>=20||this.$board.data[o][i]>=10)return!1}return!0}clone(){const t=new H(this.$playground,!1);return t.block=this.block.map((t=>[...t])),t.x=this.x,t.y=this.y,t}}class N extends s{constructor(){super(),this.data=A(T,20),this.$playground=null,this.start=!1,this.tetromino=null,this.lastTime=null,this.dropInterval=1e3,this.tetrominoCounter=0,this.animationId=null,this.keyState=new Set,this.bindMethods("startGame","dropBlock","increaseDropSpeed","removeFullRows","keyupHandler","keydownHandler","handleKeys","render")}connectedCallback(){super.connectedCallback()}disconnectedCallback(){this.tetromino.unsubscribe(M,this.increaseDropSpeed),this.tetromino.unsubscribe(F,this.removeFullRows)}injectHTML(){return i`
      ${this.data.map((t=>i`
            <ul>
              ${t.map((t=>i`<li class="cell-${$[t]}"></li>`)).join("")}
            </ul>
          `)).join("")}
    `}increaseDropSpeed(){10===this.tetrominoCounter&&(this.tetrominoCounter=0,this.dropInterval*=.9),this.tetrominoCounter+=1}startGame(t,e){this.start||(this.data=A(T,20),this.tetromino=e,this.tetromino.subscribe(M,this.increaseDropSpeed),this.tetromino.subscribe(F,this.removeFullRows),this.start=!0,this.$playground=t,this.updateBoard(),document.addEventListener("keydown",this.keydownHandler),document.addEventListener("keyup",this.keyupHandler),this.lastTime=performance.now(),requestAnimationFrame(this.dropBlock))}stopGame(){this.start=!1,this.tetrominoCounter=0,this.dropInterval=1e3,document.removeEventListener("keydown",this.keydownHandler),document.removeEventListener("keyup",this.keyupHandler)}dropBlock(t){if(t-this.lastTime>this.dropInterval){const e=this.tetromino.clone();this.tetromino.moveDown(),this.updateBoard(e),this.lastTime=t}this.start?this.animationId=requestAnimationFrame(this.dropBlock):cancelAnimationFrame(this.animationId)}keydownHandler(t){this.keyState.add(t.key),this.handleKeys()}keyupHandler(t){this.keyState.delete(t.key)}handleKeys(){const t=this.tetromino.clone();B.get(this.$playground.id).forEach(((t,e)=>{this.keyState.has(e)&&this.tetromino[t]()})),requestAnimationFrame((()=>this.updateBoard(t)))}updateBoard(t=null){t&&this.removeOldBlock(t),this.putNewBlock(this.data),this.render()}removeOldBlock(t){const{block:e,x:i,y:s}=t;e.forEach(((t,e)=>{t.forEach(((t,n)=>{this.data[s+e]?.[i+n]===t&&(this.data[s+e][i+n]=0)}))}))}putNewBlock(){const{x:t,y:e,block:i}=this.tetromino;i.forEach(((i,s)=>{i.forEach(((i,n)=>{0!==i&&(this.data[e+s][t+n]=i)}))}))}removeFullRows(){console.log("removeFullRows");let t=0;this.data.forEach(((e,i)=>{e.every((t=>t>=10))&&(t+=1,this.data.splice(i,1),this.data.unshift(Array(T).fill(0)))})),t>0&&this.$playground.scoreUp(D[t])}}class P extends s{constructor(){super(),this.$playground=null,this.tetromino=null}connectedCallback(){super.connectedCallback()}disconnectedCallback(){this.tetromino.unsubscribe(M,this.render)}injectHTML(){return i`
      ${this.tetromino?.getNextTetrominos().map((t=>i`
            <div class="tetromino-preview">
              ${t.map((t=>i`
                    <ul class="tetromino-preview-row">
                      ${t.map((t=>i` <li class="cell-${$[t]}"></li> `)).join("")}
                    </ul>
                  `)).join("")}
            </div>
          `)).join("")||""}
    `}startGame(t,e){this.$playground=t,this.tetromino=e,this.tetromino.subscribe(M,this.render),this.render()}}class q extends s{constructor(){super(),this.score=0}connectedCallback(){super.connectedCallback()}injectHTML(){return i`
      <div class="container">
        <my-tetris-board class="board"></my-tetris-board>
        <my-tetris-preview class="tetromino-previews"></my-tetris-preview>
      </div>
      <span class="score">${this.score}</span>
    `}startGame(){this.tetromino=new H(this),this.querySelector("my-tetris-board").startGame(this,this.tetromino),this.querySelector("my-tetris-preview").startGame(this,this.tetromino)}scoreUp(t){this.score+=t,this.querySelector(".score").innerText=this.score}}(async()=>{try{await e.openDB()}catch(t){queueMicrotask((()=>alert("IndexedDB를 사용할 수 없습니다.")))}customElements.define("my-app",n),customElements.define("my-footer",m),customElements.define("my-home",b),customElements.define("my-tetris",y),customElements.define("my-tetris-playground",q),customElements.define("my-tetris-board",N),customElements.define("my-tetris-preview",P),customElements.define("my-flappybird",k),customElements.define("my-icons",v),customElements.define("my-icon",g),customElements.define("my-notepad",w),customElements.define("my-notepad-header",E)})(),window.addEventListener("load",(()=>h.render())),window.addEventListener("popstate",(()=>h.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDQSxJQUFJQSxFQ0RvQixlQ2dJeEIsTUFFQSxFQUZrQixJQWhJbEIsTUFDRUMsR0FRQUMsWUFBWUMsRUFBUUMsRUFBV0MsR0FDN0JDLEtBQUtILE9BQVNBLEVBQ2RHLEtBQUtGLFVBQVlBLEVBQ2pCRSxLQUFLRCxPQUFTQSxDQUNoQixDQU1BRSxlQUNFLE9BQU8sSUFBSUMsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVQyxPQUFPQyxVQUFVQyxLQUFLUixLQUFLSCxPQUFRRyxLQUFLRixXQUV4RE8sRUFBUUksVUFBWSxLQUNsQlQsS0FBS0wsR0FBS1UsRUFBUUssT0FDbEJQLEdBQVMsRUFHWEUsRUFBUU0sUUFBV0MsSUFDakJSLEVBQU9RLEVBQUUsRUFHWFAsRUFBUVEsZ0JBQWtCLEtBQ3hCYixLQUFLTCxHQUFLVSxFQUFRSyxPQUVsQlYsS0FBS0QsT0FBT2UsU0FBU0MsSUFDZmYsS0FBS0wsR0FBR3FCLGlCQUFpQkMsU0FBU0YsSUFDcENmLEtBQUtMLEdBQUd1QixrQkFBa0JILEdBRTVCZixLQUFLTCxHQUFHd0Isa0JBQWtCSixFQUFPLENBQUVLLFFBQVMsTUFBTyxHQUNuRCxDQUNILEdBRUwsQ0FRQW5CLGNBQWNvQixFQUFXQyxHQUN2QixPQUFPLElBQUlwQixTQUFRLENBQUNDLEVBQVNDLEtBQzNCLE1BQU1DLEVBQVVMLEtBQUtMLEdBQUc0QixZQUFZRixFQUFXLFlBQVlHLFlBQVlILEdBQVdJLElBQUlILEdBRXRGakIsRUFBUUksVUFBWSxLQUNsQk4sRUFBUUUsRUFBUUssT0FBTyxFQUd6QkwsRUFBUU0sUUFBV0MsSUFDakJSLEVBQU9RLEVBQUUsQ0FDVixHQUVMLENBT0FYLGlCQUFpQm9CLEdBQ2YsT0FBTyxJQUFJbkIsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVTCxLQUFLTCxHQUFHNEIsWUFBWUYsRUFBVyxZQUFZRyxZQUFZSCxHQUFXSyxTQUVsRnJCLEVBQVFJLFVBQVksS0FDbEJOLEVBQVFFLEVBQVFLLE9BQU8sRUFHekJMLEVBQVFNLFFBQVdDLElBQ2pCUixFQUFPUSxFQUFFLENBQ1YsR0FFTCxDQVFBWCxpQkFBaUJvQixFQUFXTSxHQUMxQixPQUFPLElBQUl6QixTQUFRLENBQUNDLEVBQVNDLEtBQzNCLE1BQU1vQixFQUFjeEIsS0FBS0wsR0FBRzRCLFlBQVlGLEVBQVcsYUFBYUcsWUFBWUgsR0FDdEVPLEVBQWUsSUFBS0QsRUFBTUwsR0FBSUssRUFBS0wsS0FBTSxJQUFJTyxNQUFPQyxXQUNwRHpCLEVBQVVtQixFQUFZTyxJQUFJSCxHQUVoQ3ZCLEVBQVFJLFVBQVksS0FDbEJOLEVBQVFFLEVBQVFLLE9BQU8sRUFHekJMLEVBQVFNLFFBQVUsS0FDaEJxQixRQUFRQyxJQUFJNUIsRUFBUTZCLE9BQ3BCOUIsRUFBT0MsRUFBUTZCLE1BQU0sQ0FDdEIsR0FFTCxDQVFBakMsaUJBQWlCb0IsRUFBV0MsR0FDMUIsT0FBTyxJQUFJcEIsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVTCxLQUFLTCxHQUFHNEIsWUFBWUYsRUFBVyxhQUFhRyxZQUFZSCxHQUFXYyxPQUFPYixHQUUxRmpCLEVBQVFJLFVBQVksS0FDbEJOLEdBQVEsRUFBSyxFQUdmRSxFQUFRTSxRQUFXQyxJQUNqQlIsRUFBT1EsRUFBRSxDQUNWLEdBRUwsR0FHOEIsWUFBYSxFQUFHLENBQUMsWUNoSTNDd0IsRUFBWSxDQUFDQyxLQUFXQyxJQUNyQkMsT0FBT0MsSUFBSUgsS0FBV0MsR0NEaEIsTUFBTUcsVUFBcUJDLFlBQ3hDOUMsY0FDRStDLFFBQ0EzQyxLQUFLNEMsT0FBUzVDLEtBQUs0QyxPQUFPQyxLQUFLN0MsS0FDakMsQ0FFQThDLG9CQUNFOUMsS0FBSzRDLFFBQ1AsQ0FFQUEsU0FDRTVDLEtBQUsrQyxVQUFZL0MsS0FBS2dELFlBQ3hCLENBRUFBLGFBQ0UsTUFBTyxFQUNULENBRUFDLGVBQWVDLEdBQ2JBLEVBQVFwQyxTQUFTcUMsSUFDZm5ELEtBQUttRCxHQUFVbkQsS0FBS21ELEdBQVFOLEtBQUs3QyxLQUFLLEdBRTFDLEVDbkJhLE1BQU1vRCxVQUFZWCxFQUMvQk8sYUFDRSxPQUFPLENBQUk7Ozs7S0FLYixFLHFDQ0pJSyxFQUF5RCxjQUV6REMsRUFBUyxDQUNiLENBQ0VDLEtBQU0sSUFDTkMsS0FBTSxDQUFJLHNCQUNWQyxNQUFPLE9BQ1BDLFFBQVMsTUFFWCxDQUNFSCxLQUFNLFVBQ05DLEtBQU0sQ0FBSSwwQkFDVkMsTUFBTyxTQUNQQyxRLDhCQUVGLENBQ0VILEtBQU0sY0FDTkMsS0FBTSxDQUFJLGtDQUNWQyxNQUFPLG1CQUNQQyxRLDhCQUVGLENBQ0VILEtBQU0sV0FDTkMsS0FBTSxDQUFJLDRCQUNWQyxNQUFPLGdCQUNQQyxRQUFTLEdBRVgsQ0FDRUgsS0FBTSxlQUNOQyxLQUFNLENBQUksMENBQ1ZDLE1BQU8sZ0JBQ1BDLFFBQVMsT0FJUEMsRUFBWUwsRUFBT00sUUFBTyxDQUFDQyxFQUFNQyxLQUNyQyxNQUFNLEtBQUVQLEVBQUksTUFBRUUsRUFBSyxRQUFFQyxHQUFZSSxFQUNqQyxPQUFLQSxFQUFPSixRQUNMLElBQUlHLEVBQU0sQ0FBRU4sT0FBTUUsUUFBT0MsWUFESkcsQ0FDYyxHQUN6QyxJQUVHRSxFQUFnQjlELFNBT2IsV0FObUIsYUFBcUIsWUFDZDJELFFBQU8sQ0FBQ0MsRUFBTUcsS0FDN0MsTUFBTSxHQUFFMUMsRUFBRSxNQUFFMkMsR0FBVUQsRUFDdEIsTUFBTyxJQUFJSCxFQUFNLENBQUVOLEtBQU0sWUFBWWpDLElBQU1tQyxNQUFPUSxFQUFPUCxRQUFTLEdBQVUsR0FDM0UsS0FLTCxJQ0xBLEVBRmUsSUFoRGYsTUFDRTlELFlBQVlzRSxHQUNWbEUsS0FBS3NELE9BQVNZLENBQ2hCLENBRUFDLGFBQWFaLEdBQ1gsT0FBTyxJQUFJYSxPQUFPLElBQUliLEVBQUtjLFFBQVEsTUFBTyxPQUFPQSxRQUFRLFFBQVMsV0FDcEUsQ0FFQXpCLFNBQ0UsTUFBTTBCLEVBQWNoRSxPQUFPaUUsU0FBU0MsU0FDOUJOLEVBQVFsRSxLQUFLc0QsT0FBT21CLE1BQU1DLEdBQ3ZCMUUsS0FBS21FLGFBQWFuRSxLQUFLMkUsV0FBV0QsRUFBTW5CLE9BQU9xQixLQUFLTixLQUd4REosRUFLTFcsU0FBU0MsY0FBYyxTQUFTL0IsVUFBWW1CLEVBQU1WLEtBQUthLFFBQVEsTUFBT3JFLEtBQUsrRSxjQUFjVCxJQUp2RnRFLEtBQUtnRixVQUFVLElBS25CLENBRUFELGNBQWN4QixHQUNaLE9BQU9BLEVBQUswQixNQUFNLFNBQVMsRUFDN0IsQ0FFQUMsV0FBV0MsR0FDTG5GLEtBQUsyRSxXQUFXUSxLQUFTN0UsT0FBT2lFLFNBQVNDLFdBQzdDbEUsT0FBTzhFLFFBQVFDLFVBQVUsS0FBTSxLQUFNaEMsRUFBVzhCLEdBQ2hEbkYsS0FBSzRDLFNBQ1AsQ0FFQW9DLFVBQVVHLEdBQ1I3RSxPQUFPOEUsUUFBUUUsYUFBYSxLQUFNLEtBQU1qQyxFQUFXOEIsR0FDbkRuRixLQUFLNEMsUUFDUCxDQUVBK0IsV0FBV1EsR0FDVCxNQUFPLEdBQUc5QixJQUFXOEIsR0FDdkIsQ0FFQUksT0FDRWpGLE9BQU84RSxRQUFRRyxPQUNmdkYsS0FBSzRDLFFBQ1AsR0FHd0IsRyw4REMzQ1gsTUFBTTRDLFVBQWUvQyxFQUNsQ0ssb0JBQ0VILE1BQU1HLG9CQUNOOUMsS0FBS3lGLGlCQUFpQixRQUFTekYsS0FBSzBGLFlBQVk3QyxLQUFLN0MsTUFDdkQsQ0FFQWdELGFBQ0UsT0FBTyxDQUFJO21DQUNvQjs7Z0NBRUg7O1FBRXhCVyxFQUFBLEtBQ01LLEdBQ0csQ0FBSSx3QkFBd0JBLEVBQUtULHVCQUF1QlMsRUFBS04seUJBRXJFaUMsS0FBSztLQUVaLENBRUFELFlBQVk5RSxHQUNWLElBQUtBLEVBQUVnRixPQUFPQyxRQUFRLFdBQVksT0FFbEMsTUFBTTdCLEVBQU9wRCxFQUFFZ0YsT0FBT0MsUUFBUSxXQUM5QixhQUFrQjdCLEVBQUs4QixRQUFRdkMsS0FDakMsRUM5QmEsTUFBTXdDLFVBQWF0RCxHQ0VuQixNQUFNdUQsVUFBZXZELEVBQ2xDN0MsY0FDRStDLFFBQ0EzQyxLQUFLaUcsTUFBUSxFQUNiakcsS0FBS2tHLFlBQWNsRyxLQUFLa0csWUFBWXJELEtBQUs3QyxLQUMzQyxDQUVBOEMsb0JBQ0VILE1BQU1HLG9CQUNOOUMsS0FBSzhFLGNBQWMsaUJBQWlCVyxpQkFBaUIsUUFBU3pGLEtBQUtrRyxZQUNyRSxDQUVBbEQsYUFDRSxPQUFPLENBQUk7Ozs7S0FLYixDQUVBa0QsY0FDRWxHLEtBQUttRyxpQkFBaUIsd0JBQXdCckYsU0FBU3NGLEdBQVNBLEVBQUtDLGFBQ3ZFLEVDdkJhLE1BQU1DLFVBQW1CN0QsRUFDdENPLGFBQ0UsT0FBTyxDQUFJOzs7Ozs7OztLQVNiLEVDVGEsTUFBTXVELFVBQWM5RCxFQUNqQ3hDLDBCQUNFRCxLQUFLd0csTUFBUSxJQUFJN0MsV0FBcUJJLEtBQ3RDcEIsTUFBTUcsb0JBQ045QyxLQUFLeUYsaUJBQWlCLFFBQVN6RixLQUFLMEYsYUFDcEMxRixLQUFLeUYsaUJBQWlCLFdBQVl6RixLQUFLeUcsbUJBQ3ZDekcsS0FBS3lGLGlCQUFpQixVQUFXekYsS0FBSzBHLGVBQ3RDMUcsS0FBS3lGLGlCQUFpQixhQUFjekYsS0FBSzJHLGtCQUN6QzNHLEtBQUt5RixpQkFBaUIsYUFBY3pGLEtBQUs0RyxpQkFDM0MsQ0FFV0MsZ0NBQ1QsTUFBTyxDQUFDLFFBQ1YsQ0FFQUMseUJBQXlCQyxFQUFNQyxFQUFVQyxHQUNuQ0QsSUFBYUMsR0FDakJqSCxLQUFLNEMsUUFDUCxDQUVBSSxhQUNFLE9BQU8sQ0FBSTtRQUNQaEQsS0FBS3dHLE1BQ0pVLEtBQUtsRCxHQUNHLENBQUk7aUNBQ1lBLEVBQUtULG1CQUFtQlMsRUFBS1Asc0JBQXNCTyxFQUFLTjtjQUdoRmlDLEtBQUs7S0FFWixDQUVJYSxZQUNGLE9BQU9XLEtBQUtDLE1BQU1wSCxLQUFLcUgsYUFBYSxTQUN0QyxDQUVJYixVQUFNOUIsR0FDUjFFLEtBQUtzSCxhQUFhLFFBQVNILEtBQUtJLFVBQVU3QyxHQUM1QyxDQUVBZ0IsWUFBWTlFLEdBQ1YsSUFBS0EsRUFBRWdGLE9BQU9DLFFBQVEsV0FBWSxPQUVsQyxNQUFNN0IsRUFBT3BELEVBQUVnRixPQUFPQyxRQUFRLFdBQzlCN0IsRUFBS3dELGdCQUFnQixXQUNyQnhILEtBQUttRyxpQkFBaUIsV0FBV3JGLFNBQVNzRixJQUNwQ0EsSUFBU3BDLEdBQ1hvQyxFQUFLcUIsZ0JBQWdCLFVBQ3ZCLEdBRUosQ0FFQWhCLGtCQUFrQjdGLEdBQ2hCLElBQUtBLEVBQUVnRixPQUFPQyxRQUFRLFdBQVksT0FFbEMsTUFBTTdCLEVBQU9wRCxFQUFFZ0YsT0FBT0MsUUFBUSxXQUM5QixhQUFrQjdCLEVBQUs4QixRQUFRdkMsS0FDakMsQ0FFQW1ELGNBQWM5RixHQUNaLE1BQU04RyxFQUFZMUgsS0FBS21HLGlCQUFpQixvQkFDeEMsR0FBYyxVQUFWdkYsRUFBRStHLElBQWlCLENBQ3JCLEdBQUlELEVBQVVFLE9BQVMsRUFBRyxPQUMxQixJQUFLRixFQUFXLE9BQ2hCLGFBQWtCQSxFQUFVLEdBQUc1QixRQUFRdkMsS0FDekMsQ0FDRixDQUVBb0QsaUJBQWlCL0YsR0FDZixNQUFNLEtBQUUyQyxFQUFJLE1BQUVFLEVBQUssUUFBRUMsR0FBWTlDLEVBQUVpSCxPQUM3QkMsRUFBZ0I5SCxLQUFLd0csTUFBTXVCLFdBQVcvRCxHQUFTQSxFQUFLVCxPQUFTQSxJQUVuRSxJQUF1QixJQUFuQnVFLEVBQ0Y5SCxLQUFLd0csTUFBUSxJQUFJeEcsS0FBS3dHLE1BQU8sQ0FBRWpELE9BQU1FLFFBQU9DLGdCQUN2QyxDQUNMLE1BQU1zRSxFQUFXLElBQUloSSxLQUFLd0csT0FDMUJ3QixFQUFTRixHQUFpQixDQUFFdkUsT0FBTUUsUUFBT0MsV0FDekMxRCxLQUFLd0csTUFBUXdCLENBQ2YsQ0FDRixDQUVBcEIsaUJBQWlCaEcsR0FDZixNQUFNLEtBQUUyQyxHQUFTM0MsRUFBRWlILE9BQ25CN0gsS0FBS3dHLE1BQVF4RyxLQUFLd0csTUFBTXlCLFFBQVFqRSxHQUFTQSxFQUFLVCxPQUFTQSxHQUN6RCxFQ3RGYSxNQUFNMkUsVUFBYXpGLEVBQ2hDTyxhQUNFLE1BQU0sTUFBRVMsRUFBSyxRQUFFMEUsR0FBWW5JLEtBQUs4RixRQUNoQyxPQUFPLENBQUk7a0JBQ0dyQyxlQUFtQjBFO1FBQzdCMUUsRUFBUSwyQkFBMkJBLFdBQWlCO0tBRTFELEVDSGEsTUFBTTJFLFVBQWdCM0YsRUFDbkN4QywwQkFDRUQsS0FBSzJCLFdBQWMsVUFBa0IsVUFBVzNCLEtBQUtzQixLQUFRLENBQzNEMkMsTUFBTyxPQUNQb0UsUUFBUyxJQUVYMUYsTUFBTUcsb0JBQ045QyxLQUFLeUYsaUJBQWlCLE9BQVF6RixLQUFLc0ksWUFDbkN0SSxLQUFLeUYsaUJBQWlCLFlBQWF6RixLQUFLdUksaUJBQ3hDdkksS0FBS3lGLGlCQUFpQixTQUFVekYsS0FBS3dJLGFBQ3ZDLENBRUFDLHVCQUNFekksS0FBSzBJLG9CQUFvQixPQUFRMUksS0FBS3NJLFlBQ3RDdEksS0FBSzBJLG9CQUFvQixZQUFhMUksS0FBS3VJLGlCQUMzQ3ZJLEtBQUswSSxvQkFBb0IsU0FBVTFJLEtBQUt3SSxhQUMxQyxDQUVBeEYsYUFDRSxNQUFNLE1BQUVpQixFQUFLLFFBQUVvRSxHQUFZckksS0FBSzJCLEtBQ2hDLE9BQU8sQ0FBSTtpQ0FDa0JzQztrQkFDZm9FO0tBRWhCLENBRUFFLGdCQUFnQjNILEdBQ2RBLEVBQUUrSCxpQkFDRixNQUFNQyxFQUFjNUksS0FBSzZJLGlCQUN6QixJQUFLRCxFQUFhLE9BQ2xCLE1BQU1FLEVBQU8sSUFBSUMsS0FBSyxDQUFDSCxFQUFZUCxTQUFVLENBQUVXLEtBQU0sZUFDL0NDLEVBQU9wRSxTQUFTcUUsY0FBYyxLQUNwQ0QsRUFBS0UsS0FBT0MsSUFBSUMsZ0JBQWdCUCxHQUNoQ0csRUFBS0ssU0FBVyxHQUFHVixFQUFZM0UsWUFDL0JnRixFQUFLTSxPQUNQLENBRUF0SixpQkFBaUJXLEdBQ2ZBLEVBQUU0SSxrQkFDRixNQUFNWixFQUFjNUksS0FBSzZJLGlCQUN6QixHQUFLRCxFQUVMLElBQ0UsTUFBTWxJLFFBQWUsYUFBcUIsVUFBV2tJLEdBRS9DckYsRUFBTyxZQUFZN0MsSUFFekIrSSxNQUFNLFlBQ04sTUFBTUMsRUFBa0IsSUFBSUMsWUFBWSxhQUFjLENBQ3BEOUIsT0FBUSxDQUNOdEUsT0FDQUUsTUFBT21GLEVBQVkzRSxNQUNuQlAsUUFBUyxLQUdibUIsU0FBU0MsY0FBYyxZQUFZOEUsY0FBY0YsR0FFN0MxSixLQUFLc0IsS0FBT1osRUFDZFYsS0FBS2lFLE1BQVEyRSxFQUFZM0UsTUFBTUksUUFBUSxVQUFXLEtBRWxELGFBQWtCZCxFQUV0QixDQUFFLE1BQU9zRyxHQUNQSixNQUFNLGNBQ1IsQ0FDRixDQUVBeEosbUJBQW1CVyxHQUNqQixJQUdFLEdBRkFBLEVBQUU0SSxtQkFDb0JsSixPQUFPd0osUUFBUSxnQkFDakIsYUFFZCxhQUFxQixVQUFXOUosS0FBS3NCLElBRTNDbUksTUFBTSxZQUNOLE1BQU1NLEVBQWtCLElBQUlKLFlBQVksYUFBYyxDQUNwRDlCLE9BQVEsQ0FDTnRFLEtBQU0sWUFBWXZELEtBQUtzQixRQUczQnVELFNBQVNDLGNBQWMsWUFBWThFLGNBQWNHLEdBQ2pELFlBQWlCLFdBQ25CLENBQUUsTUFBT0YsR0FDUEosTUFBTSxjQUNSLENBQ0YsQ0FFQVosaUJBQ0UsTUFDTVIsRUFEWXJJLEtBQUs4RSxjQUFjLFlBQ1hKLE1BQU1zRixPQUNoQyxJQUFLM0IsRUFFSCxPQURBb0IsTUFBTSxhQUNDLEtBR1QsSUFBSXhGLEVBQ0osTUFBUUEsR0FFTixLQURBQSxFQUFRZ0csT0FBTyxjQUFlakssS0FBSzJCLEtBQUtzQyxNQUFNSSxRQUFRLFVBQVcsTUFDNURKLEdBQ21CM0QsT0FBT3dKLFFBQVEsZUFDakIsT0FBTyxLQUkvQixNQUFPLENBQ0x4SSxHQUFJdEIsS0FBS3NCLEdBQ1QyQyxNQUFPQSxFQUFNK0YsT0FBTzNGLFFBQVEsS0FBTSxVQUNsQ2dFLFFBQVNBLEVBQVFoRSxRQUFRLEtBQU0sVUFFbkMsQ0FFSS9DLFNBQ0YsT0FBTzRJLE9BQU9sSyxLQUFLcUgsYUFBYSxXQUNsQyxDQUVJcEQsVUFBTUEsR0FDUmpFLEtBQUs4RSxjQUFjLHFCQUFxQndDLGFBQWEsUUFBU3JELEVBQ2hFLEVDM0hGLE1BQU1rRyxHQUFVLEVBRVZDLEVBQVUsQ0FDZCxDQUNFOUksR0FBSSxPQUNKMkMsTUFBTyxLQUNQMEQsSUFBSyxJQUNMMEMsTUFBTyxDQUNMLENBQUUvSSxHQUFJLEVBQUdnSixLQUFNLFlBQWEzQyxJQUFLLENBQUMsT0FBUSxLQUFNNEMsUUFpRnRELFdBQ0UsTUFBTUMsRUFBVTNGLFNBQVNDLGNBQWMsY0FDbEMwRixFQUFRbkQsYUFBYSxXQUkxQixhQUFrQixZQUhoQm1ELEVBQVE1SCxRQUlaLEdBdkZNLENBQUV0QixHQUFJLEVBQUdnSixLQUFNLGVBQWdCM0MsSUFBSyxDQUFDLE9BQVEsUUFBUyxLQUFNNEMsUUFzRWxFLFdBQ0V2SyxLQUFLNEosY0FBYyxJQUFJRCxZQUFZLFlBQWEsQ0FBRWMsU0FBUyxJQUM3RCxHQXZFTSxDQUFFbkosR0FBSSxFQUFHZ0osS0FBTSxRQUFTM0MsSUFBSyxDQUFDLE9BQVEsS0FBTTRDLFFBaUVsRCxXQUNFdkssS0FBSzRKLGNBQWMsSUFBSUQsWUFBWSxPQUFRLENBQUVjLFNBQVMsSUFDeEQsR0FsRU0sQ0FBRW5KLEdBQUksRUFBR2dKLEtBQU0sUUFBUzNDLElBQUssQ0FBQyxPQUFRLFFBQVMsS0FBTTRDLFFBd0UzRCxXQUNrQjFGLFNBQVNDLGNBQWMsY0FDMUJ1QyxhQUFhLFlBQzFCckgsS0FBSzRKLGNBQWMsSUFBSUQsWUFBWSxTQUFVLENBQUVjLFNBQVMsSUFDMUQsR0EzRU0sQ0FBRW5KLEdBQUksRUFBR2dKLEtBQU0sZUFBZ0IzQyxJQUFLLEdBQUl3QyxXQUN4QyxDQUFFN0ksR0FBSSxFQUFHZ0osS0FBTSxXQUFZM0MsSUFBSyxDQUFDLE9BQVEsS0FBTXdDLFdBQy9DLENBQUU3SSxHQUFJLEVBQUdnSixLQUFNLFNBQVUzQyxJQUFLLEdBQUl3QyxhQUd0QyxDQUNFN0ksR0FBSSxPQUNKMkMsTUFBTyxLQUNQMEQsSUFBSyxJQUNMMEMsTUFBTyxDQUNMLENBQUUvSSxHQUFJLEVBQUdnSixLQUFNLFdBQVkzQyxJQUFLLENBQUMsT0FBUSxLQUFNd0MsV0FDL0MsQ0FBRTdJLEdBQUksRUFBR2dKLEtBQU0sVUFBVzNDLElBQUssQ0FBQyxPQUFRLEtBQU13QyxXQUM5QyxDQUFFN0ksR0FBSSxHQUFJZ0osS0FBTSxRQUFTM0MsSUFBSyxDQUFDLE9BQVEsS0FBTXdDLFdBQzdDLENBQUU3SSxHQUFJLEdBQUlnSixLQUFNLFVBQVczQyxJQUFLLENBQUMsT0FBUSxLQUFNd0MsV0FDL0MsQ0FBRTdJLEdBQUksR0FBSWdKLEtBQU0sUUFBUzNDLElBQUssQ0FBQyxPQUFRd0MsV0FDdkMsQ0FBRTdJLEdBQUksR0FBSWdKLEtBQU0sa0JBQW1CM0MsSUFBSyxDQUFDLE9BQVEsS0FBTXdDLFdBQ3ZELENBQUU3SSxHQUFJLEdBQUlnSixLQUFNLFdBQVkzQyxJQUFLLENBQUMsT0FBUSxLQUFNd0MsV0FDaEQsQ0FBRTdJLEdBQUksR0FBSWdKLEtBQU0sV0FBWTNDLElBQUssQ0FBQyxNQUFPd0MsV0FDekMsQ0FBRTdJLEdBQUksR0FBSWdKLEtBQU0sV0FBWTNDLElBQUssQ0FBQyxRQUFTLE1BQU93QyxXQUNsRCxDQUFFN0ksR0FBSSxHQUFJZ0osS0FBTSxZQUFhM0MsSUFBSyxDQUFDLE9BQVEsS0FBTXdDLFdBQ2pELENBQUU3SSxHQUFJLEdBQUlnSixLQUFNLFdBQVkzQyxJQUFLLENBQUMsT0FBUSxLQUFNd0MsV0FDaEQsQ0FBRTdJLEdBQUksR0FBSWdKLEtBQU0sV0FBWTNDLElBQUssQ0FBQyxPQUFRLEtBQU13QyxXQUNoRCxDQUFFN0ksR0FBSSxHQUFJZ0osS0FBTSxXQUFZM0MsSUFBSyxDQUFDLE1BQU93QyxhQUc3QyxDQUNFN0ksR0FBSSxTQUNKMkMsTUFBTyxLQUNQMEQsSUFBSyxJQUNMMEMsTUFBTyxDQUNMLENBQUUvSSxHQUFJLEdBQUlnSixLQUFNLGFBQWMzQyxJQUFLLEdBQUl3QyxXQUN2QyxDQUFFN0ksR0FBSSxHQUFJZ0osS0FBTSxXQUFZM0MsSUFBSyxHQUFJd0MsYUFHekMsQ0FDRTdJLEdBQUksT0FDSjJDLE1BQU8sS0FDUDBELElBQUssSUFDTDBDLE1BQU8sQ0FDTCxDQUFFL0ksR0FBSSxHQUFJZ0osS0FBTSxVQUFXM0MsSUFBSyxDQUFDLE9BQVEsS0FBTXdDLFdBQy9DLENBQUU3SSxHQUFJLEdBQUlnSixLQUFNLFVBQVczQyxJQUFLLENBQUMsT0FBUSxLQUFNd0MsV0FDL0MsQ0FBRTdJLEdBQUksR0FBSWdKLEtBQU0sWUFBYTNDLElBQUssR0FBSXdDLGFBRzFDLENBQ0U3SSxHQUFJLE9BQ0oyQyxNQUFPLE1BQ1AwRCxJQUFLLElBQ0wwQyxNQUFPLENBQ0wsQ0FBRS9JLEdBQUksR0FBSWdKLEtBQU0sWUFBYTNDLElBQUssR0FBSXdDLFdBQ3RDLENBQUU3SSxHQUFJLEdBQUlnSixLQUFNLGFBQWMzQyxJQUFLLEdBQUl3QyxXQUN2QyxDQUFFN0ksR0FBSSxHQUFJZ0osS0FBTSxZQUFhM0MsSUFBSyxHQUFJd0MsY0FLdENFLEVBQVFELEVBQVF4RyxRQUFPLENBQUM4RyxFQUFLQyxJQUMxQixJQUFJRCxLQUFRQyxFQUFJTixRQUN0QixJQUVILElDcEVlLE1BQU1PLFVBQXNCbkksRUFDekNLLG9CQUNFSCxNQUFNRyxvQkFDTjlDLEtBQUt5RixpQkFBaUIsUUFBU3pGLEtBQUswRixZQUN0QyxDQUVBK0MsdUJBQ0V6SSxLQUFLMEksb0JBQW9CLFFBQVMxSSxLQUFLMEYsWUFDekMsQ0FFV21CLGdDQUNULE1BQU8sQ0FBQyxRQUNWLENBRUFDLHlCQUF5QkMsRUFBTUMsRUFBVUMsR0FDMUIsVUFBVEYsR0FBb0JDLElBQ3RCaEgsS0FBSzhFLGNBQWMsVUFBVStGLFVBQVk1RCxFQUU3QyxDQUVBakUsYUFDRSxPQUFPLENBQUk7Ozt3Q0FHeUI7NkJBQ1hoRCxLQUFLaUU7Ozs7Ozs7OztVQVN4QixPQUVHNkcsR0FBVyxDQUFJOztrQkFFVkEsRUFBTzdHLFlBQVk2RyxFQUFPbkQ7O29CQUV4Qm1ELEVBQU9ULE1BQ05uRCxLQUNFNkQsR0FBUyxDQUFJO29EQUNnQkEsRUFBS3pKLHVCQUF1QnlKLEVBQUtaO2lDQUNwRFksRUFBS1Q7NEJBQ1ZTLEVBQUtwRCxJQUFJQyxPQUFTLEVBQUksUUFBUW1ELEVBQUtwRCxJQUFJaEMsS0FBSyxlQUFpQjs7MEJBSXBFQSxLQUFLOzs7Z0JBS2ZBLEtBQUs7O0tBR2QsQ0FFQUQsWUFBWTlFLEdBQ1YsTUFBTW9LLEVBQWFwSyxFQUFFZ0YsT0FBT0MsUUFBUSxnQkFDOUJvRixFQUFhckssRUFBRWdGLE9BQU9DLFFBQVEsZ0JBQzlCcUYsRUFBTXRLLEVBQUVnRixPQUFPQyxRQUFRLFFBRXpCbUYsRUFDRmhMLEtBQUttTCxnQkFBZ0JILEdBQ1pDLEVBQ1RqTCxLQUFLb0wsZ0JBQWdCSCxFQUFZQyxHQUVqQ2xMLEtBQUtxTCxZQUVULENBRUFGLGdCQUFnQkgsR0FDZCxPQUFRQSxFQUFXMUosSUFDakIsSUFBSyxPQUNIdEIsS0FBS3NMLGNBQWNDLFVBQVVDLE9BQU8sY0FDcEMsTUFDRixJQUFLLE9BQ0wsSUFBSyxRQUNILFNBS04sQ0FFQUosZ0JBQWdCSCxFQUFZQyxHQUMxQixHQUFJQSxFQUFLLENBQ1AsTUFBTU8sRUFBU3ZCLE9BQU9nQixFQUFJcEYsUUFBUXhFLEtBQzVCLFFBQUVpSixHQUFZRixFQUFNNUYsTUFBTXNHLEdBQVNBLEVBQUt6SixLQUFPbUssS0FBVyxDQUFDLEVBQzdEbEIsR0FDRkEsRUFBUW1CLEtBQUsxTCxLQUVqQixNQUNFQSxLQUFLMkwsWUFBWVYsRUFFckIsQ0FFQVUsWUFBWVYsR0FDVixNQUFNVyxFQUFRWCxFQUFXbkcsY0FBYyxVQUNuQzhHLEVBQU1MLFVBQVV0SyxTQUFTLFFBQzNCMkssRUFBTUwsVUFBVU0sT0FBTyxTQUV2QjdMLEtBQUtxTCxhQUNMTyxFQUFNTCxVQUFVTyxJQUFJLFFBRXhCLENBRUFULGFBQ0UsTUFBTU8sRUFBUTVMLEtBQUs4RSxjQUFjLGVBQ2pDOEcsR0FBT0wsVUFBVU0sT0FBTyxPQUMxQixDQUVJNUgsWUFDRixPQUFPakUsS0FBS3FILGFBQWEsUUFDM0IsRUMxSEYsTUFBTTBFLEVBQVMsQ0FDYkMsRUFBRyxDQUNELENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDVixDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQ1YsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNWLENBQUMsRUFBRyxFQUFHLEVBQUcsSUFFWkMsRUFBRyxDQUNELENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxJQUVUQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLElBRVRDLEVBQUcsQ0FDRCxDQUFDLEVBQUcsR0FDSixDQUFDLEVBQUcsSUFFTkMsRUFBRyxDQUNELENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxJQUVUQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLElBRVRDLEVBQUcsQ0FDRCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsS0FJTEMsRUFBZ0IsQ0FDcEIsRUFBRyxRQUNILEVBQUcsSUFDSCxFQUFHLElBQ0gsRUFBRyxJQUNILEVBQUcsSUFDSCxFQUFHLElBQ0gsRUFBRyxJQUNILEVBQUcsSUFDSCxHQUFJLFdBQ0osR0FBSSxXQUNKLEdBQUksV0FDSixHQUFJLFdBQ0osR0FBSSxXQUNKLEdBQUksV0FDSixHQUFJLFlBR0FDLEVBQVMsQ0FDYixFQUFHLElBQ0gsRUFBRyxJQUNILEVBQUcsSUFDSCxFQUFHLEtBR0NDLEVBQWMsR0FHZEMsRUFBYyxJQUFJQyxJQUFJLENBQzFCLENBQ0UsSUFDQSxJQUFJQSxJQUFJLENBQ04sQ0FBQyxJQUFLLFlBQ04sQ0FBQyxJQUFLLFlBQ04sQ0FBQyxJQUFLLGFBQ04sQ0FBQyxJQUFLLFVBQ04sQ0FBQyxJQUFLLFlBQ04sQ0FBQyxJQUFLLFlBQ04sQ0FBQyxJQUFLLGFBQ04sQ0FBQyxJQUFLLGFBR1YsQ0FDRSxJQUNBLElBQUlBLElBQUksQ0FDTixDQUFDLFlBQWEsWUFDZCxDQUFDLFlBQWEsWUFDZCxDQUFDLGFBQWMsYUFDZixDQUFDLFVB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QU8sYUFBY3pLLEdBQ3BDd0ssZUFBZUMsT0FBTyxvQkFBcUJqSSxFQUM1QyxFQW5CRCxHQXFCQXRLLE9BQU9tRixpQkFBaUIsUUFBUSxJQUFNLGFBQ3RDbkYsT0FBT21GLGlCQUFpQixZQUFZLElBQU0sWSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL2NvcmUvSW5kZXhlZERCLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvY29yZS9XZWJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL0FwcC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdXRpbHMvcm91dGVzLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy9jb3JlL1JvdXRlci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Db21tb24vRm9vdGVyLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvVGV0cmlzL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0ZsYXBweUJpcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvQ29tbW9uL0ljb25zLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0NvbW1vbi9JY29uLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L05vdGVQYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvTm90ZVBhZC9jb25zdC9idXR0b25zLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L05vdGVQYWQvY29tcG9uZW50cy9Ob3RlUGFkSGVhZGVyLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L1RldHJpcy9jb25zdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9UZXRyaXMvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvVGV0cmlzL2NsYXNzL1RldHJvbWluby5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9UZXRyaXMvY29tcG9uZW50cy9UZXRyaXNCb2FyZC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9UZXRyaXMvY29tcG9uZW50cy9UZXRyaXNQcmV2aWV3LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L1RldHJpcy9jb21wb25lbnRzL1RldHJpc1BsYXlncm91bmQuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9qcy1zYW5kYm94L1wiOyIsImNsYXNzIEluZGV4ZWREQiB7XHJcbiAgZGI7XHJcblxyXG4gIC8qKlxyXG4gICAqIOyDneyEseyekFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYk5hbWVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZGJWZXJzaW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gc3RvcmVzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZGJOYW1lLCBkYlZlcnNpb24sIHN0b3Jlcykge1xyXG4gICAgdGhpcy5kYk5hbWUgPSBkYk5hbWU7XHJcbiAgICB0aGlzLmRiVmVyc2lvbiA9IGRiVmVyc2lvbjtcclxuICAgIHRoaXMuc3RvcmVzID0gc3RvcmVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogREIg7Jik7ZSIIOuplOyEnOuTnFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIGFzeW5jIG9wZW5EQigpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB3aW5kb3cuaW5kZXhlZERCLm9wZW4odGhpcy5kYk5hbWUsIHRoaXMuZGJWZXJzaW9uKTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGIgPSByZXF1ZXN0LnJlc3VsdDtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgIHJlamVjdChlKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGIgPSByZXF1ZXN0LnJlc3VsdDtcclxuXHJcbiAgICAgICAgdGhpcy5zdG9yZXMuZm9yRWFjaCgoc3RvcmUpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLmRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoc3RvcmUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGIuZGVsZXRlT2JqZWN0U3RvcmUoc3RvcmUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5kYi5jcmVhdGVPYmplY3RTdG9yZShzdG9yZSwgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDrjbDsnbTthLAg7KGw7ZqMIOuplOyEnOuTnFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yZU5hbWVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldERhdGEoc3RvcmVOYW1lLCBpZCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZG9ubHknKS5vYmplY3RTdG9yZShzdG9yZU5hbWUpLmdldChpZCk7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IChlKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDrjbDsnbTthLAg7KCE7LK0IOyhsO2ajCDrqZTshJzrk5xcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0W10+fVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldEFsbERhdGEoc3RvcmVOYW1lKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5kYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkb25seScpLm9iamVjdFN0b3JlKHN0b3JlTmFtZSkuZ2V0QWxsKCk7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IChlKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDrjbDsnbTthLAg7LaU6rCAIOuplOyEnOuTnFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yZU5hbWVcclxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59XHJcbiAgICovXHJcbiAgYXN5bmMgdXBzZXJ0RGF0YShzdG9yZU5hbWUsIGRhdGEpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IG9iamVjdFN0b3JlID0gdGhpcy5kYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkd3JpdGUnKS5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG4gICAgICBjb25zdCBtb2RpZmllZERhdGEgPSB7IC4uLmRhdGEsIGlkOiBkYXRhLmlkIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpIH07XHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBvYmplY3RTdG9yZS5wdXQobW9kaWZpZWREYXRhKTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlcXVlc3QuZXJyb3IpO1xyXG4gICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog642w7J207YSwIOyCreygnCDrqZTshJzrk5xcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn1cclxuICAgKi9cclxuICBhc3luYyBkZWxldGVEYXRhKHN0b3JlTmFtZSwgaWQpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWR3cml0ZScpLm9iamVjdFN0b3JlKHN0b3JlTmFtZSkuZGVsZXRlKGlkKTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgIHJlamVjdChlKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgc2FuZGJveERCID0gbmV3IEluZGV4ZWREQignc2FuZGJveERCJywgMiwgWydub3RlcGFkJ10pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2FuZGJveERCO1xyXG4iLCJjb25zdCByZW5kZXJSYXcgPSAoc3RyaW5nLCAuLi52YWx1ZXMpID0+IHtcclxuICByZXR1cm4gU3RyaW5nLnJhdyhzdHJpbmcsIC4uLnZhbHVlcyk7XHJcbn07XHJcblxyXG5jb25zdCBzaHVmZmxlID0gKGFycmF5KSA9PiB7XHJcbiAgcmV0dXJuIGFycmF5LnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSk7XHJcbn07XHJcblxyXG5leHBvcnQgeyByZW5kZXJSYXcgYXMgaHRtbCwgcmVuZGVyUmF3IGFzIGNzcywgc2h1ZmZsZSB9O1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMuaW5qZWN0SFRNTCgpO1xuICB9XG5cbiAgaW5qZWN0SFRNTCgpIHtcbiAgICByZXR1cm4gYGA7XG4gIH1cblxuICBiaW5kTWV0aG9kcyguLi5tZXRob2RzKSB7XG4gICAgbWV0aG9kcy5mb3JFYWNoKChtZXRob2QpID0+IHtcbiAgICAgIHRoaXNbbWV0aG9kXSA9IHRoaXNbbWV0aG9kXS5iaW5kKHRoaXMpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPGRpdiBpZD1cInBhZ2VcIj48L2Rpdj5cclxuICAgICAgPG15LWljb25zIHRhYmluZGV4PVwiLTFcIj48L215LWljb25zPlxyXG4gICAgICA8bXktZm9vdGVyPjwvbXktZm9vdGVyPlxyXG4gICAgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQgdGV0cmlzIGZyb20gJy4uLy4uL3B1YmxpYy90ZXRyaXMucG5nJztcclxuaW1wb3J0IGZsYXBweUJpcmQgZnJvbSAnLi4vLi4vcHVibGljL2ZsYXBweUJpcmQucG5nJztcclxuaW1wb3J0IG5vdGVwYWQgZnJvbSAnLi4vLi4vcHVibGljL25vdGVwYWQucG5nJztcclxuaW1wb3J0IHNhbmRib3hEQiBmcm9tICcuLi9jb3JlL0luZGV4ZWREQic7XHJcblxyXG5jb25zdCBCQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gJycgOiAnL2pzLXNhbmRib3gnO1xyXG5cclxuY29uc3Qgcm91dGVzID0gW1xyXG4gIHtcclxuICAgIHBhdGg6IGAvYCxcclxuICAgIGh0bWw6IGh0bWxgPG15LWhvbWU+PC9teS1ob21lPmAsXHJcbiAgICBsYWJlbDogJ0hvbWUnLFxyXG4gICAgaWNvblNyYzogbnVsbCxcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGg6IGAvdGV0cmlzYCxcclxuICAgIGh0bWw6IGh0bWxgPG15LXRldHJpcz48L215LXRldHJpcz5gLFxyXG4gICAgbGFiZWw6ICdUZXRyaXMnLFxyXG4gICAgaWNvblNyYzogdGV0cmlzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogYC9mbGFwcHliaXJkYCxcclxuICAgIGh0bWw6IGh0bWxgPG15LWZsYXBweWJpcmQ+PC9teS1mbGFwcHliaXJkPmAsXHJcbiAgICBsYWJlbDogJ0ZsYXBweSZuYnNwO0JpcmQnLFxyXG4gICAgaWNvblNyYzogZmxhcHB5QmlyZCxcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGg6IGAvbm90ZXBhZGAsXHJcbiAgICBodG1sOiBodG1sYDxteS1ub3RlcGFkPjwvbXktbm90ZXBhZD5gLFxyXG4gICAgbGFiZWw6ICdOb3RlJm5ic3A7UGFkJyxcclxuICAgIGljb25TcmM6IG5vdGVwYWQsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBgL25vdGVwYWQvOmlkYCxcclxuICAgIGh0bWw6IGh0bWxgPG15LW5vdGVwYWQgZGF0YS1pZD1cIjppZFwiPjwvbXktbm90ZXBhZD5gLFxyXG4gICAgbGFiZWw6ICdOb3RlJm5ic3A7UGFkJyxcclxuICAgIGljb25TcmM6IG51bGwsXHJcbiAgfSxcclxuXTtcclxuXHJcbmNvbnN0IG1haW5JY29ucyA9IHJvdXRlcy5yZWR1Y2UoKHByZXYsIHJvdXRlcikgPT4ge1xyXG4gIGNvbnN0IHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfSA9IHJvdXRlcjtcclxuICBpZiAoIXJvdXRlci5pY29uU3JjKSByZXR1cm4gcHJldjtcclxuICByZXR1cm4gWy4uLnByZXYsIHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfV07XHJcbn0sIFtdKTtcclxuXHJcbmNvbnN0IGdldExvY2FsSWNvbnMgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3Qgbm90ZXBhZERhdGEgPSBhd2FpdCBzYW5kYm94REIuZ2V0QWxsRGF0YSgnbm90ZXBhZCcpO1xyXG4gIGNvbnN0IG5vdGVwYWRJY29ucyA9IG5vdGVwYWREYXRhLnJlZHVjZSgocHJldiwgaWNvbikgPT4ge1xyXG4gICAgY29uc3QgeyBpZCwgdGl0bGUgfSA9IGljb247XHJcbiAgICByZXR1cm4gWy4uLnByZXYsIHsgcGF0aDogYC9ub3RlcGFkLyR7aWR9YCwgbGFiZWw6IHRpdGxlLCBpY29uU3JjOiBub3RlcGFkIH1dO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIFsuLi5ub3RlcGFkSWNvbnNdO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVzO1xyXG5leHBvcnQgeyBtYWluSWNvbnMsIGdldExvY2FsSWNvbnMsIEJBU0VfVVJMIH07XHJcbiIsImltcG9ydCByb3V0ZXMsIHsgQkFTRV9VUkwgfSBmcm9tICcuLi91dGlscy9yb3V0ZXMnO1xyXG5cclxuY2xhc3MgUm91dGVyIHtcclxuICBjb25zdHJ1Y3Rvcihyb3V0ZSkge1xyXG4gICAgdGhpcy5yb3V0ZXMgPSByb3V0ZTtcclxuICB9XHJcblxyXG4gIHBhdGhUb1JlZ2V4cChwYXRoKSB7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7cGF0aC5yZXBsYWNlKC9cXC8vZywgJ1xcXFwvJykucmVwbGFjZSgvOlxcdysvZywgJyguKyknKX0kYCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcclxuICAgIGNvbnN0IHJvdXRlID0gdGhpcy5yb3V0ZXMuZmluZCgodmFsdWUpID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMucGF0aFRvUmVnZXhwKHRoaXMuZ2V0VXJsRnJvbSh2YWx1ZS5wYXRoKSkudGVzdChjdXJyZW50UGF0aCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXJvdXRlKSB7XHJcbiAgICAgIHRoaXMucmVwbGFjZVRvKCcvJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGFnZScpLmlubmVySFRNTCA9IHJvdXRlLmh0bWwucmVwbGFjZSgnOmlkJywgdGhpcy5nZXRJZEZyb21QYXRoKGN1cnJlbnRQYXRoKSk7XHJcbiAgfVxyXG5cclxuICBnZXRJZEZyb21QYXRoKHBhdGgpIHtcclxuICAgIHJldHVybiBwYXRoLm1hdGNoKC9cXGQrLyk/LlswXTtcclxuICB9XHJcblxyXG4gIG5hdmlnYXRlVG8odXJsKSB7XHJcbiAgICBpZiAodGhpcy5nZXRVcmxGcm9tKHVybCkgPT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSkgcmV0dXJuO1xyXG4gICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIEJBU0VfVVJMICsgdXJsKTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICByZXBsYWNlVG8odXJsKSB7XHJcbiAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgQkFTRV9VUkwgKyB1cmwpO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIGdldFVybEZyb20odXJsKSB7XHJcbiAgICByZXR1cm4gYCR7QkFTRV9VUkx9JHt1cmx9YDtcclxuICB9XHJcblxyXG4gIGJhY2soKSB7XHJcbiAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgcm91dGVyID0gbmV3IFJvdXRlcihyb3V0ZXMpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xyXG4iLCJpbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgbWFpbkljb25zIH0gZnJvbSAnLi4vLi4vdXRpbHMvcm91dGVzJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9jb3JlL1JvdXRlcic7XHJcbmltcG9ydCB3aW5kb3dMb2dvIGZyb20gJy4uLy4uLy4uL3B1YmxpYy93aW5kb3dMb2dvLnBuZyc7XHJcbmltcG9ydCBzZWFyY2hJY29uIGZyb20gJy4uLy4uLy4uL3B1YmxpYy9zZWFyY2hJY29uLnBuZyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb290ZXIgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBodG1sYFxyXG4gICAgICA8aW1nIGFsdD1cIndpbmRvd19sb2dvXCIgc3JjPSR7d2luZG93TG9nb30gY2xhc3M9XCJ3aW5kb3dfaWNvblwiIC8+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dF9ib3hcIj5cclxuICAgICAgICA8aW1nIGFsdD1cInNlYXJjaFwiIHNyYz0ke3NlYXJjaEljb259IGNsYXNzPVwid2luZG93X2ljb25cIiAvPjxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwi7LC+6riwXCIgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgICR7bWFpbkljb25zXHJcbiAgICAgICAgLm1hcCgoaWNvbikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGh0bWxgIDxteS1pY29uIGRhdGEtcGF0aD1cIiR7aWNvbi5wYXRofVwiIGRhdGEtaWNvblNyYz1cIiR7aWNvbi5pY29uU3JjfVwiPjwvbXktaWNvbj4gYDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5qb2luKCcnKX1cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDbGljayhlKSB7XHJcbiAgICBpZiAoIWUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGljb24gPSBlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJyk7XHJcbiAgICByb3V0ZXIubmF2aWdhdGVUbyhpY29uLmRhdGFzZXQucGF0aCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZSBleHRlbmRzIFdlYkNvbXBvbmVudCB7fVxyXG4iLCJpbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXRyaXMgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2NvcmUgPSAwO1xuICAgIHRoaXMuaGFuZGxlU3RhcnQgPSB0aGlzLmhhbmRsZVN0YXJ0LmJpbmQodGhpcyk7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignI3N0YXJ0LWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVTdGFydCk7XG4gIH1cblxuICBpbmplY3RIVE1MKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPG15LXRldHJpcy1wbGF5Z3JvdW5kIGlkPVwiMVwiPjwvbXktdGV0cmlzLXBsYXlncm91bmQ+XG4gICAgICA8YnV0dG9uIGlkPVwic3RhcnQtYnV0dG9uXCI+6rKM7J6EIOyLnOyekTwvYnV0dG9uPlxuICAgICAgPG15LXRldHJpcy1wbGF5Z3JvdW5kIGlkPVwiMlwiPjwvbXktdGV0cmlzLXBsYXlncm91bmQ+XG4gICAgYDtcbiAgfVxuXG4gIGhhbmRsZVN0YXJ0KCkge1xuICAgIHRoaXMucXVlcnlTZWxlY3RvckFsbCgnbXktdGV0cmlzLXBsYXlncm91bmQnKS5mb3JFYWNoKChub2RlKSA9PiBub2RlLnN0YXJ0R2FtZSgpKTtcbiAgfVxufVxuIiwiaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbGFwcHlCaXJkIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxoMT5GbGFwcHkgQmlyZDwvaDE+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICBgO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL2NvcmUvUm91dGVyJztcclxuaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGdldExvY2FsSWNvbnMsIG1haW5JY29ucyB9IGZyb20gJy4uLy4uL3V0aWxzL3JvdXRlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJY29ucyBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICB0aGlzLmljb25zID0gWy4uLm1haW5JY29ucywgLi4uKGF3YWl0IGdldExvY2FsSWNvbnMoKSldO1xyXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLmhhbmRsZURvdWJsZUNsaWNrKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ljb25DaGFuZ2UnLCB0aGlzLmhhbmRsZUljb25DaGFuZ2UpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdpY29uRGVsZXRlJywgdGhpcy5oYW5kbGVJY29uRGVsZXRlKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xyXG4gICAgcmV0dXJuIFsnaWNvbnMnXTtcclxuICB9XHJcblxyXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgICR7dGhpcy5pY29uc1xyXG4gICAgICAgIC5tYXAoKGljb24pID0+IHtcclxuICAgICAgICAgIHJldHVybiBodG1sYFxyXG4gICAgICAgICAgICA8bXktaWNvbiBkYXRhLXBhdGg9JHtpY29uLnBhdGh9IGRhdGEtbGFiZWw9JHtpY29uLmxhYmVsfSBkYXRhLWljb25TcmM9JHtpY29uLmljb25TcmN9PjwvbXktaWNvbj5cclxuICAgICAgICAgIGA7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuam9pbignJyl9XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGljb25zKCkge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5nZXRBdHRyaWJ1dGUoJ2ljb25zJykpO1xyXG4gIH1cclxuXHJcbiAgc2V0IGljb25zKHZhbHVlKSB7XHJcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnaWNvbnMnLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2xpY2soZSkge1xyXG4gICAgaWYgKCFlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJykpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpY29uID0gZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpO1xyXG4gICAgaWNvbi50b2dnbGVBdHRyaWJ1dGUoJ2NoZWNrZWQnKTtcclxuICAgIHRoaXMucXVlcnlTZWxlY3RvckFsbCgnbXktaWNvbicpLmZvckVhY2goKG5vZGUpID0+IHtcclxuICAgICAgaWYgKG5vZGUgIT09IGljb24pIHtcclxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnY2hlY2tlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZURvdWJsZUNsaWNrKGUpIHtcclxuICAgIGlmICghZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKTtcclxuICAgIHJvdXRlci5uYXZpZ2F0ZVRvKGljb24uZGF0YXNldC5wYXRoKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUtleURvd24oZSkge1xyXG4gICAgY29uc3QgY2hlY2tlZEVsID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCdteS1pY29uW2NoZWNrZWRdJyk7XHJcbiAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgaWYgKGNoZWNrZWRFbC5sZW5ndGggPiAxKSByZXR1cm47XHJcbiAgICAgIGlmICghY2hlY2tlZEVsKSByZXR1cm47XHJcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZVRvKGNoZWNrZWRFbFswXS5kYXRhc2V0LnBhdGgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlSWNvbkNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IHBhdGgsIGxhYmVsLCBpY29uU3JjIH0gPSBlLmRldGFpbDtcclxuICAgIGNvbnN0IHByZXZJY29uSW5kZXggPSB0aGlzLmljb25zLmZpbmRJbmRleCgoaWNvbikgPT4gaWNvbi5wYXRoID09PSBwYXRoKTtcclxuXHJcbiAgICBpZiAocHJldkljb25JbmRleCA9PT0gLTEpIHtcclxuICAgICAgdGhpcy5pY29ucyA9IFsuLi50aGlzLmljb25zLCB7IHBhdGgsIGxhYmVsLCBpY29uU3JjIH1dO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgbmV3SWNvbnMgPSBbLi4udGhpcy5pY29uc107XHJcbiAgICAgIG5ld0ljb25zW3ByZXZJY29uSW5kZXhdID0geyBwYXRoLCBsYWJlbCwgaWNvblNyYyB9O1xyXG4gICAgICB0aGlzLmljb25zID0gbmV3SWNvbnM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVJY29uRGVsZXRlKGUpIHtcclxuICAgIGNvbnN0IHsgcGF0aCB9ID0gZS5kZXRhaWw7XHJcbiAgICB0aGlzLmljb25zID0gdGhpcy5pY29ucy5maWx0ZXIoKGljb24pID0+IGljb24ucGF0aCAhPT0gcGF0aCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvbiBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIGNvbnN0IHsgbGFiZWwsIGljb25zcmMgfSA9IHRoaXMuZGF0YXNldDtcclxuICAgIHJldHVybiBodG1sYFxyXG4gICAgICA8aW1nIGFsdD1cIiR7bGFiZWx9X2ljb25cIiBzcmM9JHtpY29uc3JjfSAvPlxyXG4gICAgICAke2xhYmVsID8gYDxzcGFuIGNsYXNzPVwiaWNvbl9uYW1lXCI+JHtsYWJlbH08L3NwYW4+YCA6ICcnfVxyXG4gICAgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XHJcbmltcG9ydCBzYW5kYm94REIgZnJvbSAnLi4vLi4vY29yZS9JbmRleGVkREInO1xyXG5pbXBvcnQgTm90ZVBhZEljb24gZnJvbSAnLi4vLi4vLi4vcHVibGljL25vdGVwYWQucG5nJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9jb3JlL1JvdXRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RlUGFkIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHRoaXMuZGF0YSA9IChhd2FpdCBzYW5kYm94REIuZ2V0RGF0YSgnbm90ZXBhZCcsIHRoaXMuaWQpKSA/PyB7XHJcbiAgICAgIHRpdGxlOiAn7KCc66qp7JeG7J2MJyxcclxuICAgICAgY29udGVudDogJycsXHJcbiAgICB9O1xyXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignc2F2ZScsIHRoaXMuaGFuZGxlU2F2ZSk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2xvY2FsU2F2ZScsIHRoaXMuaGFuZGxlTG9jYWxTYXZlKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZGVsZXRlJywgdGhpcy5oYW5kbGVEZWxldGUpO1xyXG4gIH1cclxuXHJcbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NhdmUnLCB0aGlzLmhhbmRsZVNhdmUpO1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2NhbFNhdmUnLCB0aGlzLmhhbmRsZUxvY2FsU2F2ZSk7XHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RlbGV0ZScsIHRoaXMuaGFuZGxlRGVsZXRlKTtcclxuICB9XHJcblxyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICBjb25zdCB7IHRpdGxlLCBjb250ZW50IH0gPSB0aGlzLmRhdGE7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPG15LW5vdGVwYWQtaGVhZGVyIHRpdGxlPSR7dGl0bGV9PjwvbXktbm90ZXBhZC1oZWFkZXI+XHJcbiAgICAgIDx0ZXh0YXJlYT4ke2NvbnRlbnR9PC90ZXh0YXJlYT5cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVMb2NhbFNhdmUoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3Qgbm90ZVBhZERhdGEgPSB0aGlzLmdldE5vdGVQYWREYXRhKCk7XHJcbiAgICBpZiAoIW5vdGVQYWREYXRhKSByZXR1cm47XHJcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW25vdGVQYWREYXRhLmNvbnRlbnRdLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9KTtcclxuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICBsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgbGluay5kb3dubG9hZCA9IGAke25vdGVQYWREYXRhLnRpdGxlfS50eHRgO1xyXG4gICAgbGluay5jbGljaygpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgaGFuZGxlU2F2ZShlKSB7XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgY29uc3Qgbm90ZVBhZERhdGEgPSB0aGlzLmdldE5vdGVQYWREYXRhKCk7XHJcbiAgICBpZiAoIW5vdGVQYWREYXRhKSByZXR1cm47XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2FuZGJveERCLnVwc2VydERhdGEoJ25vdGVwYWQnLCBub3RlUGFkRGF0YSk7XHJcblxyXG4gICAgICBjb25zdCBwYXRoID0gYC9ub3RlcGFkLyR7cmVzdWx0fWA7XHJcblxyXG4gICAgICBhbGVydCgn7KCA7J6l65CY7JeI7Iq164uI64ukLicpO1xyXG4gICAgICBjb25zdCBpY29uQ2hhbmdlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2ljb25DaGFuZ2UnLCB7XHJcbiAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICBwYXRoLFxyXG4gICAgICAgICAgbGFiZWw6IG5vdGVQYWREYXRhLnRpdGxlLFxyXG4gICAgICAgICAgaWNvblNyYzogTm90ZVBhZEljb24sXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ215LWljb25zJykuZGlzcGF0Y2hFdmVudChpY29uQ2hhbmdlRXZlbnQpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuaWQgPT09IHJlc3VsdCkge1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSBub3RlUGFkRGF0YS50aXRsZS5yZXBsYWNlKC8mbmJzcDsvZywgJyAnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByb3V0ZXIubmF2aWdhdGVUbyhwYXRoKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGFsZXJ0KCfsoIDsnqXsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukLicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgaGFuZGxlRGVsZXRlKGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIGNvbnN0IGNvbmZpcm1SZXN1bHQgPSB3aW5kb3cuY29uZmlybSgn7KCV66eQIOyCreygnO2VmOyLnOqyoOyKteuLiOq5jD8nKTtcclxuICAgICAgaWYgKCFjb25maXJtUmVzdWx0KSByZXR1cm47XHJcblxyXG4gICAgICBhd2FpdCBzYW5kYm94REIuZGVsZXRlRGF0YSgnbm90ZXBhZCcsIHRoaXMuaWQpO1xyXG5cclxuICAgICAgYWxlcnQoJ+yCreygnOuQmOyXiOyKteuLiOuLpC4nKTtcclxuICAgICAgY29uc3QgaWNvbkRlbGV0ZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpY29uRGVsZXRlJywge1xyXG4gICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgcGF0aDogYC9ub3RlcGFkLyR7dGhpcy5pZH1gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdteS1pY29ucycpLmRpc3BhdGNoRXZlbnQoaWNvbkRlbGV0ZUV2ZW50KTtcclxuICAgICAgcm91dGVyLnJlcGxhY2VUbygnL25vdGVwYWQnKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBhbGVydCgn7IKt7KCc7JeQIOyLpO2MqO2WiOyKteuLiOuLpC4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldE5vdGVQYWREYXRhKCkge1xyXG4gICAgY29uc3QgY29udGVudEVsID0gdGhpcy5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpO1xyXG4gICAgY29uc3QgY29udGVudCA9IGNvbnRlbnRFbC52YWx1ZS50cmltKCk7XHJcbiAgICBpZiAoIWNvbnRlbnQpIHtcclxuICAgICAgYWxlcnQoJ+uCtOyaqeydtCDsl4bsirXri4jri6QuJyk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0aXRsZTtcclxuICAgIHdoaWxlICghdGl0bGUpIHtcclxuICAgICAgdGl0bGUgPSBwcm9tcHQoJ+2MjOydvOuqheydhCDsnoXroKXtlZjshLjsmpQuJywgdGhpcy5kYXRhLnRpdGxlLnJlcGxhY2UoLyZuYnNwOy9nLCAnICcpKTtcclxuICAgICAgaWYgKCF0aXRsZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpcm1SZXN1bHQgPSB3aW5kb3cuY29uZmlybSgn7KCc66qp7J2AIO2VhOyImOyeheuLiOuLpC4nKTtcclxuICAgICAgICBpZiAoIWNvbmZpcm1SZXN1bHQpIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgIHRpdGxlOiB0aXRsZS50cmltKCkucmVwbGFjZSgvIC9nLCAnJm5ic3A7JyksXHJcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQucmVwbGFjZSgvIC9nLCAnJm5ic3A7JyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlkKCkge1xyXG4gICAgcmV0dXJuIE51bWJlcih0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKTtcclxuICB9XHJcblxyXG4gIHNldCB0aXRsZSh0aXRsZSkge1xyXG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCdteS1ub3RlcGFkLWhlYWRlcicpLnNldEF0dHJpYnV0ZSgndGl0bGUnLCB0aXRsZSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCByb3V0ZXIgZnJvbSAnLi4vLi4vLi4vY29yZS9Sb3V0ZXInO1xyXG5cclxuY29uc3QgZGlzYWJsZSA9IHRydWU7XHJcblxyXG5jb25zdCBidXR0b25zID0gW1xyXG4gIHtcclxuICAgIGlkOiAnZmlsZScsXHJcbiAgICB0aXRsZTogJ+2MjOydvCcsXHJcbiAgICBrZXk6ICdGJyxcclxuICAgIHNsb3RzOiBbXHJcbiAgICAgIHsgaWQ6IDEsIHRleHQ6ICfsg4jroZwg66eM65Ok6riwKE4pJywga2V5OiBbJ0N0cmwnLCAnTiddLCBvbkNsaWNrOiBoYW5kbGVOZXdDbGljayB9LFxyXG4gICAgICB7IGlkOiAyLCB0ZXh0OiAn64K0IOy7tO2TqO2EsOyXkCDsoIDsnqUoVyknLCBrZXk6IFsnQ3RybCcsICdTaGlmdCcsICdOJ10sIG9uQ2xpY2s6IGhhbmRsZUxvY2FsU2F2ZUNsaWNrIH0sXHJcbiAgICAgIHsgaWQ6IDMsIHRleHQ6ICfsoIDsnqUoUyknLCBrZXk6IFsnQ3RybCcsICdTJ10sIG9uQ2xpY2s6IGhhbmRsZVNhdmVDbGljayB9LFxyXG4gICAgICB7IGlkOiA0LCB0ZXh0OiAn7IKt7KCcKEQpJywga2V5OiBbJ0N0cmwnLCAnU2hpZnQnLCAnUyddLCBvbkNsaWNrOiBoYW5kbGVEZWxldGVDbGljayB9LFxyXG4gICAgICB7IGlkOiA1LCB0ZXh0OiAn7Y6Y7J207KeAIOyEpOyglShVKS4uLicsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogNiwgdGV4dDogJ+yduOyHhChQKS4uLicsIGtleTogWydDdHJsJywgJ1AnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiA3LCB0ZXh0OiAn64Gd64K06riwKFgpJywga2V5OiBbXSwgZGlzYWJsZSB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnZWRpdCcsXHJcbiAgICB0aXRsZTogJ+2OuOynkScsXHJcbiAgICBrZXk6ICdFJyxcclxuICAgIHNsb3RzOiBbXHJcbiAgICAgIHsgaWQ6IDgsIHRleHQ6ICfsi6Ttlokg7Leo7IaMKFUpJywga2V5OiBbJ0N0cmwnLCAnWiddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDksIHRleHQ6ICfsnpjrnbzrgrTquLAoVCknLCBrZXk6IFsnQ3RybCcsICdYJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTAsIHRleHQ6ICfrs7XsgqwoQyknLCBrZXk6IFsnQ3RybCcsICdDJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTEsIHRleHQ6ICfrtpnsl6zrhKPquLAoUCknLCBrZXk6IFsnQ3RybCcsICdWJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTIsIHRleHQ6ICfsgq3soJwoRCknLCBrZXk6IFsnRGVsJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTMsIHRleHQ6ICdCaW5n7Jy866GcIOqygOyDiShTKS4uLicsIGtleTogWydDdHJsJywgJ0UnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAxNCwgdGV4dDogJ+ywvuq4sChGKS4uLicsIGtleTogWydDdHJsJywgJ0YnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAxNSwgdGV4dDogJ+uLpOydjCDssL7quLAoTiknLCBrZXk6IFsnRjMnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAxNiwgdGV4dDogJ+ydtOyghCDssL7quLAoViknLCBrZXk6IFsnU2hpZnQnLCAnRjMnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAxNywgdGV4dDogJ+uwlOq+uOq4sChSKS4uLicsIGtleTogWydDdHJsJywgJ0gnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAxOCwgdGV4dDogJ+ydtOuPmShHKS4uLicsIGtleTogWydDdHJsJywgJ0cnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAxOSwgdGV4dDogJ+uqqOuRkCDshKDtg50oQSknLCBrZXk6IFsnQ3RybCcsICdBJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMjAsIHRleHQ6ICfsi5zqsIQv64Kg7KecKEQpJywga2V5OiBbJ0Y1J10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2Zvcm1hdCcsXHJcbiAgICB0aXRsZTogJ+yEnOyLnScsXHJcbiAgICBrZXk6ICdPJyxcclxuICAgIHNsb3RzOiBbXHJcbiAgICAgIHsgaWQ6IDIxLCB0ZXh0OiAn7J6Q64+ZIOykhCDrsJTqv4goVyknLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDIyLCB0ZXh0OiAn6riA6ry0KEYpLi4uJywga2V5OiBbXSwgZGlzYWJsZSB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAndmlldycsXHJcbiAgICB0aXRsZTogJ+uztOq4sCcsXHJcbiAgICBrZXk6ICdWJyxcclxuICAgIHNsb3RzOiBbXHJcbiAgICAgIHsgaWQ6IDIzLCB0ZXh0OiAn7ZmV64yA7ZWY6riwKFopJywga2V5OiBbJ0N0cmwnLCAnKyddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDI0LCB0ZXh0OiAn7LaV7IaM7ZWY6riwKFgpJywga2V5OiBbJ0N0cmwnLCAnLSddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDI1LCB0ZXh0OiAn7IOB7YOcIO2RnOyLnOykhChTKScsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2hlbHAnLFxyXG4gICAgdGl0bGU6ICfrj4Tsm4Drp5AnLFxyXG4gICAga2V5OiAnSCcsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAyNiwgdGV4dDogJ+uPhOybgOunkCDrs7TquLAoSCknLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDI3LCB0ZXh0OiAn7ZS865Oc67CxIOuztOuCtOq4sChGKScsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMjgsIHRleHQ6ICfrqZTrqqjsnqUg7KCV67O0KEEpJywga2V5OiBbXSwgZGlzYWJsZSB9LFxyXG4gICAgXSxcclxuICB9LFxyXG5dO1xyXG5cclxuY29uc3Qgc2xvdHMgPSBidXR0b25zLnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcclxuICByZXR1cm4gWy4uLmFjYywgLi4uY3VyLnNsb3RzXTtcclxufSwgW10pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYnV0dG9ucztcclxuZXhwb3J0IHsgc2xvdHMgfTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVNhdmVDbGljaygpIHtcclxuICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzYXZlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlTG9jYWxTYXZlQ2xpY2soKSB7XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnbG9jYWxTYXZlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ2xpY2soKSB7XHJcbiAgY29uc3Qgbm90ZXBhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ215LW5vdGVwYWQnKTtcclxuICBpZiAoIW5vdGVwYWQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykpIHJldHVybjtcclxuICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkZWxldGUnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVOZXdDbGljaygpIHtcclxuICBjb25zdCBub3RlcGFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbXktbm90ZXBhZCcpO1xyXG4gIGlmICghbm90ZXBhZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSkge1xyXG4gICAgbm90ZXBhZC5yZW5kZXIoKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgcm91dGVyLm5hdmlnYXRlVG8oJy9ub3RlcGFkJyk7XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCBidXR0b25zLCB7IHNsb3RzIH0gZnJvbSAnLi4vY29uc3QvYnV0dG9ucyc7XHJcbmltcG9ydCBOb3RlUGFkSWNvbiBmcm9tICcuLi8uLi8uLi8uLi9wdWJsaWMvbm90ZXBhZC5wbmcnO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uLy4uL2NvcmUvUm91dGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGVQYWRIZWFkZXIgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XHJcbiAgICByZXR1cm4gWyd0aXRsZSddO1xyXG4gIH1cclxuXHJcbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgaWYgKG5hbWUgPT09ICd0aXRsZScgJiYgb2xkVmFsdWUpIHtcclxuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcjdGl0bGUnKS5pbm5lclRleHQgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPGhlYWRlcj5cclxuICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgIDxpbWcgYWx0PVwibm90ZXBhZF9pY29uXCIgc3JjPSR7Tm90ZVBhZEljb259IC8+XHJcbiAgICAgICAgICA8c3BhbiBpZD1cInRpdGxlXCI+JHt0aGlzLnRpdGxlfTwvc3Bhbj4gLSBXaW5kb3dzIOuplOuqqOyepVxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidmlld19idXR0b25zXCI+XHJcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmlld19idXR0b25cIiBpZD1cIm1pbmlcIj7wn5eVPC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmlld19idXR0b25cIiBpZD1cImZ1bGxcIj7wn5eWPC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmlld19idXR0b25cIiBpZD1cImNsb3NlXCI+4oWpPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvaGVhZGVyPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZWRpdF9idXR0b25zXCI+XHJcbiAgICAgICAgJHtidXR0b25zXHJcbiAgICAgICAgICAubWFwKFxyXG4gICAgICAgICAgICAoYnV0dG9uKSA9PiBodG1sYFxyXG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0X2J1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAgJHtidXR0b24udGl0bGV9KDx1PiR7YnV0dG9uLmtleX08L3U+KVxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvcHVwXCI+XHJcbiAgICAgICAgICAgICAgICAgICR7YnV0dG9uLnNsb3RzXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChcclxuICAgICAgICAgICAgICAgICAgICAgIChzbG90KSA9PiBodG1sYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3ViXCIgZGF0YS1pZD1cIiR7c2xvdC5pZH1cIiBkYXRhLWRpc2FibGU9XCIkeyEhc2xvdC5kaXNhYmxlfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+JHtzbG90LnRleHR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJHtzbG90LmtleS5sZW5ndGggPiAwID8gYDxkaXY+JHtzbG90LmtleS5qb2luKCcgKyAnKX08L2Rpdj5gIDogJyd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAuam9pbignJyl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgYFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDbGljayhlKSB7XHJcbiAgICBjb25zdCB2aWV3QnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdCgnLnZpZXdfYnV0dG9uJyk7XHJcbiAgICBjb25zdCBlZGl0QnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdCgnLmVkaXRfYnV0dG9uJyk7XHJcbiAgICBjb25zdCBzdWIgPSBlLnRhcmdldC5jbG9zZXN0KCcuc3ViJyk7XHJcblxyXG4gICAgaWYgKHZpZXdCdXR0b24pIHtcclxuICAgICAgdGhpcy5jbGlja1ZpZXdCdXR0b24odmlld0J1dHRvbik7XHJcbiAgICB9IGVsc2UgaWYgKGVkaXRCdXR0b24pIHtcclxuICAgICAgdGhpcy5jbGlja0VkaXRCdXR0b24oZWRpdEJ1dHRvbiwgc3ViKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xpY2tWaWV3QnV0dG9uKHZpZXdCdXR0b24pIHtcclxuICAgIHN3aXRjaCAodmlld0J1dHRvbi5pZCkge1xyXG4gICAgICBjYXNlICdmdWxsJzpcclxuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnZnVsbHNjcmVlbicpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdtaW5pJzpcclxuICAgICAgY2FzZSAnY2xvc2UnOlxyXG4gICAgICAgIHJvdXRlci5iYWNrKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGlja0VkaXRCdXR0b24oZWRpdEJ1dHRvbiwgc3ViKSB7XHJcbiAgICBpZiAoc3ViKSB7XHJcbiAgICAgIGNvbnN0IHNsb3RJZCA9IE51bWJlcihzdWIuZGF0YXNldC5pZCk7XHJcbiAgICAgIGNvbnN0IHsgb25DbGljayB9ID0gc2xvdHMuZmluZCgoc2xvdCkgPT4gc2xvdC5pZCA9PT0gc2xvdElkKSB8fCB7fTtcclxuICAgICAgaWYgKG9uQ2xpY2spIHtcclxuICAgICAgICBvbkNsaWNrLmNhbGwodGhpcyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZWRpdEJ1dHRvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0b2dnbGVQb3B1cChlZGl0QnV0dG9uKSB7XHJcbiAgICBjb25zdCBwb3B1cCA9IGVkaXRCdXR0b24ucXVlcnlTZWxlY3RvcignLnBvcHVwJyk7XHJcbiAgICBpZiAocG9wdXAuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93JykpIHtcclxuICAgICAgcG9wdXAuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jbG9zZVBvcHVwKCk7XHJcbiAgICAgIHBvcHVwLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsb3NlUG9wdXAoKSB7XHJcbiAgICBjb25zdCBwb3B1cCA9IHRoaXMucXVlcnlTZWxlY3RvcignLnBvcHVwLnNob3cnKTtcclxuICAgIHBvcHVwPy5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcbiAgfVxyXG5cclxuICBnZXQgdGl0bGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IEJMT0NLUyA9IHtcbiAgSTogW1xuICAgIFswLCAwLCAwLCAwXSxcbiAgICBbMSwgMSwgMSwgMV0sXG4gICAgWzAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwXSxcbiAgXSxcbiAgSjogW1xuICAgIFsyLCAwLCAwXSxcbiAgICBbMiwgMiwgMl0sXG4gICAgWzAsIDAsIDBdLFxuICBdLFxuICBMOiBbXG4gICAgWzAsIDAsIDNdLFxuICAgIFszLCAzLCAzXSxcbiAgICBbMCwgMCwgMF0sXG4gIF0sXG4gIE86IFtcbiAgICBbNCwgNF0sXG4gICAgWzQsIDRdLFxuICBdLFxuICBTOiBbXG4gICAgWzAsIDUsIDVdLFxuICAgIFs1LCA1LCAwXSxcbiAgICBbMCwgMCwgMF0sXG4gIF0sXG4gIFQ6IFtcbiAgICBbMCwgNiwgMF0sXG4gICAgWzYsIDYsIDZdLFxuICAgIFswLCAwLCAwXSxcbiAgXSxcbiAgWjogW1xuICAgIFs3LCA3LCAwXSxcbiAgICBbMCwgNywgN10sXG4gICAgWzAsIDAsIDBdLFxuICBdLFxufTtcblxuY29uc3QgQkxPQ0tfQ0xBU1NFUyA9IHtcbiAgMDogJ2VtcHR5JyxcbiAgMTogJ0knLFxuICAyOiAnSicsXG4gIDM6ICdMJyxcbiAgNDogJ08nLFxuICA1OiAnUycsXG4gIDY6ICdUJyxcbiAgNzogJ1onLFxuICAxMDogJ0kgZnJlZXplJyxcbiAgMjA6ICdKIGZyZWV6ZScsXG4gIDMwOiAnTCBmcmVlemUnLFxuICA0MDogJ08gZnJlZXplJyxcbiAgNTA6ICdTIGZyZWV6ZScsXG4gIDYwOiAnVCBmcmVlemUnLFxuICA3MDogJ1ogZnJlZXplJyxcbn07XG5cbmNvbnN0IFNDT1JFUyA9IHtcbiAgMTogMTAwLFxuICAyOiAzMDAsXG4gIDM6IDUwMCxcbiAgNDogODAwLFxufTtcblxuY29uc3QgQk9BUkRfV0lEVEggPSAxMDtcbmNvbnN0IEJPQVJEX0hFSUdIVCA9IDIwO1xuXG5jb25zdCBLRVlfQUNUSU9OUyA9IG5ldyBNYXAoW1xuICBbXG4gICAgJzEnLFxuICAgIG5ldyBNYXAoW1xuICAgICAgWydzJywgJ21vdmVEb3duJ10sXG4gICAgICBbJ2EnLCAnbW92ZUxlZnQnXSxcbiAgICAgIFsnZCcsICdtb3ZlUmlnaHQnXSxcbiAgICAgIFsndycsICdyb3RhdGUnXSxcbiAgICAgIFsnUycsICdtb3ZlRG93biddLFxuICAgICAgWydBJywgJ21vdmVMZWZ0J10sXG4gICAgICBbJ0QnLCAnbW92ZVJpZ2h0J10sXG4gICAgICBbJ1cnLCAncm90YXRlJ10sXG4gICAgXSksXG4gIF0sXG4gIFtcbiAgICAnMicsXG4gICAgbmV3IE1hcChbXG4gICAgICBbJ0Fycm93RG93bicsICdtb3ZlRG93biddLFxuICAgICAgWydBcnJvd0xlZnQnLCAnbW92ZUxlZnQnXSxcbiAgICAgIFsnQXJyb3dSaWdodCcsICdtb3ZlUmlnaHQnXSxcbiAgICAgIFsnQXJyb3dVcCcsICdyb3RhdGUnXSxcbiAgICBdKSxcbiAgXSxcbl0pO1xuXG5leHBvcnQgeyBCTE9DS1MsIEJPQVJEX0hFSUdIVCwgQk9BUkRfV0lEVEgsIEJMT0NLX0NMQVNTRVMsIFNDT1JFUywgS0VZX0FDVElPTlMgfTtcbiIsImltcG9ydCB7IHNodWZmbGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IGNyZWF0ZVNodWZmbGVCbG9ja1F1ZXVlID0gKGJsb2NrcykgPT4ge1xuICByZXR1cm4gc2h1ZmZsZShPYmplY3QudmFsdWVzKGJsb2NrcykpO1xufTtcblxuY29uc3QgZ2V0SW5pdGlhbEJsb2NrUG9zID0gKHdpZHRoLCBibG9jaykgPT4ge1xuICBjb25zdCBmaXJzdE5vbkVtcHR5Um93SW5kZXggPSBibG9jay5maW5kSW5kZXgoKHJvdykgPT4gcm93LnNvbWUoKGNlbGwpID0+IGNlbGwgIT09IDApKTtcblxuICByZXR1cm4ge1xuICAgIHg6IE1hdGguZmxvb3IoKHdpZHRoIC0gYmxvY2tbMF0ubGVuZ3RoKSAvIDIpLFxuICAgIHk6IC1maXJzdE5vbkVtcHR5Um93SW5kZXgsXG4gIH07XG59O1xuXG5jb25zdCBnZXRJbml0aWFsRGF0YSA9ICh3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gIHJldHVybiBBcnJheS5mcm9tKEFycmF5KGhlaWdodCksICgpID0+IEFycmF5KHdpZHRoKS5maWxsKDApKTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVNodWZmbGVCbG9ja1F1ZXVlLCBnZXRJbml0aWFsQmxvY2tQb3MsIGdldEluaXRpYWxEYXRhIH07XG4iLCJpbXBvcnQgeyBCTE9DS1MsIEJPQVJEX0hFSUdIVCwgQk9BUkRfV0lEVEggfSBmcm9tICcuLi9jb25zdCc7XG5pbXBvcnQgeyBjcmVhdGVTaHVmZmxlQmxvY2tRdWV1ZSwgZ2V0SW5pdGlhbEJsb2NrUG9zIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgRlJFRVpFID0gJ2ZyZWV6ZSc7XG5leHBvcnQgY29uc3QgQ1JFQVRFX05FV19CTE9DSyA9ICdjcmVhdGVOZXdCbG9jayc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRldHJvbWlubyB7XG4gIHN0YXRpYyBvYnNlcnZlcnMgPSB7IFtDUkVBVEVfTkVXX0JMT0NLXTogW10sIFtGUkVFWkVdOiBbXSB9O1xuXG4gIGNvbnN0cnVjdG9yKCRwbGF5Z3JvdW5kLCBjcmVhdGVCbG9jayA9IHRydWUpIHtcbiAgICB0aGlzLiRwbGF5Z3JvdW5kID0gJHBsYXlncm91bmQ7XG4gICAgdGhpcy4kYm9hcmQgPSAkcGxheWdyb3VuZC5xdWVyeVNlbGVjdG9yKCdteS10ZXRyaXMtYm9hcmQnKTtcbiAgICB0aGlzLmJsb2NrUXVldWUgPSBjcmVhdGVTaHVmZmxlQmxvY2tRdWV1ZShCTE9DS1MpO1xuICAgIHRoaXMub2JzZXJ2ZXJzID0geyBbQ1JFQVRFX05FV19CTE9DS106IFtdLCBbRlJFRVpFXTogW10gfTtcbiAgICBpZiAoY3JlYXRlQmxvY2spIHtcbiAgICAgIHRoaXMuY3JlYXRlTmV3QmxvY2soKTtcbiAgICB9XG4gIH1cblxuICBzdWJzY3JpYmUoZXZlbnQsIG9ic2VydmVyKSB7XG4gICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRdLnB1c2gob2JzZXJ2ZXIpO1xuICB9XG5cbiAgbm90aWZ5KGV2ZW50KSB7XG4gICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRdLmZvckVhY2goKG9ic2VydmVyKSA9PiBvYnNlcnZlcigpKTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKGV2ZW50LCBvYnNlcnZlcikge1xuICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5maWx0ZXIoKG8pID0+IG8gIT09IG9ic2VydmVyKTtcbiAgfVxuXG4gIGdldE5leHRUZXRyb21pbm9zKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrUXVldWUuc2xpY2UoMCwgNSk7XG4gIH1cblxuICBjcmVhdGVOZXdCbG9jaygpIHtcbiAgICB0aGlzLmJsb2NrID0gdGhpcy5ibG9ja1F1ZXVlLnNoaWZ0KCk7XG5cbiAgICBpZiAodGhpcy5ibG9ja1F1ZXVlLmxlbmd0aCA8IDUpIHtcbiAgICAgIHRoaXMuYmxvY2tRdWV1ZSA9IHRoaXMuYmxvY2tRdWV1ZS5jb25jYXQoY3JlYXRlU2h1ZmZsZUJsb2NrUXVldWUoQkxPQ0tTKSk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5pdGlhbEJsb2NrUG9zID0gZ2V0SW5pdGlhbEJsb2NrUG9zKEJPQVJEX1dJRFRILCB0aGlzLmJsb2NrKTtcbiAgICB0aGlzLnggPSBpbml0aWFsQmxvY2tQb3MueDtcbiAgICB0aGlzLnkgPSBpbml0aWFsQmxvY2tQb3MueTtcblxuICAgIHRoaXMubm90aWZ5KENSRUFURV9ORVdfQkxPQ0spO1xuICB9XG5cbiAgcm90YXRlKCkge1xuICAgIGNvbnN0IHJvdGF0ZWRCbG9jayA9IHRoaXMuYmxvY2tbMF0ubWFwKChfLCBpKSA9PiB0aGlzLmJsb2NrLm1hcCgocm93KSA9PiByb3dbaV0pLnJldmVyc2UoKSk7XG4gICAgY29uc3Qgcm90YXRlZFdpZHRoID0gcm90YXRlZEJsb2NrWzBdLmxlbmd0aDtcbiAgICBjb25zdCByb3RhdGVkSGVpZ2h0ID0gcm90YXRlZEJsb2NrLmxlbmd0aDtcbiAgICBsZXQgbmV3WCA9IHRoaXMueDtcbiAgICBsZXQgbmV3WSA9IHRoaXMueTtcblxuICAgIGlmIChuZXdYICsgcm90YXRlZFdpZHRoID4gQk9BUkRfV0lEVEgpIHtcbiAgICAgIG5ld1ggPSBCT0FSRF9XSURUSCAtIHJvdGF0ZWRXaWR0aDtcbiAgICB9XG4gICAgaWYgKG5ld1ggPCAwKSB7XG4gICAgICBuZXdYID0gMDtcbiAgICB9XG4gICAgaWYgKG5ld1kgKyByb3RhdGVkSGVpZ2h0ID4gQk9BUkRfSEVJR0hUKSB7XG4gICAgICBuZXdZID0gQk9BUkRfSEVJR0hUIC0gcm90YXRlZEhlaWdodDtcbiAgICB9XG4gICAgaWYgKG5ld1kgPCAwKSB7XG4gICAgICBuZXdZID0gMDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYW5Nb3ZlKG5ld1gsIG5ld1ksIHJvdGF0ZWRCbG9jaykpIHtcbiAgICAgIHRoaXMuYmxvY2sgPSByb3RhdGVkQmxvY2s7XG4gICAgICB0aGlzLnggPSBuZXdYO1xuICAgICAgdGhpcy55ID0gbmV3WTtcbiAgICB9XG4gIH1cblxuICBtb3ZlTGVmdCgpIHtcbiAgICBpZiAodGhpcy5jYW5Nb3ZlKHRoaXMueCAtIDEsIHRoaXMueSwgdGhpcy5ibG9jaykpIHtcbiAgICAgIHRoaXMueCAtPSAxO1xuICAgIH1cbiAgfVxuXG4gIG1vdmVSaWdodCgpIHtcbiAgICBpZiAodGhpcy5jYW5Nb3ZlKHRoaXMueCArIDEsIHRoaXMueSwgdGhpcy5ibG9jaykpIHtcbiAgICAgIHRoaXMueCArPSAxO1xuICAgIH1cbiAgfVxuXG4gIG1vdmVEb3duKCkge1xuICAgIGlmICh0aGlzLmNhbk1vdmUodGhpcy54LCB0aGlzLnkgKyAxLCB0aGlzLmJsb2NrKSkge1xuICAgICAgdGhpcy55ICs9IDE7XG4gICAgfSBlbHNlIGlmICh0aGlzLnkgPT09IDApIHtcbiAgICAgIHRoaXMuZnJlZXplKCk7XG4gICAgICB0aGlzLiRib2FyZC5zdG9wR2FtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZyZWV6ZSgpO1xuICAgICAgdGhpcy5jcmVhdGVOZXdCbG9jaygpO1xuICAgIH1cbiAgfVxuXG4gIGZyZWV6ZSgpIHtcbiAgICBjb25zdCB7IGJsb2NrLCB4LCB5IH0gPSB0aGlzO1xuICAgIGJsb2NrLmZvckVhY2goKHJvdywgaSkgPT4ge1xuICAgICAgcm93LmZvckVhY2goKGNvbCwgaikgPT4ge1xuICAgICAgICBpZiAoY29sICE9PSAwKSB7XG4gICAgICAgICAgdGhpcy4kYm9hcmQuZGF0YVt5ICsgaV1beCArIGpdID0gY29sICogMTA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5ub3RpZnkoRlJFRVpFKTtcbiAgfVxuXG4gIGNhbk1vdmUoeCwgeSwgYmxvY2spIHtcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBibG9jay5sZW5ndGg7IHJvdyArPSAxKSB7XG4gICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBibG9ja1tyb3ddLmxlbmd0aDsgY29sICs9IDEpIHtcbiAgICAgICAgaWYgKGJsb2NrW3Jvd11bY29sXSAhPT0gMCkge1xuICAgICAgICAgIGNvbnN0IG5leHRYID0geCArIGNvbDtcbiAgICAgICAgICBjb25zdCBuZXh0WSA9IHkgKyByb3c7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgbmV4dFggPCAwIHx8XG4gICAgICAgICAgICBuZXh0WCA+PSBCT0FSRF9XSURUSCB8fFxuICAgICAgICAgICAgbmV4dFkgPCAwIHx8XG4gICAgICAgICAgICBuZXh0WSA+PSBCT0FSRF9IRUlHSFQgfHxcbiAgICAgICAgICAgIHRoaXMuJGJvYXJkLmRhdGFbbmV4dFldW25leHRYXSA+PSAxMFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgY29uc3QgY2xvbmVkID0gbmV3IFRldHJvbWlubyh0aGlzLiRwbGF5Z3JvdW5kLCBmYWxzZSk7XG4gICAgY2xvbmVkLmJsb2NrID0gdGhpcy5ibG9jay5tYXAoKHJvdykgPT4gWy4uLnJvd10pO1xuICAgIGNsb25lZC54ID0gdGhpcy54O1xuICAgIGNsb25lZC55ID0gdGhpcy55O1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn1cbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xuaW1wb3J0IHsgQkxPQ0tfQ0xBU1NFUywgQk9BUkRfSEVJR0hULCBCT0FSRF9XSURUSCwgS0VZX0FDVElPTlMsIFNDT1JFUyB9IGZyb20gJy4uL2NvbnN0JztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBDUkVBVEVfTkVXX0JMT0NLLCBGUkVFWkUgfSBmcm9tICcuLi9jbGFzcy9UZXRyb21pbm8nO1xuaW1wb3J0IHsgZ2V0SW5pdGlhbERhdGEgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRldHJpc0JvYXJkIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRhdGEgPSBnZXRJbml0aWFsRGF0YShCT0FSRF9XSURUSCwgQk9BUkRfSEVJR0hUKTtcbiAgICB0aGlzLiRwbGF5Z3JvdW5kID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0ID0gZmFsc2U7XG4gICAgdGhpcy50ZXRyb21pbm8gPSBudWxsO1xuICAgIHRoaXMubGFzdFRpbWUgPSBudWxsO1xuICAgIHRoaXMuZHJvcEludGVydmFsID0gMTAwMDtcbiAgICB0aGlzLnRldHJvbWlub0NvdW50ZXIgPSAwO1xuICAgIHRoaXMuYW5pbWF0aW9uSWQgPSBudWxsO1xuICAgIHRoaXMua2V5U3RhdGUgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5iaW5kTWV0aG9kcyhcbiAgICAgICdzdGFydEdhbWUnLFxuICAgICAgJ2Ryb3BCbG9jaycsXG4gICAgICAnaW5jcmVhc2VEcm9wU3BlZWQnLFxuICAgICAgJ3JlbW92ZUZ1bGxSb3dzJyxcbiAgICAgICdrZXl1cEhhbmRsZXInLFxuICAgICAgJ2tleWRvd25IYW5kbGVyJyxcbiAgICAgICdoYW5kbGVLZXlzJyxcbiAgICAgICdyZW5kZXInXG4gICAgKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnRldHJvbWluby51bnN1YnNjcmliZShDUkVBVEVfTkVXX0JMT0NLLCB0aGlzLmluY3JlYXNlRHJvcFNwZWVkKTtcbiAgICB0aGlzLnRldHJvbWluby51bnN1YnNjcmliZShGUkVFWkUsIHRoaXMucmVtb3ZlRnVsbFJvd3MpO1xuICB9XG5cbiAgaW5qZWN0SFRNTCgpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICR7dGhpcy5kYXRhXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgKHJvdykgPT4gaHRtbGBcbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgJHtyb3cubWFwKChjZWxsKSA9PiBodG1sYDxsaSBjbGFzcz1cImNlbGwtJHtCTE9DS19DTEFTU0VTW2NlbGxdfVwiPjwvbGk+YCkuam9pbignJyl9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIGBcbiAgICAgICAgKVxuICAgICAgICAuam9pbignJyl9XG4gICAgYDtcbiAgfVxuXG4gIGluY3JlYXNlRHJvcFNwZWVkKCkge1xuICAgIGlmICh0aGlzLnRldHJvbWlub0NvdW50ZXIgPT09IDEwKSB7XG4gICAgICB0aGlzLnRldHJvbWlub0NvdW50ZXIgPSAwO1xuICAgICAgdGhpcy5kcm9wSW50ZXJ2YWwgKj0gMC45O1xuICAgIH1cbiAgICB0aGlzLnRldHJvbWlub0NvdW50ZXIgKz0gMTtcbiAgfVxuXG4gIHN0YXJ0R2FtZSgkcGxheWdyb3VuZCwgdGV0cm9taW5vKSB7XG4gICAgaWYgKHRoaXMuc3RhcnQpIHJldHVybjtcbiAgICB0aGlzLmRhdGEgPSBnZXRJbml0aWFsRGF0YShCT0FSRF9XSURUSCwgQk9BUkRfSEVJR0hUKTtcbiAgICB0aGlzLnRldHJvbWlubyA9IHRldHJvbWlubztcbiAgICB0aGlzLnRldHJvbWluby5zdWJzY3JpYmUoQ1JFQVRFX05FV19CTE9DSywgdGhpcy5pbmNyZWFzZURyb3BTcGVlZCk7XG4gICAgdGhpcy50ZXRyb21pbm8uc3Vic2NyaWJlKEZSRUVaRSwgdGhpcy5yZW1vdmVGdWxsUm93cyk7XG4gICAgdGhpcy5zdGFydCA9IHRydWU7XG4gICAgdGhpcy4kcGxheWdyb3VuZCA9ICRwbGF5Z3JvdW5kO1xuICAgIHRoaXMudXBkYXRlQm9hcmQoKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlkb3duSGFuZGxlcik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmtleXVwSGFuZGxlcik7XG4gICAgdGhpcy5sYXN0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmRyb3BCbG9jayk7XG4gIH1cblxuICBzdG9wR2FtZSgpIHtcbiAgICB0aGlzLnN0YXJ0ID0gZmFsc2U7XG4gICAgdGhpcy50ZXRyb21pbm9Db3VudGVyID0gMDtcbiAgICB0aGlzLmRyb3BJbnRlcnZhbCA9IDEwMDA7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5ZG93bkhhbmRsZXIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5rZXl1cEhhbmRsZXIpO1xuICB9XG5cbiAgZHJvcEJsb2NrKHRpbWVzdGFtcCkge1xuICAgIGNvbnN0IGRlbHRhVGltZSA9IHRpbWVzdGFtcCAtIHRoaXMubGFzdFRpbWU7XG5cbiAgICBpZiAoZGVsdGFUaW1lID4gdGhpcy5kcm9wSW50ZXJ2YWwpIHtcbiAgICAgIGNvbnN0IHByZXZUZXRyb21pbm8gPSB0aGlzLnRldHJvbWluby5jbG9uZSgpO1xuICAgICAgdGhpcy50ZXRyb21pbm8ubW92ZURvd24oKTtcbiAgICAgIHRoaXMudXBkYXRlQm9hcmQocHJldlRldHJvbWlubyk7XG4gICAgICB0aGlzLmxhc3RUaW1lID0gdGltZXN0YW1wO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXJ0KSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuZHJvcEJsb2NrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25JZCk7XG4gICAgfVxuICB9XG5cbiAga2V5ZG93bkhhbmRsZXIoZSkge1xuICAgIHRoaXMua2V5U3RhdGUuYWRkKGUua2V5KTtcbiAgICB0aGlzLmhhbmRsZUtleXMoKTtcbiAgfVxuXG4gIGtleXVwSGFuZGxlcihlKSB7XG4gICAgdGhpcy5rZXlTdGF0ZS5kZWxldGUoZS5rZXkpO1xuICB9XG5cbiAgaGFuZGxlS2V5cygpIHtcbiAgICBjb25zdCBwcmV2VGV0cm9taW5vID0gdGhpcy50ZXRyb21pbm8uY2xvbmUoKTtcbiAgICBjb25zdCBrZXlzID0gS0VZX0FDVElPTlMuZ2V0KHRoaXMuJHBsYXlncm91bmQuaWQpO1xuXG4gICAga2V5cy5mb3JFYWNoKChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodGhpcy5rZXlTdGF0ZS5oYXModmFsdWUpKSB7XG4gICAgICAgIHRoaXMudGV0cm9taW5vW2tleV0oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZUJvYXJkKHByZXZUZXRyb21pbm8pKTtcbiAgfVxuXG4gIHVwZGF0ZUJvYXJkKHByZXZUZXRyb21pbm8gPSBudWxsKSB7XG4gICAgaWYgKHByZXZUZXRyb21pbm8pIHtcbiAgICAgIHRoaXMucmVtb3ZlT2xkQmxvY2socHJldlRldHJvbWlubyk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXROZXdCbG9jayh0aGlzLmRhdGEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW1vdmVPbGRCbG9jayh0ZXRyb21pbm8pIHtcbiAgICBjb25zdCB7IGJsb2NrLCB4LCB5IH0gPSB0ZXRyb21pbm87XG5cbiAgICBibG9jay5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgIHJvdy5mb3JFYWNoKChjb2wsIGopID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVt5ICsgaV0/Llt4ICsgal0gPT09IGNvbCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgIHRoaXMuZGF0YVt5ICsgaV1beCArIGpdID0gMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdXROZXdCbG9jaygpIHtcbiAgICBjb25zdCB7IHgsIHksIGJsb2NrIH0gPSB0aGlzLnRldHJvbWlubztcblxuICAgIGJsb2NrLmZvckVhY2goKHJvdywgaSkgPT4ge1xuICAgICAgcm93LmZvckVhY2goKGNvbCwgaikgPT4ge1xuICAgICAgICBpZiAoY29sICE9PSAwKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgdGhpcy5kYXRhW3kgKyBpXVt4ICsgal0gPSBjb2w7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlRnVsbFJvd3MoKSB7XG4gICAgY29uc29sZS5sb2coJ3JlbW92ZUZ1bGxSb3dzJyk7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgdGhpcy5kYXRhLmZvckVhY2goKHJvdywgaSkgPT4ge1xuICAgICAgaWYgKHJvdy5ldmVyeSgoY2VsbCkgPT4gY2VsbCA+PSAxMCkpIHtcbiAgICAgICAgcmVzdWx0ICs9IDE7XG4gICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHRoaXMuZGF0YS51bnNoaWZ0KEFycmF5KEJPQVJEX1dJRFRIKS5maWxsKDApKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChyZXN1bHQgPiAwKSB7XG4gICAgICB0aGlzLiRwbGF5Z3JvdW5kLnNjb3JlVXAoU0NPUkVTW3Jlc3VsdF0pO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IEJMT0NLX0NMQVNTRVMgfSBmcm9tICcuLi9jb25zdCc7XG5pbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcbmltcG9ydCB7IENSRUFURV9ORVdfQkxPQ0sgfSBmcm9tICcuLi9jbGFzcy9UZXRyb21pbm8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXRyaXNQcmV2aWV3IGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLiRwbGF5Z3JvdW5kID0gbnVsbDtcbiAgICB0aGlzLnRldHJvbWlubyA9IG51bGw7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy50ZXRyb21pbm8udW5zdWJzY3JpYmUoQ1JFQVRFX05FV19CTE9DSywgdGhpcy5yZW5kZXIpO1xuICB9XG5cbiAgaW5qZWN0SFRNTCgpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICR7dGhpcy50ZXRyb21pbm9cbiAgICAgICAgPy5nZXROZXh0VGV0cm9taW5vcygpXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgKHRldHJvbWlubykgPT4gaHRtbGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXRyb21pbm8tcHJldmlld1wiPlxuICAgICAgICAgICAgICAke3RldHJvbWlub1xuICAgICAgICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAgICAgICAocm93KSA9PiBodG1sYFxuICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJ0ZXRyb21pbm8tcHJldmlldy1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAke3Jvdy5tYXAoKGNlbGwpID0+IGh0bWxgIDxsaSBjbGFzcz1cImNlbGwtJHtCTE9DS19DTEFTU0VTW2NlbGxdfVwiPjwvbGk+IGApLmpvaW4oJycpfVxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuam9pbignJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBgXG4gICAgICAgIClcbiAgICAgICAgLmpvaW4oJycpIHx8ICcnfVxuICAgIGA7XG4gIH1cblxuICBzdGFydEdhbWUoJHBsYXlncm91bmQsIHRldHJvbWlubykge1xuICAgIHRoaXMuJHBsYXlncm91bmQgPSAkcGxheWdyb3VuZDtcbiAgICB0aGlzLnRldHJvbWlubyA9IHRldHJvbWlubztcbiAgICB0aGlzLnRldHJvbWluby5zdWJzY3JpYmUoQ1JFQVRFX05FV19CTE9DSywgdGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbn1cbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBUZXRyb21pbm8gZnJvbSAnLi4vY2xhc3MvVGV0cm9taW5vJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV0cmlzUGxheWdyb3VuZCBleHRlbmRzIFdlYkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zY29yZSA9IDA7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICB9XG5cbiAgaW5qZWN0SFRNTCgpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgPG15LXRldHJpcy1ib2FyZCBjbGFzcz1cImJvYXJkXCI+PC9teS10ZXRyaXMtYm9hcmQ+XG4gICAgICAgIDxteS10ZXRyaXMtcHJldmlldyBjbGFzcz1cInRldHJvbWluby1wcmV2aWV3c1wiPjwvbXktdGV0cmlzLXByZXZpZXc+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzcGFuIGNsYXNzPVwic2NvcmVcIj4ke3RoaXMuc2NvcmV9PC9zcGFuPlxuICAgIGA7XG4gIH1cblxuICBzdGFydEdhbWUoKSB7XG4gICAgdGhpcy50ZXRyb21pbm8gPSBuZXcgVGV0cm9taW5vKHRoaXMpO1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignbXktdGV0cmlzLWJvYXJkJykuc3RhcnRHYW1lKHRoaXMsIHRoaXMudGV0cm9taW5vKTtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ215LXRldHJpcy1wcmV2aWV3Jykuc3RhcnRHYW1lKHRoaXMsIHRoaXMudGV0cm9taW5vKTtcbiAgfVxuXG4gIHNjb3JlVXAoc2NvcmUpIHtcbiAgICB0aGlzLnNjb3JlICs9IHNjb3JlO1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnNjb3JlJykuaW5uZXJUZXh0ID0gdGhpcy5zY29yZTtcbiAgfVxufVxuIiwiaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuaW1wb3J0IHNhbmRib3hEQiBmcm9tICcuL2NvcmUvSW5kZXhlZERCJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuL3ZpZXcvQ29tbW9uL0Zvb3Rlcic7XG5pbXBvcnQgSG9tZSBmcm9tICcuL3ZpZXcvSG9tZSc7XG5pbXBvcnQgVGV0cmlzIGZyb20gJy4vdmlldy9UZXRyaXMnO1xuaW1wb3J0IEZsYXBweUJpcmQgZnJvbSAnLi92aWV3L0ZsYXBweUJpcmQnO1xuaW1wb3J0IEljb25zIGZyb20gJy4vdmlldy9Db21tb24vSWNvbnMnO1xuaW1wb3J0IEljb24gZnJvbSAnLi92aWV3L0NvbW1vbi9JY29uJztcbmltcG9ydCBOb3RlUGFkIGZyb20gJy4vdmlldy9Ob3RlUGFkJztcbmltcG9ydCBOb3RlUGFkSGVhZGVyIGZyb20gJy4vdmlldy9Ob3RlUGFkL2NvbXBvbmVudHMvTm90ZVBhZEhlYWRlcic7XG5pbXBvcnQgcm91dGVyIGZyb20gJy4vY29yZS9Sb3V0ZXInO1xuaW1wb3J0IFRldHJpc0JvYXJkIGZyb20gJy4vdmlldy9UZXRyaXMvY29tcG9uZW50cy9UZXRyaXNCb2FyZCc7XG5pbXBvcnQgVGV0cmlzUHJldmlldyBmcm9tICcuL3ZpZXcvVGV0cmlzL2NvbXBvbmVudHMvVGV0cmlzUHJldmlldyc7XG5pbXBvcnQgVGV0cmlzUGxheWdyb3VuZCBmcm9tICcuL3ZpZXcvVGV0cmlzL2NvbXBvbmVudHMvVGV0cmlzUGxheWdyb3VuZCc7XG5cbihhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgc2FuZGJveERCLm9wZW5EQigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcXVldWVNaWNyb3Rhc2soKCkgPT4gYWxlcnQoJ0luZGV4ZWREQuulvCDsgqzsmqntlaAg7IiYIOyXhuyKteuLiOuLpC4nKSk7XG4gIH1cblxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWFwcCcsIEFwcCk7XG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbXktZm9vdGVyJywgRm9vdGVyKTtcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1ob21lJywgSG9tZSk7XG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbXktdGV0cmlzJywgVGV0cmlzKTtcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS10ZXRyaXMtcGxheWdyb3VuZCcsIFRldHJpc1BsYXlncm91bmQpO1xuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LXRldHJpcy1ib2FyZCcsIFRldHJpc0JvYXJkKTtcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS10ZXRyaXMtcHJldmlldycsIFRldHJpc1ByZXZpZXcpO1xuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWZsYXBweWJpcmQnLCBGbGFwcHlCaXJkKTtcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1pY29ucycsIEljb25zKTtcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1pY29uJywgSWNvbik7XG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbXktbm90ZXBhZCcsIE5vdGVQYWQpO1xuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LW5vdGVwYWQtaGVhZGVyJywgTm90ZVBhZEhlYWRlcik7XG59KSgpO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHJvdXRlci5yZW5kZXIoKSk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKSA9PiByb3V0ZXIucmVuZGVyKCkpO1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJkYiIsImNvbnN0cnVjdG9yIiwiZGJOYW1lIiwiZGJWZXJzaW9uIiwic3RvcmVzIiwidGhpcyIsImFzeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0Iiwid2luZG93IiwiaW5kZXhlZERCIiwib3BlbiIsIm9uc3VjY2VzcyIsInJlc3VsdCIsIm9uZXJyb3IiLCJlIiwib251cGdyYWRlbmVlZGVkIiwiZm9yRWFjaCIsInN0b3JlIiwib2JqZWN0U3RvcmVOYW1lcyIsImNvbnRhaW5zIiwiZGVsZXRlT2JqZWN0U3RvcmUiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJzdG9yZU5hbWUiLCJpZCIsInRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmUiLCJnZXQiLCJnZXRBbGwiLCJkYXRhIiwibW9kaWZpZWREYXRhIiwiRGF0ZSIsImdldFRpbWUiLCJwdXQiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJkZWxldGUiLCJyZW5kZXJSYXciLCJzdHJpbmciLCJ2YWx1ZXMiLCJTdHJpbmciLCJyYXciLCJXZWJDb21wb25lbnQiLCJIVE1MRWxlbWVudCIsInN1cGVyIiwicmVuZGVyIiwiYmluZCIsImNvbm5lY3RlZENhbGxiYWNrIiwiaW5uZXJIVE1MIiwiaW5qZWN0SFRNTCIsImJpbmRNZXRob2RzIiwibWV0aG9kcyIsIm1ldGhvZCIsIkFwcCIsIkJBU0VfVVJMIiwicm91dGVzIiwicGF0aCIsImh0bWwiLCJsYWJlbCIsImljb25TcmMiLCJtYWluSWNvbnMiLCJyZWR1Y2UiLCJwcmV2Iiwicm91dGVyIiwiZ2V0TG9jYWxJY29ucyIsImljb24iLCJ0aXRsZSIsInJvdXRlIiwicGF0aFRvUmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsImN1cnJlbnRQYXRoIiwibG9jYXRpb24iLCJwYXRobmFtZSIsImZpbmQiLCJ2YWx1ZSIsImdldFVybEZyb20iLCJ0ZXN0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0SWRGcm9tUGF0aCIsInJlcGxhY2VUbyIsIm1hdGNoIiwibmF2aWdhdGVUbyIsInVybCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJiYWNrIiwiRm9vdGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUNsaWNrIiwiam9pbiIsInRhcmdldCIsImNsb3Nlc3QiLCJkYXRhc2V0IiwiSG9tZSIsIlRldHJpcyIsInNjb3JlIiwiaGFuZGxlU3RhcnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibm9kZSIsInN0YXJ0R2FtZSIsIkZsYXBweUJpcmQiLCJJY29ucyIsImljb25zIiwiaGFuZGxlRG91YmxlQ2xpY2siLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlSWNvbkNoYW5nZSIsImhhbmRsZUljb25EZWxldGUiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJuYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsIm1hcCIsIkpTT04iLCJwYXJzZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInN0cmluZ2lmeSIsInRvZ2dsZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImNoZWNrZWRFbCIsImtleSIsImxlbmd0aCIsImRldGFpbCIsInByZXZJY29uSW5kZXgiLCJmaW5kSW5kZXgiLCJuZXdJY29ucyIsImZpbHRlciIsIkljb24iLCJpY29uc3JjIiwiTm90ZVBhZCIsImNvbnRlbnQiLCJoYW5kbGVTYXZlIiwiaGFuZGxlTG9jYWxTYXZlIiwiaGFuZGxlRGVsZXRlIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJub3RlUGFkRGF0YSIsImdldE5vdGVQYWREYXRhIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwibGluayIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG93bmxvYWQiLCJjbGljayIsInN0b3BQcm9wYWdhdGlvbiIsImFsZXJ0IiwiaWNvbkNoYW5nZUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZXJyIiwiY29uZmlybSIsImljb25EZWxldGVFdmVudCIsInRyaW0iLCJwcm9tcHQiLCJOdW1iZXIiLCJkaXNhYmxlIiwiYnV0dG9ucyIsInNsb3RzIiwidGV4dCIsIm9uQ2xpY2siLCJub3RlcGFkIiwiYnViYmxlcyIsImFjYyIsImN1ciIsIk5vdGVQYWRIZWFkZXIiLCJpbm5lclRleHQiLCJidXR0b24iLCJzbG90Iiwidmlld0J1dHRvbiIsImVkaXRCdXR0b24iLCJzdWIiLCJjbGlja1ZpZXdCdXR0b24iLCJjbGlja0VkaXRCdXR0b24iLCJjbG9zZVBvcHVwIiwicGFyZW50RWxlbWVudCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInNsb3RJZCIsImNhbGwiLCJ0b2dnbGVQb3B1cCIsInBvcHVwIiwicmVtb3ZlIiwiYWRkIiwiQkxPQ0tTIiwiSSIsIkoiLCJMIiwiTyIsIlMiLCJUIiwiWiIsIkJMT0NLX0NMQVNTRVMiLCJTQ09SRVMiLCJCT0FSRF9XSURUSCIsIktFWV9BQ1RJT05TIiwiTWFwIiwiY3JlYXRlU2h1ZmZsZUJsb2NrUXVldWUiLCJibG9ja3MiLCJPYmplY3QiLCJzb3J0IiwiTWF0aCIsInJhbmRvbSIsImdldEluaXRpYWxEYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJBcnJheSIsImZyb20iLCJmaWxsIiwiRlJFRVpFIiwiQ1JFQVRFX05FV19CTE9DSyIsIlRldHJvbWlubyIsInN0YXRpYyIsIiRwbGF5Z3JvdW5kIiwiY3JlYXRlQmxvY2siLCIkYm9hcmQiLCJibG9ja1F1ZXVlIiwib2JzZXJ2ZXJzIiwiY3JlYXRlTmV3QmxvY2siLCJzdWJzY3JpYmUiLCJldmVudCIsIm9ic2VydmVyIiwicHVzaCIsIm5vdGlmeSIsInVuc3Vic2NyaWJlIiwibyIsImdldE5leHRUZXRyb21pbm9zIiwic2xpY2UiLCJibG9jayIsInNoaWZ0IiwiY29uY2F0IiwiaW5pdGlhbEJsb2NrUG9zIiwiZmlyc3ROb25FbXB0eVJvd0luZGV4Iiwicm93Iiwic29tZSIsImNlbGwiLCJ4IiwiZmxvb3IiLCJ5IiwiZ2V0SW5pdGlhbEJsb2NrUG9zIiwicm90YXRlIiwicm90YXRlZEJsb2NrIiwiXyIsImkiLCJyZXZlcnNlIiwicm90YXRlZFdpZHRoIiwicm90YXRlZEhlaWdodCIsIm5ld1giLCJuZXdZIiwiY2FuTW92ZSIsIm1vdmVMZWZ0IiwibW92ZVJpZ2h0IiwibW92ZURvd24iLCJmcmVlemUiLCJzdG9wR2FtZSIsImNvbCIsImoiLCJuZXh0WCIsIm5leHRZIiwiY2xvbmUiLCJjbG9uZWQiLCJUZXRyaXNCb2FyZCIsInN0YXJ0IiwidGV0cm9taW5vIiwibGFzdFRpbWUiLCJkcm9wSW50ZXJ2YWwiLCJ0ZXRyb21pbm9Db3VudGVyIiwiYW5pbWF0aW9uSWQiLCJrZXlTdGF0ZSIsIlNldCIsImluY3JlYXNlRHJvcFNwZWVkIiwicmVtb3ZlRnVsbFJvd3MiLCJ1cGRhdGVCb2FyZCIsImtleWRvd25IYW5kbGVyIiwia2V5dXBIYW5kbGVyIiwicGVyZm9ybWFuY2UiLCJub3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkcm9wQmxvY2siLCJ0aW1lc3RhbXAiLCJwcmV2VGV0cm9taW5vIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJoYW5kbGVLZXlzIiwiaGFzIiwicmVtb3ZlT2xkQmxvY2siLCJwdXROZXdCbG9jayIsImV2ZXJ5Iiwic3BsaWNlIiwidW5zaGlmdCIsInNjb3JlVXAiLCJUZXRyaXNQcmV2aWV3IiwiVGV0cmlzUGxheWdyb3VuZCIsInF1ZXVlTWljcm90YXNrIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiXSwic291cmNlUm9vdCI6IiJ9