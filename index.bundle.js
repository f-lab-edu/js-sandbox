(()=>{"use strict";var e="/js-sandbox/";const t=new class{db;constructor(e,t,i){this.dbName=e,this.dbVersion=t,this.stores=i}async openDB(){return new Promise(((e,t)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,e()},i.onerror=e=>{t(e)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((e=>{this.db.objectStoreNames.contains(e)&&this.db.deleteObjectStore(e),this.db.createObjectStore(e,{keyPath:"id"})}))}}))}async getData(e,t){return new Promise(((i,n)=>{const s=this.db.transaction(e,"readonly").objectStore(e).get(t);s.onsuccess=()=>{i(s.result)},s.onerror=e=>{n(e)}}))}async getAllData(e){return new Promise(((t,i)=>{const n=this.db.transaction(e,"readonly").objectStore(e).getAll();n.onsuccess=()=>{t(n.result)},n.onerror=e=>{i(e)}}))}async upsertData(e,t){return new Promise(((i,n)=>{const s=this.db.transaction(e,"readwrite").objectStore(e),a={...t,id:t.id||(new Date).getTime()},o=s.put(a);o.onsuccess=()=>{i(o.result)},o.onerror=()=>{console.log(o.error),n(o.error)}}))}async deleteData(e,t){return new Promise(((i,n)=>{const s=this.db.transaction(e,"readwrite").objectStore(e).delete(t);s.onsuccess=()=>{i(!0)},s.onerror=e=>{n(e)}}))}}("sandboxDB",2,["notepad"]),i=(e,...t)=>String.raw(e,...t);class n extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class s extends n{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const a=e+"2a583f97b153f7da7d41.png",o="/js-sandbox",c=[{path:"/",html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:e+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:e+"39b884119b49599495ed.png"},{path:"/notepad",html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:a},{path:"/notepad/:id",html:i`<my-notepad data-id=":id"></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null}],l=c.reduce(((e,t)=>{const{path:i,label:n,iconSrc:s}=t;return t.iconSrc?[...e,{path:i,label:n,iconSrc:s}]:e}),[]),r=async()=>[...(await t.getAllData("notepad")).reduce(((e,t)=>{const{id:i,title:n}=t;return[...e,{path:`/notepad/${i}`,label:n,iconSrc:a}]}),[])],d=c,h=new class{constructor(e){this.routes=e}pathToRegexp(e){return new RegExp(`^${e.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const e=window.location.pathname,t=this.routes.find((t=>this.pathToRegexp(this.getUrlFrom(t.path)).test(e)));t?document.querySelector("#page").innerHTML=t.html.replace(":id",this.getIdFromPath(e)):this.replaceTo("/")}getIdFromPath(e){return e.match(/\d+/)?.[0]}navigateTo(e){this.getUrlFrom(e)!==window.location.pathname&&(window.history.pushState(null,null,o+e),this.render())}replaceTo(e){window.history.replaceState(null,null,o+e),this.render()}getUrlFrom(e){return`${o}${e}`}back(){window.history.back(),this.render()}}(d),p=e+"59cb65e4f8f2627d6c2c.png",u=e+"bc8d31a2338dd0b3f68a.png";class b extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${p} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${u} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${l.map((e=>i` <my-icon data-path="${e.path}" data-iconSrc="${e.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");h.navigateTo(t.dataset.path)}}class m extends n{}class y extends n{injectHTML(){return i`
      <h1>Tetris</h1>
      <p>You are viewing the Tetris component!</p>
    `}}class g extends n{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class v extends n{async connectedCallback(){this.icons=[...l,...await r()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange),this.addEventListener("iconDelete",this.handleIconDelete)}static get observedAttributes(){return["icons"]}attributeChangedCallback(e,t,i){t!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((e=>i`
            <my-icon data-path=${e.path} data-label=${e.label} data-iconSrc=${e.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(e){this.setAttribute("icons",JSON.stringify(e))}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");t.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((e=>{e!==t&&e.removeAttribute("checked")}))}handleDoubleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");h.navigateTo(t.dataset.path)}handleKeyDown(e){const t=this.querySelectorAll("my-icon[checked]");if("Enter"===e.key){if(t.length>1)return;if(!t)return;h.navigateTo(t[0].dataset.path)}}handleIconChange(e){const{path:t,label:i,iconSrc:n}=e.detail,s=this.icons.findIndex((e=>e.path===t));if(-1===s)this.icons=[...this.icons,{path:t,label:i,iconSrc:n}];else{const e=[...this.icons];e[s]={path:t,label:i,iconSrc:n},this.icons=e}}handleIconDelete(e){const{path:t}=e.detail;this.icons=this.icons.filter((e=>e.path!==t))}}class k extends n{injectHTML(){const{label:e,iconsrc:t}=this.dataset;return i`
      <img alt="${e}_icon" src=${t} />
      ${e?`<span class="icon_name">${e}</span>`:""}
    `}}class w extends n{async connectedCallback(){this.data=await t.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave),this.addEventListener("delete",this.handleDelete)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave),this.removeEventListener("delete",this.handleDelete)}injectHTML(){const{title:e,content:t}=this.data;return i`
      <my-notepad-header title=${e}></my-notepad-header>
      <textarea>${t}</textarea>
    `}handleLocalSave(e){e.preventDefault();const t=this.getNotePadData();if(!t)return;const i=new Blob([t.content],{type:"text/plain"}),n=document.createElement("a");n.href=URL.createObjectURL(i),n.download=`${t.title}.txt`,n.click()}async handleSave(e){e.stopPropagation();const i=this.getNotePadData();if(i)try{const e=await t.upsertData("notepad",i),n=`/notepad/${e}`;alert("저장되었습니다.");const s=new CustomEvent("iconChange",{detail:{path:n,label:i.title,iconSrc:a}});document.querySelector("my-icons").dispatchEvent(s),this.id===e?this.title=i.title.replace(/&nbsp;/g," "):h.navigateTo(n)}catch(e){alert("저장에 실패했습니다.")}}async handleDelete(e){try{if(e.stopPropagation(),!window.confirm("정말 삭제하시겠습니까?"))return;await t.deleteData("notepad",this.id),alert("삭제되었습니다.");const i=new CustomEvent("iconDelete",{detail:{path:`/notepad/${this.id}`}});document.querySelector("my-icons").dispatchEvent(i),h.replaceTo("/notepad")}catch(e){alert("삭제에 실패했습니다.")}}getNotePadData(){const e=this.querySelector("textarea").value.trim();if(!e)return alert("내용이 없습니다."),null;let t;for(;!t;)if(!(t=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),t||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:t.trim().replace(/ /g,"&nbsp;"),content:e.replace(/ /g,"&nbsp;")}}get id(){return Number(this.getAttribute("data-id"))}set title(e){this.querySelector("my-notepad-header").setAttribute("title",e)}}const f=!0,S=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],onClick:function(){const e=document.querySelector("my-notepad");e.getAttribute("data-id")?h.navigateTo("/notepad"):e.render()}},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],onClick:function(){document.querySelector("my-notepad").getAttribute("data-id")&&this.dispatchEvent(new CustomEvent("delete",{bubbles:!0}))}},{id:5,text:"페이지 설정(U)...",key:[],disable:f},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:f},{id:7,text:"끝내기(X)",key:[],disable:f}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:f},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:f},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:f},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:f},{id:12,text:"삭제(D)",key:["Del"],disable:f},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:f},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:f},{id:15,text:"다음 찾기(N)",key:["F3"],disable:f},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:f},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:f},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:f},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:f},{id:20,text:"시간/날짜(D)",key:["F5"],disable:f}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:f},{id:22,text:"글꼴(F)...",key:[],disable:f}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:f},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:f},{id:25,text:"상태 표시줄(S)",key:[],disable:f}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:f},{id:27,text:"피드백 보내기(F)",key:[],disable:f},{id:28,text:"메모장 정보(A)",key:[],disable:f}]}],x=S.reduce(((e,t)=>[...e,...t.slots]),[]),C=S;class E extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}static get observedAttributes(){return["title"]}attributeChangedCallback(e,t,i){"title"===e&&t&&(this.querySelector("#title").innerText=i)}injectHTML(){return i`
      <header>
        <span>
          <img alt="notepad_icon" src=${a} />
          <span id="title">${this.title}</span> - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${C.map((e=>i`
              <button class="edit_button">
                ${e.title}(<u>${e.key}</u>)
                <div class="popup">
                  ${e.slots.map((e=>i`
                        <div class="sub" data-id="${e.id}" data-disable="${!!e.disable}">
                          <div>${e.text}</div>
                          ${e.key.length>0?`<div>${e.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(e){const t=e.target.closest(".view_button"),i=e.target.closest(".edit_button"),n=e.target.closest(".sub");t?this.clickViewButton(t):i?this.clickEditButton(i,n):this.closePopup()}clickViewButton(e){switch(e.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":h.back()}}clickEditButton(e,t){if(t){const e=Number(t.dataset.id),{onClick:i}=x.find((t=>t.id===e))||{};i&&i.call(this)}else this.togglePopup(e)}togglePopup(e){const t=e.querySelector(".popup");t.classList.contains("show")?t.classList.remove("show"):(this.closePopup(),t.classList.add("show"))}closePopup(){const e=this.querySelector(".popup.show");e?.classList.remove("show")}get title(){return this.getAttribute("title")}}(async()=>{try{await t.openDB()}catch(e){queueMicrotask((()=>alert("IndexedDB를 사용할 수 없습니다.")))}customElements.define("my-app",s),customElements.define("my-footer",b),customElements.define("my-home",m),customElements.define("my-tetris",y),customElements.define("my-flappybird",g),customElements.define("my-icons",v),customElements.define("my-icon",k),customElements.define("my-notepad",w),customElements.define("my-notepad-header",E)})(),window.addEventListener("load",(()=>h.render())),window.addEventListener("popstate",(()=>h.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,