(()=>{"use strict";var e="/js-sandbox/";const t=new class{db;constructor(e,t,i){this.dbName=e,this.dbVersion=t,this.stores=i}async openDB(){return new Promise(((e,t)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,e()},i.onerror=e=>{t(e)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((e=>{this.db.objectStoreNames.contains(e)&&this.db.deleteObjectStore(e),this.db.createObjectStore(e,{keyPath:"id",autoIncrement:!0})}))}}))}async getData(e,t){return new Promise(((i,n)=>{const s=this.db.transaction(e,"readonly").objectStore(e).get(t);s.onsuccess=()=>{i(s.result)},s.onerror=e=>{n(e)}}))}async getAllData(e){return new Promise(((t,i)=>{const n=this.db.transaction(e,"readonly").objectStore(e).getAll();n.onsuccess=()=>{t(n.result)},n.onerror=e=>{i(e)}}))}async upsertData(e,t){return new Promise(((i,n)=>{const s=this.db.transaction(e,"readwrite").objectStore(e).put(t);s.onsuccess=()=>{i(s.result)},s.onerror=e=>{n(e)}}))}async deleteData(e,t){return new Promise(((i,n)=>{const s=this.db.transaction(e,"readwrite").objectStore(e).delete(t);s.onsuccess=()=>{i(s.result)},s.onerror=e=>{n(e)}}))}}("sandboxDB",2,["notepad"]),i=(e,...t)=>String.raw(e,...t);class n extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class s extends n{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const a=e+"2a583f97b153f7da7d41.png",o=[{path:"/",html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:e+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:e+"39b884119b49599495ed.png"},{path:"/notepad",html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:a}],l=o.reduce(((e,t)=>{const{path:i,label:n,iconSrc:s}=t;return"/"===t.path?e:[...e,{path:i,label:n,iconSrc:s}]}),[]),c=async()=>[...(await t.getAllData("notepad")).reduce(((e,t)=>{const{id:i,title:n}=t;return[...e,{path:`/notepad/${i}`,label:n,iconSrc:a}]}),[])],r=o,d=new class{constructor(e){this.routes=e}render(){const e=this.routes.find((e=>e.path===window.location.pathname.replace("/js-sandbox","")));e?document.querySelector("#page").innerHTML=e.html:this.replaceTo("/")}navigateTo(e){window.history.pushState(null,null,e),this.render()}replaceTo(e){window.history.replaceState(null,null,e),this.render()}back(){window.history.back(),this.render()}}(r),h=e+"59cb65e4f8f2627d6c2c.png",p=e+"bc8d31a2338dd0b3f68a.png";class u extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${h} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${p} class="window_icon" /><input type="text" placeholder="Ï∞æÍ∏∞" />
      </div>
      ${l.map((e=>i` <my-icon data-path="${e.path}" data-iconSrc="${e.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");d.navigateTo(t.dataset.path)}}class b extends n{}class y extends n{injectHTML(){return i`
      <h1>Tetris</h1>
      <p>You are viewing the Tetris component!</p>
    `}}class m extends n{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class k extends n{async connectedCallback(){this.icons=[...l,...await c()],super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this)),this.addEventListener("dblclick",this.handleDoubleClick.bind(this)),this.addEventListener("keydown",this.handleKeyDown.bind(this)),this.addEventListener("iconChange",(e=>{this.icons=[...this.icons,e.detail]}))}static get observedAttributes(){return["icons"]}attributeChangedCallback(e,t,i){t!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((e=>i`
            <my-icon data-path=${e.path} data-label=${e.label} data-iconSrc=${e.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(e){this.setAttribute("icons",JSON.stringify(e))}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");t.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((e=>{e!==t&&e.removeAttribute("checked")}))}handleDoubleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");d.navigateTo(t.dataset.path)}handleKeyDown(e){const t=this.querySelectorAll("my-icon[checked]");if("Enter"===e.key){if(t.length>1)return;if(!t)return;d.navigateTo(t[0].dataset.path)}}}class v extends n{injectHTML(){const{label:e,iconsrc:t}=this.dataset;return i`
      <img alt="${e}_icon" src=${t} />
      ${e?`<span class="icon_name">${e}</span>`:""}
    `}}class f extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave)}injectHTML(){return i`
      <my-notepad-header></my-notepad-header>
      <textarea></textarea>
    `}handleLocalSave(){const e=this.getNotePadData();if("fail"!==e)try{const t=new Blob([e.content],{type:"text/plain"}),i=document.createElement("a");i.href=URL.createObjectURL(t),i.download=`${e.title}.txt`,i.click()}catch(e){alert("Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."),console.error(e)}finally{this.querySelector("textarea").value=""}}async handleSave(e){e.stopPropagation();const i=this.getNotePadData();if("fail"!==i)try{const e=await t.upsertData("notepad",{title:i.title,content:i.content});e&&alert("Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§."),document.querySelector("my-icons").dispatchEvent(new CustomEvent("iconChange",{detail:{path:`/notepad/${e}`,label:i.title,iconSrc:a}}))}catch(e){alert("Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."),console.error(e)}finally{this.querySelector("textarea").value=""}}getNotePadData(){const e=this.querySelector("textarea").value;if(!e)return alert("ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§."),"fail";let t=prompt("Ï†ÄÏû•Ìï† ÌååÏùºÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî","Ï†úÎ™©ÏóÜÏùå");for(;null==t||""===t;){if(null===t)return"fail";t=prompt("ÌååÏùºÎ™ÖÏùÄ ÌïÑÏàòÏûÖÎãàÎã§.","Ï†úÎ™©ÏóÜÏùå")}return{title:t,content:e}}}const g=[{id:"file",title:"ÌååÏùº",key:"F",slots:[{id:1,text:"ÏÉàÎ°ú ÎßåÎì§Í∏∞(N)",key:["Ctrl","N"],disable:!0},{id:2,text:"ÎÇ¥ Ïª¥Ìì®ÌÑ∞Ïóê Ï†ÄÏû•(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"Ï†ÄÏû•(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"ÏÇ≠Ï†ú(D)",key:["Ctrl","Shift","S"],disable:!0},{id:5,text:"ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï(U)...",key:[],disable:!0},{id:6,text:"Ïù∏ÏáÑ(P)...",key:["Ctrl","P"],disable:!0},{id:7,text:"ÎÅùÎÇ¥Í∏∞(X)",key:[],disable:!0}]},{id:"edit",title:"Ìé∏Ïßë",key:"E",slots:[{id:8,text:"Ïã§Ìñâ Ï∑®ÏÜå(U)",key:["Ctrl","Z"],disable:!0},{id:9,text:"ÏûòÎùºÎÇ¥Í∏∞(T)",key:["Ctrl","X"],disable:!0},{id:10,text:"Î≥µÏÇ¨(C)",key:["Ctrl","C"],disable:!0},{id:11,text:"Î∂ôÏó¨ÎÑ£Í∏∞(P)",key:["Ctrl","V"],disable:!0},{id:12,text:"ÏÇ≠Ï†ú(D)",key:["Del"],disable:!0},{id:13,text:"BingÏúºÎ°ú Í≤ÄÏÉâ(S)...",key:["Ctrl","E"],disable:!0},{id:14,text:"Ï∞æÍ∏∞(F)...",key:["Ctrl","F"],disable:!0},{id:15,text:"Îã§Ïùå Ï∞æÍ∏∞(N)",key:["F3"],disable:!0},{id:16,text:"Ïù¥Ï†Ñ Ï∞æÍ∏∞(V)",key:["Shift","F3"],disable:!0},{id:17,text:"Î∞îÍæ∏Í∏∞(R)...",key:["Ctrl","H"],disable:!0},{id:18,text:"Ïù¥Îèô(G)...",key:["Ctrl","G"],disable:!0},{id:19,text:"Î™®Îëê ÏÑ†ÌÉù(A)",key:["Ctrl","A"],disable:!0},{id:20,text:"ÏãúÍ∞Ñ/ÎÇ†Ïßú(D)",key:["F5"],disable:!0}]},{id:"format",title:"ÏÑúÏãù",key:"O",slots:[{id:21,text:"ÏûêÎèô Ï§Ñ Î∞îÍøà(W)",key:[],disable:!0},{id:22,text:"Í∏ÄÍº¥(F)...",key:[],disable:!0}]},{id:"view",title:"Î≥¥Í∏∞",key:"V",slots:[{id:23,text:"ÌôïÎåÄÌïòÍ∏∞(Z)",key:["Ctrl","+"],disable:!0},{id:24,text:"Ï∂ïÏÜåÌïòÍ∏∞(X)",key:["Ctrl","-"],disable:!0},{id:25,text:"ÏÉÅÌÉú ÌëúÏãúÏ§Ñ(S)",key:[],disable:!0}]},{id:"help",title:"ÎèÑÏõÄÎßê",key:"H",slots:[{id:26,text:"ÎèÑÏõÄÎßê Î≥¥Í∏∞(H)",key:[],disable:!0},{id:27,text:"ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞(F)",key:[],disable:!0},{id:28,text:"Î©îÎ™®Ïû• Ï†ïÎ≥¥(A)",key:[],disable:!0}]}],w=g.reduce(((e,t)=>[...e,...t.slots]),[]),x=g;class S extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}injectHTML(){return i`
      <header>
        <span><img alt="notepad_icon" src=${a} />Ï†úÎ™©ÏóÜÏùå - Windows Î©îÎ™®Ïû•</span>
        <div class="view_buttons">
          <button class="view_button" id="mini">üóï</button>
          <button class="view_button" id="full">üóñ</button>
          <button class="view_button" id="close">‚Ö©</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${x.map((e=>i`
              <button class="edit_button">
                ${e.title}(<u>${e.key}</u>)
                <div class="popup">
                  ${e.slots.map((e=>i`
                        <div class="sub" data-id="${e.id}" data-disable="${!!e.disable}">
                          <div>${e.text}</div>
                          ${e.key.length>0?`<div>${e.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(e){const t=e.target.closest(".sub");if(t){const e=Number(t.dataset.id),{onClick:i}=w.find((t=>t.id===e))||{};i&&i.call(this)}else switch(e.target.className){case"view_button":(function(e){switch(e.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":d.back()}}).call(this,e.target);break;case"edit_button":(function(e){e.querySelector(".popup").classList.toggle("show"),this.querySelectorAll(".popup").forEach((t=>{t!==e.querySelector(".popup")&&t.classList.remove("show")}))}).call(this,e.target)}}}(async()=>{await t.openDB(),customElements.define("my-app",s),customElements.define("my-footer",u),customElements.define("my-home",b),customElements.define("my-tetris",y),customElements.define("my-flappybird",m),customElements.define("my-icons",k),customElements.define("my-icon",v),customElements.define("my-notepad",f),customElements.define("my-notepad-header",S)})(),window.addEventListener("popstate",(()=>d.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,