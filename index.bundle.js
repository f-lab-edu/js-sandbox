(()=>{"use strict";var e="/js-sandbox/";const t=new class{db;constructor(e,t,n){this.dbName=e,this.dbVersion=t,this.stores=n}async openDB(){return new Promise(((e,t)=>{const n=window.indexedDB.open(this.dbName,this.dbVersion);n.onsuccess=()=>{this.db=n.result,e()},n.onerror=e=>{t(e)},n.onupgradeneeded=()=>{this.db=n.result,this.stores.forEach((e=>{this.db.objectStoreNames.contains(e)&&this.db.deleteObjectStore(e),this.db.createObjectStore(e,{keyPath:"id",autoIncrement:!0})}))}}))}async getData(e,t){return new Promise(((n,i)=>{const a=this.db.transaction(e,"readonly").objectStore(e).get(t);a.onsuccess=()=>{n(a.result)},a.onerror=e=>{i(e)}}))}async getAllData(e){return new Promise(((t,n)=>{const i=this.db.transaction(e,"readonly").objectStore(e).getAll();i.onsuccess=()=>{t(i.result)},i.onerror=e=>{n(e)}}))}async upsertData(e,t){return new Promise(((n,i)=>{const a=this.db.transaction(e,"readwrite").objectStore(e).put(t);a.onsuccess=()=>{n(a.result)},a.onerror=e=>{i(e)}}))}async deleteData(e,t){return new Promise(((n,i)=>{const a=this.db.transaction(e,"readwrite").objectStore(e).delete(t);a.onsuccess=()=>{n(a.result)},a.onerror=e=>{i(e)}}))}}("sandboxDB",2,["notepad"]),n=(e,...t)=>String.raw(e,...t);class i extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class a extends i{injectHTML(){return n`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const s=e+"2a583f97b153f7da7d41.png",l=[{path:"/",html:n`<my-home></my-home>`,label:"Home",iconSrc:null,tag:"my-home"},{path:"/tetris",html:n`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:e+"71c0bea6462001116fcf.png",tag:"my-tetris"},{path:"/flappybird",html:n`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:e+"39b884119b49599495ed.png",tag:"my-flappybird"},{path:"/notepad",html:n`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:s,tag:"my-notepad"},{path:"/notepad/:id",html:n`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null,tag:"my-notepad"}],o=l.reduce(((e,t)=>{const{path:n,label:i,iconSrc:a}=t;return t.iconSrc?[...e,{path:n,label:i,iconSrc:a}]:e}),[]),c=async()=>[...(await t.getAllData("notepad")).reduce(((e,t)=>{const{id:n,title:i}=t;return[...e,{path:`/notepad/${n}`,label:i,iconSrc:s}]}),[])],r=l,d="/js-sandbox",h=new class{constructor(e){this.routes=e}pathToRegexp(e){return new RegExp(`^${e.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const e=this.routes.find((e=>null!==window.location.pathname.replace(d,"").match(this.pathToRegexp(e.path))));if(e){if(e.path.includes("/:id")){const t=window.location.pathname.replace(d,"").match(/\d+/)[0];e.html=e.html.replace(`${e.tag}`,`${e.tag} id="${t}"`)}document.querySelector("#page").innerHTML=e.html}else this.replaceTo("/")}navigateTo(e){window.history.pushState(null,null,d+e),this.render()}replaceTo(e){window.history.replaceState(null,null,d+e),this.render()}back(){window.history.back(),this.render()}}(r),p=e+"59cb65e4f8f2627d6c2c.png",b=e+"bc8d31a2338dd0b3f68a.png";class u extends i{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return n`
      <img alt="window_logo" src=${p} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${b} class="window_icon" /><input type="text" placeholder="Ï∞æÍ∏∞" />
      </div>
      ${o.map((e=>n` <my-icon data-path="${e.path}" data-iconSrc="${e.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");h.navigateTo(t.dataset.path)}}class y extends i{}class m extends i{injectHTML(){return n`
      <h1>Tetris</h1>
      <p>You are viewing the Tetris component!</p>
    `}}class g extends i{injectHTML(){return n`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class k extends i{async connectedCallback(){this.icons=[...o,...await c()],super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this)),this.addEventListener("dblclick",this.handleDoubleClick.bind(this)),this.addEventListener("keydown",this.handleKeyDown.bind(this)),this.addEventListener("iconChange",(e=>{this.icons=[...this.icons,e.detail]}))}static get observedAttributes(){return["icons"]}attributeChangedCallback(e,t,n){t!==n&&this.render()}injectHTML(){return n`
      ${this.icons.map((e=>n`
            <my-icon data-path=${e.path} data-label=${e.label} data-iconSrc=${e.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(e){this.setAttribute("icons",JSON.stringify(e))}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");t.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((e=>{e!==t&&e.removeAttribute("checked")}))}handleDoubleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");h.navigateTo(t.dataset.path)}handleKeyDown(e){const t=this.querySelectorAll("my-icon[checked]");if("Enter"===e.key){if(t.length>1)return;if(!t)return;h.navigateTo(t[0].dataset.path)}}}class v extends i{injectHTML(){const{label:e,iconsrc:t}=this.dataset;return n`
      <img alt="${e}_icon" src=${t} />
      ${e?`<span class="icon_name">${e}</span>`:""}
    `}}class w extends i{async connectedCallback(){this.data=await t.getData("notepad",Number(this.getAttribute("id")))??{title:"Ï†úÎ™©ÏóÜÏùå",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave)}injectHTML(){const{title:e,content:t}=this.data;return n`
      <my-notepad-header title=${e}></my-notepad-header>
      <textarea>${t}</textarea>
    `}handleLocalSave(){const e=this.getNotePadData();if("fail"!==e)try{const t=new Blob([e.content],{type:"text/plain"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download=`${e.title}.txt`,n.click()}catch(e){alert("Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."),console.error(e)}finally{this.querySelector("textarea").value=""}}async handleSave(e){e.stopPropagation();const n=this.getNotePadData();if("fail"!==n)try{const e=await t.upsertData("notepad",{title:n.title.replace(/ /g,"&nbsp;"),content:n.content.replace(/ /g,"&nbsp;").replace(/\n/g,"<br>").replace(/\t/g,"&nbsp;&nbsp;&nbsp;&nbsp;")});e&&alert("Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§."),document.querySelector("my-icons").dispatchEvent(new CustomEvent("iconChange",{detail:{path:`/notepad/${e}`,label:n.title.replace(/ /g,"&nbsp;"),iconSrc:s}}))}catch(e){alert("Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."),console.error(e)}finally{this.querySelector("textarea").value=""}}getNotePadData(){const e=this.querySelector("textarea").value;if(!e)return alert("ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§."),"fail";let t=prompt("Ï†ÄÏû•Ìï† ÌååÏùºÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî","Ï†úÎ™©ÏóÜÏùå");for(;null==t||""===t;){if(null===t)return"fail";t=prompt("ÌååÏùºÎ™ÖÏùÄ ÌïÑÏàòÏûÖÎãàÎã§.","Ï†úÎ™©ÏóÜÏùå")}return{title:t,content:e}}}const f=[{id:"file",title:"ÌååÏùº",key:"F",slots:[{id:1,text:"ÏÉàÎ°ú ÎßåÎì§Í∏∞(N)",key:["Ctrl","N"],disable:!0},{id:2,text:"ÎÇ¥ Ïª¥Ìì®ÌÑ∞Ïóê Ï†ÄÏû•(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"Ï†ÄÏû•(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"ÏÇ≠Ï†ú(D)",key:["Ctrl","Shift","S"],disable:!0},{id:5,text:"ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï(U)...",key:[],disable:!0},{id:6,text:"Ïù∏ÏáÑ(P)...",key:["Ctrl","P"],disable:!0},{id:7,text:"ÎÅùÎÇ¥Í∏∞(X)",key:[],disable:!0}]},{id:"edit",title:"Ìé∏Ïßë",key:"E",slots:[{id:8,text:"Ïã§Ìñâ Ï∑®ÏÜå(U)",key:["Ctrl","Z"],disable:!0},{id:9,text:"ÏûòÎùºÎÇ¥Í∏∞(T)",key:["Ctrl","X"],disable:!0},{id:10,text:"Î≥µÏÇ¨(C)",key:["Ctrl","C"],disable:!0},{id:11,text:"Î∂ôÏó¨ÎÑ£Í∏∞(P)",key:["Ctrl","V"],disable:!0},{id:12,text:"ÏÇ≠Ï†ú(D)",key:["Del"],disable:!0},{id:13,text:"BingÏúºÎ°ú Í≤ÄÏÉâ(S)...",key:["Ctrl","E"],disable:!0},{id:14,text:"Ï∞æÍ∏∞(F)...",key:["Ctrl","F"],disable:!0},{id:15,text:"Îã§Ïùå Ï∞æÍ∏∞(N)",key:["F3"],disable:!0},{id:16,text:"Ïù¥Ï†Ñ Ï∞æÍ∏∞(V)",key:["Shift","F3"],disable:!0},{id:17,text:"Î∞îÍæ∏Í∏∞(R)...",key:["Ctrl","H"],disable:!0},{id:18,text:"Ïù¥Îèô(G)...",key:["Ctrl","G"],disable:!0},{id:19,text:"Î™®Îëê ÏÑ†ÌÉù(A)",key:["Ctrl","A"],disable:!0},{id:20,text:"ÏãúÍ∞Ñ/ÎÇ†Ïßú(D)",key:["F5"],disable:!0}]},{id:"format",title:"ÏÑúÏãù",key:"O",slots:[{id:21,text:"ÏûêÎèô Ï§Ñ Î∞îÍøà(W)",key:[],disable:!0},{id:22,text:"Í∏ÄÍº¥(F)...",key:[],disable:!0}]},{id:"view",title:"Î≥¥Í∏∞",key:"V",slots:[{id:23,text:"ÌôïÎåÄÌïòÍ∏∞(Z)",key:["Ctrl","+"],disable:!0},{id:24,text:"Ï∂ïÏÜåÌïòÍ∏∞(X)",key:["Ctrl","-"],disable:!0},{id:25,text:"ÏÉÅÌÉú ÌëúÏãúÏ§Ñ(S)",key:[],disable:!0}]},{id:"help",title:"ÎèÑÏõÄÎßê",key:"H",slots:[{id:26,text:"ÎèÑÏõÄÎßê Î≥¥Í∏∞(H)",key:[],disable:!0},{id:27,text:"ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞(F)",key:[],disable:!0},{id:28,text:"Î©îÎ™®Ïû• Ï†ïÎ≥¥(A)",key:[],disable:!0}]}],x=f.reduce(((e,t)=>[...e,...t.slots]),[]),S=f;class C extends i{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}injectHTML(){return n`
      <header>
        <span>
          <img alt="notepad_icon" src=${s} />
          ${this.title} - Windows Î©îÎ™®Ïû•
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">üóï</button>
          <button class="view_button" id="full">üóñ</button>
          <button class="view_button" id="close">‚Ö©</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${S.map((e=>n`
              <button class="edit_button">
                ${e.title}(<u>${e.key}</u>)
                <div class="popup">
                  ${e.slots.map((e=>n`
                        <div class="sub" data-id="${e.id}" data-disable="${!!e.disable}">
                          <div>${e.text}</div>
                          ${e.key.length>0?`<div>${e.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(e){const t=e.target.closest(".sub");if(t){const e=Number(t.dataset.id),{onClick:n}=x.find((t=>t.id===e))||{};n&&n.call(this)}else switch(e.target.className){case"view_button":(function(e){switch(e.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":h.back()}}).call(this,e.target);break;case"edit_button":(function(e){e.querySelector(".popup").classList.toggle("show"),this.querySelectorAll(".popup").forEach((t=>{t!==e.querySelector(".popup")&&t.classList.remove("show")}))}).call(this,e.target)}}get title(){return this.getAttribute("title")}}(async()=>{await t.openDB(),customElements.define("my-app",a),customElements.define("my-footer",u),customElements.define("my-home",y),customElements.define("my-tetris",m),customElements.define("my-flappybird",g),customElements.define("my-icons",k),customElements.define("my-icon",v),customElements.define("my-notepad",w),customElements.define("my-notepad-header",C)})(),window.addEventListener("load",(()=>h.render())),window.addEventListener("popstate",(()=>h.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,