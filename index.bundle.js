(()=>{"use strict";var e="/js-sandbox/";const t=new class{db;constructor(e,t,n){this.dbName=e,this.dbVersion=t,this.stores=n}async openDB(){return new Promise(((e,t)=>{const n=window.indexedDB.open(this.dbName,this.dbVersion);n.onsuccess=()=>{this.db=n.result,e()},n.onerror=e=>{t(e)},n.onupgradeneeded=()=>{this.db=n.result,this.stores.forEach((e=>{this.db.objectStoreNames.contains(e)||this.db.createObjectStore(e,{keyPath:"id"})}))}}))}async getData(e,t){return new Promise(((n,s)=>{const a=this.db.transaction(e,"readonly").objectStore(e).get(t);a.onsuccess=()=>{n(a.result)},a.onerror=e=>{s(e)}}))}async getAllData(e){return new Promise(((t,n)=>{const s=this.db.transaction(e,"readonly").objectStore(e).getAll();s.onsuccess=()=>{t(s.result)},s.onerror=e=>{n(e)}}))}async upsertData(e,t){return new Promise(((n,s)=>{const a=this.db.transaction(e,"readwrite").objectStore(e).put(t);a.onsuccess=()=>{n(a.result)},a.onerror=e=>{s(e)}}))}async deleteData(e,t){return new Promise(((n,s)=>{const a=this.db.transaction(e,"readwrite").objectStore(e).delete(t);a.onsuccess=()=>{n(a.result)},a.onerror=e=>{s(e)}}))}}("sandbox",1,["notes"]),n=(e,...t)=>String.raw(e,...t);class s extends HTMLElement{constructor(){super(),this.template=document.createElement("template"),this.getShadowStyle()&&this.getShadowHTML()?(this.attachShadow({mode:"open"}),this.template.innerHTML=n`
        <style>
          ${this.getShadowStyle()}
        </style>
        ${this.getShadowHTML()}
      `):this.template.innerHTML=this.getHTML()}connectedCallback(){this.render()}render(){this.shadowRoot?this.shadowRoot.append(this.template.content.cloneNode(!0)):this.append(this.template.content.cloneNode(!0))}getHTML(){return""}getShadowStyle(){return""}getShadowHTML(){return""}}const a=e+"2a583f97b153f7da7d41.png",i=[{path:"/",html:n`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:n`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:e+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:n`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:e+"39b884119b49599495ed.png"},{path:"/notepad",html:n`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:a}],o=i.reduce(((e,t)=>{const{path:n,label:s,iconSrc:a}=t;return"/"===t.path?e:[...e,{path:n,label:s,iconSrc:a}]}),[]),l=i,r=new class{constructor(e){this.routes=e}render(){const e=this.routes.find((e=>e.path===window.location.pathname));e?document.querySelector("#page").innerHTML=e.html:this.replaceTo("/")}navigateTo(e){window.history.pushState(null,null,e),this.render()}replaceTo(e){window.history.replaceState(null,null,e),this.render()}back(){window.history.back(),this.render()}}(l),d=[{id:"file",title:"ÌååÏùº",key:"F",slots:[{text:"ÏÉàÎ°ú&nbsp;ÎßåÎì§Í∏∞(N)",key:["Ctrl","N"],disable:!0},{text:"ÏÉà&nbsp;Ï∞Ω(W)",key:["Ctrl","Shift","N"],disable:!0},{text:"Ï†ÄÏû•(S)",key:["Ctrl","S"]},{text:"ÏÇ≠Ï†ú(D)",key:["Ctrl","Shift","S"],disable:!0},{text:"ÌéòÏù¥ÏßÄ&nbsp;ÏÑ§Ï†ï(U)...",key:[],disable:!0},{text:"Ïù∏ÏáÑ(P)...",key:["Ctrl","P"],disable:!0},{text:"ÎÅùÎÇ¥Í∏∞(X)",key:[],disable:!0}]},{id:"edit",title:"Ìé∏Ïßë",key:"E",slots:[{text:"Ïã§Ìñâ&nbsp;Ï∑®ÏÜå(U)",key:["Ctrl","Z"],disable:!0},{text:"ÏûòÎùºÎÇ¥Í∏∞(T)",key:["Ctrl","X"],disable:!0},{text:"Î≥µÏÇ¨(C)",key:["Ctrl","C"],disable:!0},{text:"Î∂ôÏó¨ÎÑ£Í∏∞(P)",key:["Ctrl","V"],disable:!0},{text:"ÏÇ≠Ï†ú(D)",key:["Del"],disable:!0},{text:"BingÏúºÎ°ú&nbsp;Í≤ÄÏÉâ(S)...",key:["Ctrl","E"],disable:!0},{text:"Ï∞æÍ∏∞(F)...",key:["Ctrl","F"],disable:!0},{text:"Îã§Ïùå&nbsp;Ï∞æÍ∏∞(N)",key:["F3"],disable:!0},{text:"Ïù¥Ï†Ñ&nbsp;Ï∞æÍ∏∞(V)",key:["Shift","F3"],disable:!0},{text:"Î∞îÍæ∏Í∏∞(R)...",key:["Ctrl","H"],disable:!0},{text:"Ïù¥Îèô(G)...",key:["Ctrl","G"],disable:!0},{text:"Î™®Îëê&nbsp;ÏÑ†ÌÉù(A)",key:["Ctrl","A"],disable:!0},{text:"ÏãúÍ∞Ñ/ÎÇ†Ïßú(D)",key:["F5"],disable:!0}]},{id:"format",title:"ÏÑúÏãù",key:"O",slots:[{text:"ÏûêÎèô&nbsp;Ï§Ñ&nbsp;Î∞îÍøà(W)",key:[],disable:!0},{text:"Í∏ÄÍº¥(F)...",key:[],disable:!0}]},{id:"view",title:"Î≥¥Í∏∞",key:"V",slots:[{text:"ÌôïÎåÄÌïòÍ∏∞(Z)",key:["Ctrl","+"],disable:!0},{text:"Ï∂ïÏÜåÌïòÍ∏∞(X)",key:["Ctrl","-"],disable:!0},{text:"ÏÉÅÌÉú&nbsp;ÌëúÏãúÏ§Ñ(S)",key:[],disable:!0}]},{id:"help",title:"ÎèÑÏõÄÎßê",key:"H",slots:[{text:"ÎèÑÏõÄÎßê&nbsp;Î≥¥Í∏∞(H)",key:[],disable:!0},{text:"ÌîºÎìúÎ∞±&nbsp;Î≥¥ÎÇ¥Í∏∞(F)",key:[],disable:!0},{text:"Î©îÎ™®Ïû•&nbsp;Ï†ïÎ≥¥(A)",key:[],disable:!0}]}],c=e+"59cb65e4f8f2627d6c2c.png",p=e+"bc8d31a2338dd0b3f68a.png";t.openDB(),customElements.define("my-app",class extends s{constructor(){super(),r.render()}connectedCallback(){super.connectedCallback(),window.addEventListener("popstate",(()=>r.render()))}getHTML(){return n`
      <my-icons slot="icons" tabindex="-1"></my-icons>
      <my-footer slot="footer"></my-footer>
    `}}),customElements.define("my-footer",class extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}getHTML(){return n`
      <img alt="window_logo" src=${c} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${p} class="window_icon" /><input type="text" placeholder="Ï∞æÍ∏∞" />
      </div>
      ${o.map((e=>n` <my-icon data-path="${e.path}" data-iconSrc="${e.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");r.navigateTo(t.dataset.path)}}),customElements.define("my-home",class extends s{}),customElements.define("my-tetris",class extends s{getHTML(){return n`
      <h1>Tetris</h1>
      <p>You are viewing the Tetris component!</p>
    `}}),customElements.define("my-flappybird",class extends s{getHTML(){return n`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}),customElements.define("my-icons",class extends s{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this)),this.addEventListener("dblclick",this.handleDoubleClick.bind(this)),this.addEventListener("keydown",this.handleKeyDown.bind(this))}getHTML(){return n`
      ${o.map((e=>n`
            <my-icon data-path=${e.path} data-label=${e.label} data-iconSrc=${e.iconSrc}></my-icon>
          `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");t.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((e=>{e!==t&&e.removeAttribute("checked")}))}handleDoubleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");r.navigateTo(t.dataset.path)}handleKeyDown(e){const t=this.querySelectorAll("my-icon[checked]");if("Enter"===e.key){if(t.length>1)return;if(!t)return;r.navigateTo(t[0].dataset.path)}}}),customElements.define("my-icon",class extends s{getHTML(){const{label:e,iconsrc:t}=this.dataset;return n`
      <img alt="${e}_icon" src=${t} />
      ${e?`<span class="icon_name">${e}</span>`:""}
    `}}),customElements.define("my-notepad",class extends s{connectedCallback(){super.connectedCallback()}getHTML(){return n`
      <my-notepad-header></my-notepad-header>
      <my-notepad-body></my-notepad-body>
    `}}),customElements.define("my-notepad-header",class extends s{connectedCallback(){super.connectedCallback()}getHTML(){return n`
      <header>
        <span><img alt="notepad_icon" src=${a} />Ï†úÎ™©ÏóÜÏùå - Windows Î©îÎ™®Ïû•</span>
        <div class="view_buttons">
          <button id="mini">üóï</button>
          <button id="full">üóñ</button>
          <button id="close">‚Ö©</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${d.map((e=>n`
                <my-notepad-button
                  id=${e.id}
                  data-title=${e.title}
                  data-key=${e.key}
                  data-slots=${JSON.stringify(e.slots)}
                ></my-notepad-button>
              `)).join("")}
      </div>
    `}}),customElements.define("my-notepad-body",class extends s{getHTML(){return n`<textarea></textarea>`}}),customElements.define("my-notepad-button",class extends s{getHTML(){const{title:e,key:t,slots:s}=this.dataset;return n`
      ${e}(<u>${t}</u>)
      <div class="popup">
        ${JSON.parse(s).map((e=>n`
              <div class="slot" data-disable=${!!e.disable}>
                <div>${e.text}</div>
                ${e.key.length>0?`<div>${e.key.join(" + ")}</div>`:""}
              </div>
            `)).join("")}
      </div>
    `}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,