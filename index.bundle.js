(()=>{"use strict";var t="/js-sandbox/";const e=new class{db;constructor(t,e,i){this.dbName=t,this.dbVersion=e,this.stores=i}async openDB(){return new Promise(((t,e)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,t()},i.onerror=t=>{e(t)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((t=>{this.db.objectStoreNames.contains(t)&&this.db.deleteObjectStore(t),this.db.createObjectStore(t,{keyPath:"id"})}))}}))}async getData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readonly").objectStore(t).get(e);n.onsuccess=()=>{i(n.result)},n.onerror=t=>{s(t)}}))}async getAllData(t){return new Promise(((e,i)=>{const s=this.db.transaction(t,"readonly").objectStore(t).getAll();s.onsuccess=()=>{e(s.result)},s.onerror=t=>{i(t)}}))}async upsertData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t),o={...e,id:e.id||(new Date).getTime()},a=n.put(o);a.onsuccess=()=>{i(a.result)},a.onerror=()=>{console.log(a.error),s(a.error)}}))}async deleteData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t).delete(e);n.onsuccess=()=>{i(!0)},n.onerror=t=>{s(t)}}))}}("sandboxDB",2,["notepad"]),i=(t,...e)=>String.raw(t,...e),s=(t,e)=>new Array(t).fill("").map(e).join("");class n extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class o extends n{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const a=t+"2a583f97b153f7da7d41.png",c="/js-sandbox",r=[{path:`${c}/`,html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:`${c}/tetris`,html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:t+"71c0bea6462001116fcf.png"},{path:`${c}/flappybird`,html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:t+"39b884119b49599495ed.png"},{path:`${c}/notepad`,html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:a},{path:`${c}/notepad/:id`,html:i`<my-notepad id=":id"></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null}],l=r.reduce(((t,e)=>{const{path:i,label:s,iconSrc:n}=e;return e.iconSrc?[...t,{path:i,label:s,iconSrc:n}]:t}),[]),d=async()=>[...(await e.getAllData("notepad")).reduce(((t,e)=>{const{id:i,title:s}=e;return[...t,{path:`/notepad/${i}`,label:s,iconSrc:a}]}),[])],h=r,p=new class{constructor(t){this.routes=t}pathToRegexp(t){return new RegExp(`^${t.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const t=window.location.pathname,e=this.routes.find((e=>(console.log(e.path,t),console.log(this.pathToRegexp(e.path)),this.pathToRegexp(e.path).test(t))));console.log(e),e?document.querySelector("#page").innerHTML=e.html.replace(":id",this.getIdFromPath(t)):this.replaceTo("/")}getIdFromPath(t){return t.match(/\d+/)?.[0]}navigateTo(t){`${c}${t}`!==window.location.pathname&&(window.history.pushState(null,null,c+t),this.render())}replaceTo(t){window.history.replaceState(null,null,c+t),this.render()}back(){window.history.back(),this.render()}}(h),b=t+"59cb65e4f8f2627d6c2c.png",u=t+"bc8d31a2338dd0b3f68a.png";class y extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${b} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${u} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${l.map((t=>i` <my-icon data-path="${t.path}" data-iconSrc="${t.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");p.navigateTo(e.dataset.path)}}class m extends n{}const k={I:[[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[1,0,0],[1,1,1],[0,0,0]],L:[[0,0,1],[1,1,1],[0,0,0]],O:[[1,1],[1,1]],S:[[0,1,1],[1,1,0],[0,0,0]],T:[[0,1,0],[1,1,1],[0,0,0]],Z:[[1,1,0],[0,1,1],[0,0,0]]};class g extends n{constructor(){super(),this.board=(10,Array(20).fill(0).map((()=>Array(10).fill(0))))}connectedCallback(){super.connectedCallback(),this.querySelector("#start-button").addEventListener("click",this.startGame.bind(this))}injectHTML(){return i`
      <button id="start-button">게임 시작</button>
      <div class="board">
        ${this.board.map(((t,e)=>i`
              <ul>
                ${t.map(((t,s)=>i`<li class="cell-${this.board[e][s]}"></li>`)).join("")}
              </ul>
            `)).join("")}
      </div>
      <div>추후 추가될 공간입니다.</div>
    `}static get observedAttributes(){return["board","block","block-pos"]}attributeChangedCallback(t,e,i){if("block-pos"===t){const t=JSON.parse(e),s=JSON.parse(i);this.board=this.getUpdatedBoard(s,t),this.render()}}getUpdatedBoard(t,e){const i=[...this.board];return e&&this.removePrevBlockFromBoard(i,e),this.putNextBlockOnBoard(i,t),i}removePrevBlockFromBoard(t,e){this.block.forEach(((i,s)=>{i.forEach(((i,n)=>{1===i&&(t[e.x+s][e.y+n]=0)}))}))}putNextBlockOnBoard(t,e){this.block.forEach(((i,s)=>{i.forEach(((i,n)=>{t[e.x+s][e.y+n]=i}))}))}startGame(){var t;this.block=(t=k,Object.values(t)[Math.floor(7*Math.random())]),this.blockPos=(10,{x:Math.floor(5),y:0}),document.addEventListener("keydown",this.keydownHandler.bind(this))}keydownHandler(t){"ArrowDown"===t.key?this.blockPos={x:this.blockPos.x+1,y:this.blockPos.y}:"ArrowUp"===t.key?this.blockPos={x:this.blockPos.x-1,y:this.blockPos.y}:"ArrowLeft"===t.key?this.blockPos={x:this.blockPos.x,y:this.blockPos.y-1}:"ArrowRight"===t.key&&(this.blockPos={x:this.blockPos.x,y:this.blockPos.y+1})}get board(){return JSON.parse(this.getAttribute("board"))}set board(t){this.setAttribute("board",JSON.stringify(t))}get block(){return JSON.parse(this.getAttribute("block"))}set block(t){this.setAttribute("block",JSON.stringify(t))}get blockPos(){return JSON.parse(this.getAttribute("block-pos"))}set blockPos(t){this.setAttribute("block-pos",JSON.stringify(t))}}class v extends n{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class w extends n{async connectedCallback(){this.icons=[...l,...await d()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange),this.addEventListener("iconDelete",this.handleIconDelete)}static get observedAttributes(){return["icons"]}attributeChangedCallback(t,e,i){e!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((t=>i`
            <my-icon data-path=${t.path} data-label=${t.label} data-iconSrc=${t.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(t){this.setAttribute("icons",JSON.stringify(t))}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");e.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((t=>{t!==e&&t.removeAttribute("checked")}))}handleDoubleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");p.navigateTo(e.dataset.path)}handleKeyDown(t){const e=this.querySelectorAll("my-icon[checked]");if("Enter"===t.key){if(e.length>1)return;if(!e)return;p.navigateTo(e[0].dataset.path)}}handleIconChange(t){const{path:e,label:i,iconSrc:s}=t.detail,n=this.icons.findIndex((t=>t.path===e));if(-1===n)this.icons=[...this.icons,{path:e,label:i,iconSrc:s}];else{const t=[...this.icons];t[n]={path:e,label:i,iconSrc:s},this.icons=t}}handleIconDelete(t){const{path:e}=t.detail;this.icons=this.icons.filter((t=>t.path!==e))}}class f extends n{injectHTML(){const{label:t,iconsrc:e}=this.dataset;return i`
      <img alt="${t}_icon" src=${e} />
      ${t?`<span class="icon_name">${t}</span>`:""}
    `}}class x extends n{async connectedCallback(){this.data=await e.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave),this.addEventListener("delete",this.handleDelete)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave)}injectHTML(){const{title:t,content:e}=this.data;return i`
      <my-notepad-header title=${t}></my-notepad-header>
      <textarea>${e}</textarea>
    `}handleLocalSave(t){t.preventDefault();const e=this.getNotePadData();if(!e)return;const i=new Blob([e.content],{type:"text/plain"}),s=document.createElement("a");s.href=URL.createObjectURL(i),s.download=`${e.title}.txt`,s.click()}async handleSave(t){try{t.stopPropagation();const i=this.getNotePadData();if(!i)return;const s=await e.upsertData("notepad",i);if(!s)return;const n=`/notepad/${s}`;alert("저장되었습니다.");const o=new CustomEvent("iconChange",{detail:{path:n,label:i.title.replace(/ /g,"&nbsp;"),iconSrc:a}});document.querySelector("my-icons").dispatchEvent(o),router.navigateTo(n)}catch(t){alert("저장에 실패했습니다.")}}async handleDelete(t){try{if(t.stopPropagation(),!window.confirm("정말 삭제하시겠습니까?"))return;await e.deleteData("notepad",this.id),alert("삭제되었습니다.");const i=new CustomEvent("iconDelete",{detail:{path:`/notepad/${this.id}`}});document.querySelector("my-icons").dispatchEvent(i),router.replaceTo("/notepad")}catch(t){alert("삭제에 실패했습니다.")}}getNotePadData(){const t=this.querySelector("textarea").value.trim();if(!t)return alert("내용이 없습니다."),null;let e;for(;!e;)if(!(e=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),e||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:e.trim().replace(/ /g,"&nbsp;"),content:t.replace(/ /g,"&nbsp;").replace(/\n/g,"<br>").replace(/\t/g,"&nbsp;&nbsp;&nbsp;&nbsp;")}}get id(){return Number(this.getAttribute("id"))}}const S=!0,C=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],onClick:function(){const t=this.closest("my-notepad");0!==t.id?p.navigateTo("/notepad"):t.querySelector("textarea").value=""}},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],onClick:function(){0!==this.closest("my-notepad").id&&this.dispatchEvent(new CustomEvent("delete",{bubbles:!0}))}},{id:5,text:"페이지 설정(U)...",key:[],disable:S},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:S},{id:7,text:"끝내기(X)",key:[],disable:S}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:S},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:S},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:S},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:S},{id:12,text:"삭제(D)",key:["Del"],disable:S},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:S},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:S},{id:15,text:"다음 찾기(N)",key:["F3"],disable:S},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:S},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:S},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:S},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:S},{id:20,text:"시간/날짜(D)",key:["F5"],disable:S}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:S},{id:22,text:"글꼴(F)...",key:[],disable:S}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:S},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:S},{id:25,text:"상태 표시줄(S)",key:[],disable:S}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:S},{id:27,text:"피드백 보내기(F)",key:[],disable:S},{id:28,text:"메모장 정보(A)",key:[],disable:S}]}],E=C.reduce(((t,e)=>[...t,...e.slots]),[]),$=C;class L extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}injectHTML(){return i`
      <header>
        <span>
          <img alt="notepad_icon" src=${a} />
          ${this.title} - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${$.map((t=>i`
              <button class="edit_button">
                ${t.title}(<u>${t.key}</u>)
                <div class="popup">
                  ${t.slots.map((t=>i`
                        <div class="sub" data-id="${t.id}" data-disable="${!!t.disable}">
                          <div>${t.text}</div>
                          ${t.key.length>0?`<div>${t.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(t){const e=t.target.closest(".view_button"),i=t.target.closest(".edit_button"),s=t.target.closest(".sub");e?this.clickViewButton(e):i?this.clickEditButton(i,s):this.closePopup()}clickViewButton(t){switch(t.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":p.back()}}clickEditButton(t,e){if(e){const t=Number(e.dataset.id),{onClick:i}=E.find((e=>e.id===t))||{};i&&i.call(this)}else this.togglePopup(t)}togglePopup(t){const e=t.querySelector(".popup");e.classList.contains("show")?e.classList.remove("show"):(this.closePopup(),e.classList.add("show"))}closePopup(){const t=this.querySelector(".popup.show");t?.classList.remove("show")}get title(){return this.getAttribute("title")}get title(){return this.getAttribute("title")}}class P extends n{injectHTML(){return i`
      ${s(20,((t,e)=>i`
            <ul>
              ${s(10,((t,s)=>i`<li>${e}, ${s}</li>`))}
            </ul>
          `))}
    `}}class D extends n{injectHTML(){return i`
      <div>7종의 테트로미노(블록)가 한묶음으로 랜덤하게 등장합니다.</div>
      <div>필드는 20 x 10 입니다.</div>
      <div>X : 시계방향 회전(우회전)</div>
      <div>Z : 반시계방향 회전(좌회전)</div>
    `}}(async()=>{try{await e.openDB()}catch(t){queueMicrotask((()=>alert("IndexedDB를 사용할 수 없습니다.")))}customElements.define("my-app",o),customElements.define("my-footer",y),customElements.define("my-home",m),customElements.define("my-tetris",g),customElements.define("my-flappybird",v),customElements.define("my-icons",w),customElements.define("my-icon",f),customElements.define("my-notepad",x),customElements.define("my-notepad-header",L),customElements.define("my-tetris-board",P),customElements.define("my-tetris-info",D)})(),window.addEventListener("load",(()=>p.render())),window.addEventListener("popstate",(()=>p.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDQSxJQUFJQSxFQ0RvQixlQ2dJeEIsTUFFQSxFQUZrQixJQWhJbEIsTUFDRUMsR0FRQUMsWUFBWUMsRUFBUUMsRUFBV0MsR0FDN0JDLEtBQUtILE9BQVNBLEVBQ2RHLEtBQUtGLFVBQVlBLEVBQ2pCRSxLQUFLRCxPQUFTQSxDQUNoQixDQU1BRSxlQUNFLE9BQU8sSUFBSUMsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVQyxPQUFPQyxVQUFVQyxLQUFLUixLQUFLSCxPQUFRRyxLQUFLRixXQUV4RE8sRUFBUUksVUFBWSxLQUNsQlQsS0FBS0wsR0FBS1UsRUFBUUssT0FDbEJQLEdBQVMsRUFHWEUsRUFBUU0sUUFBV0MsSUFDakJSLEVBQU9RLEVBQUUsRUFHWFAsRUFBUVEsZ0JBQWtCLEtBQ3hCYixLQUFLTCxHQUFLVSxFQUFRSyxPQUVsQlYsS0FBS0QsT0FBT2UsU0FBU0MsSUFDZmYsS0FBS0wsR0FBR3FCLGlCQUFpQkMsU0FBU0YsSUFDcENmLEtBQUtMLEdBQUd1QixrQkFBa0JILEdBRTVCZixLQUFLTCxHQUFHd0Isa0JBQWtCSixFQUFPLENBQUVLLFFBQVMsTUFBTyxHQUNuRCxDQUNILEdBRUwsQ0FRQW5CLGNBQWNvQixFQUFXQyxHQUN2QixPQUFPLElBQUlwQixTQUFRLENBQUNDLEVBQVNDLEtBQzNCLE1BQU1DLEVBQVVMLEtBQUtMLEdBQUc0QixZQUFZRixFQUFXLFlBQVlHLFlBQVlILEdBQVdJLElBQUlILEdBRXRGakIsRUFBUUksVUFBWSxLQUNsQk4sRUFBUUUsRUFBUUssT0FBTyxFQUd6QkwsRUFBUU0sUUFBV0MsSUFDakJSLEVBQU9RLEVBQUUsQ0FDVixHQUVMLENBT0FYLGlCQUFpQm9CLEdBQ2YsT0FBTyxJQUFJbkIsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVTCxLQUFLTCxHQUFHNEIsWUFBWUYsRUFBVyxZQUFZRyxZQUFZSCxHQUFXSyxTQUVsRnJCLEVBQVFJLFVBQVksS0FDbEJOLEVBQVFFLEVBQVFLLE9BQU8sRUFHekJMLEVBQVFNLFFBQVdDLElBQ2pCUixFQUFPUSxFQUFFLENBQ1YsR0FFTCxDQVFBWCxpQkFBaUJvQixFQUFXTSxHQUMxQixPQUFPLElBQUl6QixTQUFRLENBQUNDLEVBQVNDLEtBQzNCLE1BQU1vQixFQUFjeEIsS0FBS0wsR0FBRzRCLFlBQVlGLEVBQVcsYUFBYUcsWUFBWUgsR0FDdEVPLEVBQWUsSUFBS0QsRUFBTUwsR0FBSUssRUFBS0wsS0FBTSxJQUFJTyxNQUFPQyxXQUNwRHpCLEVBQVVtQixFQUFZTyxJQUFJSCxHQUVoQ3ZCLEVBQVFJLFVBQVksS0FDbEJOLEVBQVFFLEVBQVFLLE9BQU8sRUFHekJMLEVBQVFNLFFBQVUsS0FDaEJxQixRQUFRQyxJQUFJNUIsRUFBUTZCLE9BQ3BCOUIsRUFBT0MsRUFBUTZCLE1BQU0sQ0FDdEIsR0FFTCxDQVFBakMsaUJBQWlCb0IsRUFBV0MsR0FDMUIsT0FBTyxJQUFJcEIsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVTCxLQUFLTCxHQUFHNEIsWUFBWUYsRUFBVyxhQUFhRyxZQUFZSCxHQUFXYyxPQUFPYixHQUUxRmpCLEVBQVFJLFVBQVksS0FDbEJOLEdBQVEsRUFBSyxFQUdmRSxFQUFRTSxRQUFXQyxJQUNqQlIsRUFBT1EsRUFBRSxDQUNWLEdBRUwsR0FHOEIsWUFBYSxFQUFHLENBQUMsWUNoSTNDd0IsRUFBWSxDQUFDQyxLQUFXQyxJQUNyQkMsT0FBT0MsSUFBSUgsS0FBV0MsR0FRekJHLEVBQVMsQ0FBQ0MsRUFBT0MsSUFDZCxJQUFJQyxNQUFNRixHQUFPRyxLQUFLLElBQUlDLElBQUlILEdBQVVJLEtBQUssSUNWdkMsTUFBTUMsVUFBcUJDLFlBQ3hDQyxvQkFDRWxELEtBQUttRCxRQUNQLENBRUFBLFNBQ0VuRCxLQUFLb0QsVUFBWXBELEtBQUtxRCxZQUN4QixDQUVBQSxhQUNFLE1BQU8sRUFDVCxFQ1JhLE1BQU1DLFVBQVlOLEVBQy9CSyxhQUNFLE9BQU8sQ0FBSTs7OztLQUtiLEUscUNDSklFLEVBQXlELGNBRXpEQyxFQUFTLENBQ2IsQ0FDRUMsS0FBTSxHQUFHRixLQUNURyxLQUFNLENBQUksc0JBQ1ZDLE1BQU8sT0FDUEMsUUFBUyxNQUVYLENBQ0VILEtBQU0sR0FBR0YsV0FDVEcsS0FBTSxDQUFJLDBCQUNWQyxNQUFPLFNBQ1BDLFEsOEJBRUYsQ0FDRUgsS0FBTSxHQUFHRixlQUNURyxLQUFNLENBQUksa0NBQ1ZDLE1BQU8sbUJBQ1BDLFEsOEJBRUYsQ0FDRUgsS0FBTSxHQUFHRixZQUNURyxLQUFNLENBQUksNEJBQ1ZDLE1BQU8sZ0JBQ1BDLFFBQVMsR0FFWCxDQUNFSCxLQUFNLEdBQUdGLGdCQUNURyxLQUFNLENBQUkscUNBQ1ZDLE1BQU8sZ0JBQ1BDLFFBQVMsT0FJUEMsRUFBWUwsRUFBT00sUUFBTyxDQUFDQyxFQUFNQyxLQUNyQyxNQUFNLEtBQUVQLEVBQUksTUFBRUUsRUFBSyxRQUFFQyxHQUFZSSxFQUNqQyxPQUFLQSxFQUFPSixRQUNMLElBQUlHLEVBQU0sQ0FBRU4sT0FBTUUsUUFBT0MsWUFESkcsQ0FDYyxHQUN6QyxJQUVHRSxFQUFnQmhFLFNBT2IsV0FObUIsYUFBcUIsWUFDZDZELFFBQU8sQ0FBQ0MsRUFBTUcsS0FDN0MsTUFBTSxHQUFFNUMsRUFBRSxNQUFFNkMsR0FBVUQsRUFDdEIsTUFBTyxJQUFJSCxFQUFNLENBQUVOLEtBQU0sWUFBWW5DLElBQU1xQyxNQUFPUSxFQUFPUCxRQUFTLEdBQVUsR0FDM0UsS0FLTCxJQ0xBLEVBRmUsSUFoRGYsTUFDRWhFLFlBQVl3RSxHQUNWcEUsS0FBS3dELE9BQVNZLENBQ2hCLENBRUFDLGFBQWFaLEdBQ1gsT0FBTyxJQUFJYSxPQUFPLElBQUliLEVBQUtjLFFBQVEsTUFBTyxPQUFPQSxRQUFRLFFBQVMsV0FDcEUsQ0FFQXBCLFNBQ0UsTUFBTXFCLEVBQWNsRSxPQUFPbUUsU0FBU0MsU0FDOUJOLEVBQVFwRSxLQUFLd0QsT0FBT21CLE1BQU1DLElBQzlCNUMsUUFBUUMsSUFBSTJDLEVBQU1uQixLQUFNZSxHQUN4QnhDLFFBQVFDLElBQUlqQyxLQUFLcUUsYUFBYU8sRUFBTW5CLE9BQzdCekQsS0FBS3FFLGFBQWFPLEVBQU1uQixNQUFNb0IsS0FBS0wsTUFFNUN4QyxRQUFRQyxJQUFJbUMsR0FFUEEsRUFLTFUsU0FBU0MsY0FBYyxTQUFTM0IsVUFBWWdCLEVBQU1WLEtBQUthLFFBQVEsTUFBT3ZFLEtBQUtnRixjQUFjUixJQUp2RnhFLEtBQUtpRixVQUFVLElBS25CLENBRUFELGNBQWN2QixHQUNaLE9BQU9BLEVBQUt5QixNQUFNLFNBQVMsRUFDN0IsQ0FFQUMsV0FBV0MsR0FDUSxHQUFHN0IsSUFBVzZCLE1BQ2Q5RSxPQUFPbUUsU0FBU0MsV0FDakNwRSxPQUFPK0UsUUFBUUMsVUFBVSxLQUFNLEtBQU0vQixFQUFXNkIsR0FDaERwRixLQUFLbUQsU0FDUCxDQUVBOEIsVUFBVUcsR0FDUjlFLE9BQU8rRSxRQUFRRSxhQUFhLEtBQU0sS0FBTWhDLEVBQVc2QixHQUNuRHBGLEtBQUttRCxRQUNQLENBRUFxQyxPQUNFbEYsT0FBTytFLFFBQVFHLE9BQ2Z4RixLQUFLbUQsUUFDUCxHQUd3QixHLDhEQzNDWCxNQUFNc0MsVUFBZXpDLEVBQ2xDRSxvQkFDRXdDLE1BQU14QyxvQkFDTmxELEtBQUsyRixpQkFBaUIsUUFBUzNGLEtBQUs0RixZQUFZQyxLQUFLN0YsTUFDdkQsQ0FFQXFELGFBQ0UsT0FBTyxDQUFJO21DQUNvQjs7Z0NBRUg7O1FBRXhCUSxFQUFBLEtBQ01LLEdBQ0csQ0FBSSx3QkFBd0JBLEVBQUtULHVCQUF1QlMsRUFBS04seUJBRXJFYixLQUFLO0tBRVosQ0FFQTZDLFlBQVloRixHQUNWLElBQUtBLEVBQUVrRixPQUFPQyxRQUFRLFdBQVksT0FFbEMsTUFBTTdCLEVBQU90RCxFQUFFa0YsT0FBT0MsUUFBUSxXQUM5QixhQUFrQjdCLEVBQUs4QixRQUFRdkMsS0FDakMsRUM5QmEsTUFBTXdDLFVBQWFqRCxHQ0ZsQyxNQUFNa0QsRUFBUyxDQUNiQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNWLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDVixDQUFDLEVBQUcsRUFBRyxFQUFHLElBRVpDLEVBQUcsQ0FDRCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsSUFFVEMsRUFBRyxDQUNELENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxJQUVUQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEdBQ0osQ0FBQyxFQUFHLElBRU5DLEVBQUcsQ0FDRCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsSUFFVEMsRUFBRyxDQUNELENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxJQUVUQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLEtDM0JJLE1BQU1DLFVBQWUxRCxFQUNsQ3BELGNBQ0U4RixRQUNBMUYsS0FBSzJHLE9ENEJXLEdFcENYL0QsTUZxQ1ksSUVwQ2hCQyxLQUFLLEdBQ0xDLEtBQUksSUFBTUYsTUZrQ0ssSUVsQ1FDLEtBQUssS0RPL0IsQ0FFQUssb0JBQ0V3QyxNQUFNeEMsb0JBQ05sRCxLQUFLK0UsY0FBYyxpQkFBaUJZLGlCQUFpQixRQUFTM0YsS0FBSzRHLFVBQVVmLEtBQUs3RixNQUNwRixDQUVBcUQsYUFDRSxPQUFPLENBQUk7OztVQUdMckQsS0FBSzJHLE1BQ0o3RCxLQUNDLENBQUMrRCxFQUFLQyxJQUFNLENBQUk7O2tCQUVWRCxFQUFJL0QsS0FBSSxDQUFDaUUsRUFBS0MsSUFBTSxDQUFJLG1CQUFtQmhILEtBQUsyRyxNQUFNRyxHQUFHRSxjQUFhakUsS0FBSzs7Z0JBSWxGQSxLQUFLOzs7S0FJZCxDQUVXa0UsZ0NBQ1QsTUFBTyxDQUFDLFFBQVMsUUFBUyxZQUM1QixDQUVBQyx5QkFBeUJDLEVBQU1DLEVBQVVDLEdBQ3ZDLEdBQWEsY0FBVEYsRUFBc0IsQ0FDeEIsTUFBTUcsRUFBU0MsS0FBS0MsTUFBTUosR0FDcEJLLEVBQVNGLEtBQUtDLE1BQU1ILEdBRTFCckgsS0FBSzJHLE1BQVEzRyxLQUFLMEgsZ0JBQWdCRCxFQUFRSCxHQUMxQ3RILEtBQUttRCxRQUNQLENBQ0YsQ0FFQXVFLGdCQUFnQkQsRUFBUUgsR0FDdEIsTUFBTUssRUFBVyxJQUFJM0gsS0FBSzJHLE9BTTFCLE9BSklXLEdBQ0Z0SCxLQUFLNEgseUJBQXlCRCxFQUFVTCxHQUUxQ3RILEtBQUs2SCxvQkFBb0JGLEVBQVVGLEdBQzVCRSxDQUNULENBRUFDLHlCQUF5QkQsRUFBVUwsR0FDakN0SCxLQUFLOEgsTUFBTWhILFNBQVEsQ0FBQytGLEVBQUtDLEtBQ3ZCRCxFQUFJL0YsU0FBUSxDQUFDaUcsRUFBS0MsS0FDSixJQUFSRCxJQUNGWSxFQUFTTCxFQUFPUyxFQUFJakIsR0FBR1EsRUFBT1UsRUFBSWhCLEdBQUssRUFDekMsR0FDQSxHQUVOLENBRUFhLG9CQUFvQkYsRUFBVUYsR0FDNUJ6SCxLQUFLOEgsTUFBTWhILFNBQVEsQ0FBQytGLEVBQUtDLEtBQ3ZCRCxFQUFJL0YsU0FBUSxDQUFDaUcsRUFBS0MsS0FDaEJXLEVBQVNGLEVBQU9NLEVBQUlqQixHQUFHVyxFQUFPTyxFQUFJaEIsR0FBS0QsQ0FBRyxHQUMxQyxHQUVOLENBRUFILFlDbkVlLElBQUNxQixFRG9FZGpJLEtBQUs4SCxPQ3BFU0csRURvRVEvQixFQ25FakJnQyxPQUFPNUYsT0FBTzJGLEdBQVFFLEtBQUtDLE1BQXNCLEVBQWhCRCxLQUFLRSxZRG9FM0NySSxLQUFLc0ksVUQxQ1csR0U5QlgsQ0FBRVAsRUFBR0ksS0FBS0MsTUFBTUcsR0FBWVAsRUFBRyxJRHlFcENsRCxTQUFTYSxpQkFBaUIsVUFBVzNGLEtBQUt3SSxlQUFlM0MsS0FBSzdGLE1BQ2hFLENBRUF3SSxlQUFlNUgsR0FDQyxjQUFWQSxFQUFFNkgsSUFDSnpJLEtBQUtzSSxTQUFXLENBQUVQLEVBQUcvSCxLQUFLc0ksU0FBU1AsRUFBSSxFQUFHQyxFQUFHaEksS0FBS3NJLFNBQVNOLEdBQ3hDLFlBQVZwSCxFQUFFNkgsSUFDWHpJLEtBQUtzSSxTQUFXLENBQUVQLEVBQUcvSCxLQUFLc0ksU0FBU1AsRUFBSSxFQUFHQyxFQUFHaEksS0FBS3NJLFNBQVNOLEdBQ3hDLGNBQVZwSCxFQUFFNkgsSUFDWHpJLEtBQUtzSSxTQUFXLENBQUVQLEVBQUcvSCxLQUFLc0ksU0FBU1AsRUFBR0MsRUFBR2hJLEtBQUtzSSxTQUFTTixFQUFJLEdBQ3hDLGVBQVZwSCxFQUFFNkgsTUFDWHpJLEtBQUtzSSxTQUFXLENBQUVQLEVBQUcvSCxLQUFLc0ksU0FBU1AsRUFBR0MsRUFBR2hJLEtBQUtzSSxTQUFTTixFQUFJLEdBRS9ELENBRUlyQixZQUNGLE9BQU9ZLEtBQUtDLE1BQU14SCxLQUFLMEksYUFBYSxTQUN0QyxDQUVJL0IsVUFBTS9CLEdBQ1I1RSxLQUFLMkksYUFBYSxRQUFTcEIsS0FBS3FCLFVBQVVoRSxHQUM1QyxDQUVJa0QsWUFDRixPQUFPUCxLQUFLQyxNQUFNeEgsS0FBSzBJLGFBQWEsU0FDdEMsQ0FFSVosVUFBTWxELEdBQ1I1RSxLQUFLMkksYUFBYSxRQUFTcEIsS0FBS3FCLFVBQVVoRSxHQUM1QyxDQUVJMEQsZUFDRixPQUFPZixLQUFLQyxNQUFNeEgsS0FBSzBJLGFBQWEsYUFDdEMsQ0FFSUosYUFBUzFELEdBQ1g1RSxLQUFLMkksYUFBYSxZQUFhcEIsS0FBS3FCLFVBQVVoRSxHQUNoRCxFRWxIYSxNQUFNaUUsVUFBbUI3RixFQUN0Q0ssYUFDRSxPQUFPLENBQUk7Ozs7Ozs7O0tBU2IsRUNUYSxNQUFNeUYsVUFBYzlGLEVBQ2pDL0MsMEJBQ0VELEtBQUsrSSxNQUFRLElBQUlsRixXQUFxQkksS0FDdEN5QixNQUFNeEMsb0JBQ05sRCxLQUFLMkYsaUJBQWlCLFFBQVMzRixLQUFLNEYsYUFDcEM1RixLQUFLMkYsaUJBQWlCLFdBQVkzRixLQUFLZ0osbUJBQ3ZDaEosS0FBSzJGLGlCQUFpQixVQUFXM0YsS0FBS2lKLGVBQ3RDakosS0FBSzJGLGlCQUFpQixhQUFjM0YsS0FBS2tKLGtCQUN6Q2xKLEtBQUsyRixpQkFBaUIsYUFBYzNGLEtBQUttSixpQkFDM0MsQ0FFV2xDLGdDQUNULE1BQU8sQ0FBQyxRQUNWLENBRUFDLHlCQUF5QkMsRUFBTUMsRUFBVUMsR0FDbkNELElBQWFDLEdBQ2pCckgsS0FBS21ELFFBQ1AsQ0FFQUUsYUFDRSxPQUFPLENBQUk7UUFDUHJELEtBQUsrSSxNQUNKakcsS0FBS29CLEdBQ0csQ0FBSTtpQ0FDWUEsRUFBS1QsbUJBQW1CUyxFQUFLUCxzQkFBc0JPLEVBQUtOO2NBR2hGYixLQUFLO0tBRVosQ0FFSWdHLFlBQ0YsT0FBT3hCLEtBQUtDLE1BQU14SCxLQUFLMEksYUFBYSxTQUN0QyxDQUVJSyxVQUFNbkUsR0FDUjVFLEtBQUsySSxhQUFhLFFBQVNwQixLQUFLcUIsVUFBVWhFLEdBQzVDLENBRUFnQixZQUFZaEYsR0FDVixJQUFLQSxFQUFFa0YsT0FBT0MsUUFBUSxXQUFZLE9BRWxDLE1BQU03QixFQUFPdEQsRUFBRWtGLE9BQU9DLFFBQVEsV0FDOUI3QixFQUFLa0YsZ0JBQWdCLFdBQ3JCcEosS0FBS3FKLGlCQUFpQixXQUFXdkksU0FBU3dJLElBQ3BDQSxJQUFTcEYsR0FDWG9GLEVBQUtDLGdCQUFnQixVQUN2QixHQUVKLENBRUFQLGtCQUFrQnBJLEdBQ2hCLElBQUtBLEVBQUVrRixPQUFPQyxRQUFRLFdBQVksT0FFbEMsTUFBTTdCLEVBQU90RCxFQUFFa0YsT0FBT0MsUUFBUSxXQUM5QixhQUFrQjdCLEVBQUs4QixRQUFRdkMsS0FDakMsQ0FFQXdGLGNBQWNySSxHQUNaLE1BQU00SSxFQUFZeEosS0FBS3FKLGlCQUFpQixvQkFDeEMsR0FBYyxVQUFWekksRUFBRTZILElBQWlCLENBQ3JCLEdBQUllLEVBQVVDLE9BQVMsRUFBRyxPQUMxQixJQUFLRCxFQUFXLE9BQ2hCLGFBQWtCQSxFQUFVLEdBQUd4RCxRQUFRdkMsS0FDekMsQ0FDRixDQUVBeUYsaUJBQWlCdEksR0FDZixNQUFNLEtBQUU2QyxFQUFJLE1BQUVFLEVBQUssUUFBRUMsR0FBWWhELEVBQUU4SSxPQUM3QkMsRUFBZ0IzSixLQUFLK0ksTUFBTWEsV0FBVzFGLEdBQVNBLEVBQUtULE9BQVNBLElBRW5FLElBQXVCLElBQW5Ca0csRUFDRjNKLEtBQUsrSSxNQUFRLElBQUkvSSxLQUFLK0ksTUFBTyxDQUFFdEYsT0FBTUUsUUFBT0MsZ0JBQ3ZDLENBQ0wsTUFBTWlHLEVBQVcsSUFBSTdKLEtBQUsrSSxPQUMxQmMsRUFBU0YsR0FBaUIsQ0FBRWxHLE9BQU1FLFFBQU9DLFdBQ3pDNUQsS0FBSytJLE1BQVFjLENBQ2YsQ0FDRixDQUVBVixpQkFBaUJ2SSxHQUNmLE1BQU0sS0FBRTZDLEdBQVM3QyxFQUFFOEksT0FDbkIxSixLQUFLK0ksTUFBUS9JLEtBQUsrSSxNQUFNZSxRQUFRNUYsR0FBU0EsRUFBS1QsT0FBU0EsR0FDekQsRUN0RmEsTUFBTXNHLFVBQWEvRyxFQUNoQ0ssYUFDRSxNQUFNLE1BQUVNLEVBQUssUUFBRXFHLEdBQVloSyxLQUFLZ0csUUFDaEMsT0FBTyxDQUFJO2tCQUNHckMsZUFBbUJxRztRQUM3QnJHLEVBQVEsMkJBQTJCQSxXQUFpQjtLQUUxRCxFQ0phLE1BQU1zRyxVQUFnQmpILEVBQ25DL0MsMEJBQ0VELEtBQUsyQixXQUFjLFVBQWtCLFVBQVczQixLQUFLc0IsS0FBUSxDQUMzRDZDLE1BQU8sT0FDUCtGLFFBQVMsSUFFWHhFLE1BQU14QyxvQkFDTmxELEtBQUsyRixpQkFBaUIsT0FBUTNGLEtBQUttSyxZQUNuQ25LLEtBQUsyRixpQkFBaUIsWUFBYTNGLEtBQUtvSyxpQkFDeENwSyxLQUFLMkYsaUJBQWlCLFNBQVUzRixLQUFLcUssYUFDdkMsQ0FFQUMsdUJBQ0V0SyxLQUFLdUssb0JBQW9CLE9BQVF2SyxLQUFLbUssWUFDdENuSyxLQUFLdUssb0JBQW9CLFlBQWF2SyxLQUFLb0ssZ0JBQzdDLENBRUEvRyxhQUNFLE1BQU0sTUFBRWMsRUFBSyxRQUFFK0YsR0FBWWxLLEtBQUsyQixLQUNoQyxPQUFPLENBQUk7aUNBQ2tCd0M7a0JBQ2YrRjtLQUVoQixDQUVBRSxnQkFBZ0J4SixHQUNkQSxFQUFFNEosaUJBQ0YsTUFBTUMsRUFBY3pLLEtBQUswSyxpQkFDekIsSUFBS0QsRUFBYSxPQUNsQixNQUFNRSxFQUFPLElBQUlDLEtBQUssQ0FBQ0gsRUFBWVAsU0FBVSxDQUFFVyxLQUFNLGVBQy9DQyxFQUFPaEcsU0FBU2lHLGNBQWMsS0FDcENELEVBQUtFLEtBQU9DLElBQUlDLGdCQUFnQlAsR0FDaENHLEVBQUtLLFNBQVcsR0FBR1YsRUFBWXRHLFlBQy9CMkcsRUFBS00sT0FDUCxDQUVBbkwsaUJBQWlCVyxHQUNmLElBQ0VBLEVBQUV5SyxrQkFDRixNQUFNWixFQUFjekssS0FBSzBLLGlCQUN6QixJQUFLRCxFQUFhLE9BRWxCLE1BQU0vSixRQUFlLGFBQXFCLFVBQVcrSixHQUNyRCxJQUFLL0osRUFBUSxPQUViLE1BQU0rQyxFQUFPLFlBQVkvQyxJQUV6QjRLLE1BQU0sWUFDTixNQUFNQyxFQUFrQixJQUFJQyxZQUFZLGFBQWMsQ0FDcEQ5QixPQUFRLENBQ05qRyxPQUNBRSxNQUFPOEcsRUFBWXRHLE1BQU1JLFFBQVEsS0FBTSxVQUN2Q1gsUUFBUyxLQUdia0IsU0FBU0MsY0FBYyxZQUFZMEcsY0FBY0YsR0FDakR2SCxPQUFPbUIsV0FBVzFCLEVBQ3BCLENBQUUsTUFBT2lJLEdBQ1BKLE1BQU0sY0FDUixDQUNGLENBRUFyTCxtQkFBbUJXLEdBQ2pCLElBR0UsR0FGQUEsRUFBRXlLLG1CQUNvQi9LLE9BQU9xTCxRQUFRLGdCQUNqQixhQUVkLGFBQXFCLFVBQVczTCxLQUFLc0IsSUFFM0NnSyxNQUFNLFlBQ04sTUFBTU0sRUFBa0IsSUFBSUosWUFBWSxhQUFjLENBQ3BEOUIsT0FBUSxDQUNOakcsS0FBTSxZQUFZekQsS0FBS3NCLFFBRzNCd0QsU0FBU0MsY0FBYyxZQUFZMEcsY0FBY0csR0FDakQ1SCxPQUFPaUIsVUFBVSxXQUNuQixDQUFFLE1BQU95RyxHQUNQSixNQUFNLGNBQ1IsQ0FDRixDQUVBWixpQkFDRSxNQUNNUixFQURZbEssS0FBSytFLGNBQWMsWUFDWEgsTUFBTWlILE9BQ2hDLElBQUszQixFQUVILE9BREFvQixNQUFNLGFBQ0MsS0FHVCxJQUFJbkgsRUFDSixNQUFRQSxHQUVOLEtBREFBLEVBQVEySCxPQUFPLGNBQWU5TCxLQUFLMkIsS0FBS3dDLE1BQU1JLFFBQVEsVUFBVyxNQUM1REosR0FDbUI3RCxPQUFPcUwsUUFBUSxlQUNqQixPQUFPLEtBSS9CLE1BQU8sQ0FDTHJLLEdBQUl0QixLQUFLc0IsR0FDVDZDLE1BQU9BLEVBQU0wSCxPQUFPdEgsUUFBUSxLQUFNLFVBQ2xDMkYsUUFBU0EsRUFBUTNGLFFBQVEsS0FBTSxVQUFVQSxRQUFRLE1BQU8sUUFBUUEsUUFBUSxNQUFPLDRCQUVuRixDQUVJakQsU0FDRixPQUFPeUssT0FBTy9MLEtBQUswSSxhQUFhLE1BQ2xDLEVDakhGLE1BQU1zRCxHQUFVLEVBRVZDLEVBQVUsQ0FDZCxDQUNFM0ssR0FBSSxPQUNKNkMsTUFBTyxLQUNQc0UsSUFBSyxJQUNMeUQsTUFBTyxDQUNMLENBQUU1SyxHQUFJLEVBQUc2SyxLQUFNLFlBQWExRCxJQUFLLENBQUMsT0FBUSxLQUFNMkQsUUFpRnRELFdBQ0UsTUFBTUMsRUFBVXJNLEtBQUsrRixRQUFRLGNBQ1YsSUFBZnNHLEVBQVEvSyxHQUlaLGFBQWtCLFlBSGhCK0ssRUFBUXRILGNBQWMsWUFBWUgsTUFBUSxFQUk5QyxHQXZGTSxDQUFFdEQsR0FBSSxFQUFHNkssS0FBTSxlQUFnQjFELElBQUssQ0FBQyxPQUFRLFFBQVMsS0FBTTJELFFBc0VsRSxXQUNFcE0sS0FBS3lMLGNBQWMsSUFBSUQsWUFBWSxZQUFhLENBQUVjLFNBQVMsSUFDN0QsR0F2RU0sQ0FBRWhMLEdBQUksRUFBRzZLLEtBQU0sUUFBUzFELElBQUssQ0FBQyxPQUFRLEtBQU0yRCxRQWlFbEQsV0FDRXBNLEtBQUt5TCxjQUFjLElBQUlELFlBQVksT0FBUSxDQUFFYyxTQUFTLElBQ3hELEdBbEVNLENBQUVoTCxHQUFJLEVBQUc2SyxLQUFNLFFBQVMxRCxJQUFLLENBQUMsT0FBUSxRQUFTLEtBQU0yRCxRQXdFM0QsV0FFcUIsSUFESHBNLEtBQUsrRixRQUFRLGNBQ2pCekUsSUFDWnRCLEtBQUt5TCxjQUFjLElBQUlELFlBQVksU0FBVSxDQUFFYyxTQUFTLElBQzFELEdBM0VNLENBQUVoTCxHQUFJLEVBQUc2SyxLQUFNLGVBQWdCMUQsSUFBSyxHQUFJdUQsV0FDeEMsQ0FBRTFLLEdBQUksRUFBRzZLLEtBQU0sV0FBWTFELElBQUssQ0FBQyxPQUFRLEtBQU11RCxXQUMvQyxDQUFFMUssR0FBSSxFQUFHNkssS0FBTSxTQUFVMUQsSUFBSyxHQUFJdUQsYUFHdEMsQ0FDRTFLLEdBQUksT0FDSjZDLE1BQU8sS0FDUHNFLElBQUssSUFDTHlELE1BQU8sQ0FDTCxDQUFFNUssR0FBSSxFQUFHNkssS0FBTSxXQUFZMUQsSUFBSyxDQUFDLE9BQVEsS0FBTXVELFdBQy9DLENBQUUxSyxHQUFJLEVBQUc2SyxLQUFNLFVBQVcxRCxJQUFLLENBQUMsT0FBUSxLQUFNdUQsV0FDOUMsQ0FBRTFLLEdBQUksR0FBSTZLLEtBQU0sUUFBUzFELElBQUssQ0FBQyxPQUFRLEtBQU11RCxXQUM3QyxDQUFFMUssR0FBSSxHQUFJNkssS0FBTSxVQUFXMUQsSUFBSyxDQUFDLE9BQVEsS0FBTXVELFdBQy9DLENBQUUxSyxHQUFJLEdBQUk2SyxLQUFNLFFBQVMxRCxJQUFLLENBQUMsT0FBUXVELFdBQ3ZDLENBQUUxSyxHQUFJLEdBQUk2SyxLQUFNLGtCQUFtQjFELElBQUssQ0FBQyxPQUFRLEtBQU11RCxXQUN2RCxDQUFFMUssR0FBSSxHQUFJNkssS0FBTSxXQUFZMUQsSUFBSyxDQUFDLE9BQVEsS0FBTXVELFdBQ2hELENBQUUxSyxHQUFJLEdBQUk2SyxLQUFNLFdBQVkxRCxJQUFLLENBQUMsTUFBT3VELFdBQ3pDLENBQUUxSyxHQUFJLEdBQUk2SyxLQUFNLFdBQVkxRCxJQUFLLENBQUMsUUFBUyxNQUFPdUQsV0FDbEQsQ0FBRTFLLEdBQUksR0FBSTZLLEtBQU0sWUFBYTFELElBQUssQ0FBQyxPQUFRLEtBQU11RCxXQUNqRCxDQUFFMUssR0FBSSxHQUFJNkssS0FBTSxXQUFZMUQsSUFBSyxDQUFDLE9BQVEsS0FBTXVELFdBQ2hELENBQUUxSyxHQUFJLEdBQUk2SyxLQUFNLFdBQVkxRCxJQUFLLENBQUMsT0FBUSxLQUFNdUQsV0FDaEQsQ0FBRTFLLEdBQUksR0FBSTZLLEtBQU0sV0FBWTFELElBQUssQ0FBQyxNQUFPdUQsYUFHN0MsQ0FDRTFLLEdBQUksU0FDSjZDLE1BQU8sS0FDUHNFLElBQUssSUFDTHlELE1BQU8sQ0FDTCxDQUFFNUssR0FBSSxHQUFJNkssS0FBTSxhQUFjMUQsSUFBSyxHQUFJdUQsV0FDdkMsQ0FBRTFLLEdBQUksR0FBSTZLLEtBQU0sV0FBWTFELElBQUssR0FBSXVELGFBR3pDLENBQ0UxSyxHQUFJLE9BQ0o2QyxNQUFPLEtBQ1BzRSxJQUFLLElBQ0x5RCxNQUFPLENBQ0wsQ0FBRTVLLEdBQUksR0FBSTZLLEtBQU0sVUFBVzFELElBQUssQ0FBQyxPQUFRLEtBQU11RCxXQUMvQyxDQUFFMUssR0FBSSxHQUFJNkssS0FBTSxVQUFXMUQsSUFBSyxDQUFDLE9BQVEsS0FBTXVELFdBQy9DLENBQUUxSyxHQUFJLEdBQUk2SyxLQUFNLFlBQWExRCxJQUFLLEdBQUl1RCxhQUcxQyxDQUNFMUssR0FBSSxPQUNKNkMsTUFBTyxNQUNQc0UsSUFBSyxJQUNMeUQsTUFBTyxDQUNMLENBQUU1SyxHQUFJLEdBQUk2SyxLQUFNLFlBQWExRCxJQUFLLEdBQUl1RCxXQUN0QyxDQUFFMUssR0FBSSxHQUFJNkssS0FBTSxhQUFjMUQsSUFBSyxHQUFJdUQsV0FDdkMsQ0FBRTFLLEdBQUksR0FBSTZLLEtBQU0sWUFBYTFELElBQUssR0FBSXVELGNBS3RDRSxFQUFRRCxFQUFRbkksUUFBTyxDQUFDeUksRUFBS0MsSUFDMUIsSUFBSUQsS0FBUUMsRUFBSU4sUUFDdEIsSUFFSCxJQ3BFZSxNQUFNTyxVQUFzQnpKLEVBQ3pDRSxvQkFDRXdDLE1BQU14QyxvQkFDTmxELEtBQUsyRixpQkFBaUIsUUFBUzNGLEtBQUs0RixZQUN0QyxDQUVBMEUsdUJBQ0V0SyxLQUFLdUssb0JBQW9CLFFBQVN2SyxLQUFLNEYsWUFDekMsQ0FFQXZDLGFBQ0UsT0FBTyxDQUFJOzs7d0NBR3lCO1lBQzVCckQsS0FBS21FOzs7Ozs7Ozs7VUFTUCxPQUVHdUksR0FBVyxDQUFJOztrQkFFVkEsRUFBT3ZJLFlBQVl1SSxFQUFPakU7O29CQUV4QmlFLEVBQU9SLE1BQ05wSixLQUNFNkosR0FBUyxDQUFJO29EQUNnQkEsRUFBS3JMLHVCQUF1QnFMLEVBQUtYO2lDQUNwRFcsRUFBS1I7NEJBQ1ZRLEVBQUtsRSxJQUFJZ0IsT0FBUyxFQUFJLFFBQVFrRCxFQUFLbEUsSUFBSTFGLEtBQUssZUFBaUI7OzBCQUlwRUEsS0FBSzs7O2dCQUtmQSxLQUFLOztLQUdkLENBRUE2QyxZQUFZaEYsR0FDVixNQUFNZ00sRUFBYWhNLEVBQUVrRixPQUFPQyxRQUFRLGdCQUM5QjhHLEVBQWFqTSxFQUFFa0YsT0FBT0MsUUFBUSxnQkFDOUIrRyxFQUFNbE0sRUFBRWtGLE9BQU9DLFFBQVEsUUFFekI2RyxFQUNGNU0sS0FBSytNLGdCQUFnQkgsR0FDWkMsRUFDVDdNLEtBQUtnTixnQkFBZ0JILEVBQVlDLEdBRWpDOU0sS0FBS2lOLFlBRVQsQ0FFQUYsZ0JBQWdCSCxHQUNkLE9BQVFBLEVBQVd0TCxJQUNqQixJQUFLLE9BQ0h0QixLQUFLa04sY0FBY0MsVUFBVUMsT0FBTyxjQUNwQyxNQUNGLElBQUssT0FDTCxJQUFLLFFBQ0gsU0FLTixDQUVBSixnQkFBZ0JILEVBQVlDLEdBQzFCLEdBQUlBLEVBQUssQ0FDUCxNQUFNTyxFQUFTdEIsT0FBT2UsRUFBSTlHLFFBQVExRSxLQUM1QixRQUFFOEssR0FBWUYsRUFBTXZILE1BQU1nSSxHQUFTQSxFQUFLckwsS0FBTytMLEtBQVcsQ0FBQyxFQUM3RGpCLEdBQ0ZBLEVBQVFrQixLQUFLdE4sS0FFakIsTUFDRUEsS0FBS3VOLFlBQVlWLEVBRXJCLENBRUFVLFlBQVlWLEdBQ1YsTUFBTVcsRUFBUVgsRUFBVzlILGNBQWMsVUFDbkN5SSxFQUFNTCxVQUFVbE0sU0FBUyxRQUMzQnVNLEVBQU1MLFVBQVVNLE9BQU8sU0FFdkJ6TixLQUFLaU4sYUFDTE8sRUFBTUwsVUFBVU8sSUFBSSxRQUV4QixDQUVBVCxhQUdFLE1BQU1PLEVBQVF4TixLQUFLK0UsY0FBYyxlQUNqQ3lJLEdBQU9MLFVBQVVNLE9BQU8sT0FDMUIsQ0FFSXRKLFlBQ0YsT0FBT25FLEtBQUswSSxhQUFhLFFBQzNCLENBRUl2RSxZQUNGLE9BQU9uRSxLQUFLMEksYUFBYSxRQUMzQixFQ25IYSxNQUFNaUYsVUFBb0IzSyxFQUN2Q0ssYUFDRSxPQUFPLENBQUk7UUFDUFosRUFDQSxJQUNBLENBQUNtTCxFQUFHOUcsSUFDRixDQUFJOztnQkFFRXJFLEVBQU8sSUFBSSxDQUFDb0wsRUFBRzdHLElBQU0sQ0FBSSxPQUFPRixNQUFNRTs7O0tBS3BELEVDYmEsTUFBTThHLFVBQW1COUssRUFDdENLLGFBQ0UsT0FBTyxDQUFJOzs7OztLQU1iLEVDSUYsV0FDRSxVQUNRLFVBQ1IsQ0FBRSxNQUFPekMsR0FDUG1OLGdCQUFlLElBQU16QyxNQUFNLDJCQUM3QixDQUVBMEMsZUFBZUMsT0FBTyxTQUFVM0ssR0FDaEMwSyxlQUFlQyxPQUFPLFlBQWF4SSxHQUNuQ3VJLGVBQWVDLE9BQU8sVUFBV2hJLEdBQ2pDK0gsZUFBZUMsT0FBTyxZQUFhdkgsR0FDbkNzSCxlQUFlQyxPQUFPLGdCQUFpQnBGLEdBQ3ZDbUYsZUFBZUMsT0FBTyxXQUFZbkYsR0FDbENrRixlQUFlQyxPQUFPLFVBQVdsRSxHQUNqQ2lFLGVBQWVDLE9BQU8sYUFBY2hFLEdBQ3BDK0QsZUFBZUMsT0FBTyxvQkFBcUJ4QixHQUMzQ3VCLGVBQWVDLE9BQU8sa0JBQW1CTixHQUN6Q0ssZUFBZUMsT0FBTyxpQkFBa0JILEVBQ3pDLEVBbEJELEdBb0JBeE4sT0FBT3FGLGlCQUFpQixRQUFRLElBQU0sYUFDdENyRixPQUFPcUYsaUJBQWlCLFlBQVksSUFBTSxZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvY29yZS9JbmRleGVkREIuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy9jb3JlL1dlYkNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvQXBwLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy91dGlscy9yb3V0ZXMuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL2NvcmUvUm91dGVyLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0NvbW1vbi9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvSG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9UZXRyaXMvY29uc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvVGV0cmlzL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L1RldHJpcy91dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9GbGFwcHlCaXJkL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0NvbW1vbi9JY29ucy5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Db21tb24vSWNvbi5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Ob3RlUGFkL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L05vdGVQYWQvY29uc3QvYnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Ob3RlUGFkL2NvbXBvbmVudHMvTm90ZVBhZEhlYWRlci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9UZXRyaXMvY29tcG9uZW50cy9UZXRyaXNCb2FyZC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9UZXRyaXMvY29tcG9uZW50cy9UZXRyaXNJbmZvLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvanMtc2FuZGJveC9cIjsiLCJjbGFzcyBJbmRleGVkREIge1xyXG4gIGRiO1xyXG5cclxuICAvKipcclxuICAgKiDsg53shLHsnpBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGJOYW1lXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRiVmVyc2lvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHN0b3Jlc1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGRiTmFtZSwgZGJWZXJzaW9uLCBzdG9yZXMpIHtcclxuICAgIHRoaXMuZGJOYW1lID0gZGJOYW1lO1xyXG4gICAgdGhpcy5kYlZlcnNpb24gPSBkYlZlcnNpb247XHJcbiAgICB0aGlzLnN0b3JlcyA9IHN0b3JlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERCIOyYpO2UiCDrqZTshJzrk5xcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBhc3luYyBvcGVuREIoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gd2luZG93LmluZGV4ZWREQi5vcGVuKHRoaXMuZGJOYW1lLCB0aGlzLmRiVmVyc2lvbik7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmRiID0gcmVxdWVzdC5yZXN1bHQ7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmRiID0gcmVxdWVzdC5yZXN1bHQ7XHJcblxyXG4gICAgICAgIHRoaXMuc3RvcmVzLmZvckVhY2goKHN0b3JlKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKHN0b3JlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRiLmRlbGV0ZU9iamVjdFN0b3JlKHN0b3JlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmUsIHsga2V5UGF0aDogJ2lkJyB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog642w7J207YSwIOyhsO2ajCDrqZTshJzrk5xcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn1cclxuICAgKi9cclxuICBhc3luYyBnZXREYXRhKHN0b3JlTmFtZSwgaWQpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWRvbmx5Jykub2JqZWN0U3RvcmUoc3RvcmVOYW1lKS5nZXQoaWQpO1xyXG5cclxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgIHJlamVjdChlKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog642w7J207YSwIOyghOyytCDsobDtmowg66mU7ISc65OcXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlTmFtZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdFtdPn1cclxuICAgKi9cclxuICBhc3luYyBnZXRBbGxEYXRhKHN0b3JlTmFtZSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZG9ubHknKS5vYmplY3RTdG9yZShzdG9yZU5hbWUpLmdldEFsbCgpO1xyXG5cclxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgIHJlamVjdChlKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog642w7J207YSwIOy2lOqwgCDrqZTshJzrk5xcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fVxyXG4gICAqL1xyXG4gIGFzeW5jIHVwc2VydERhdGEoc3RvcmVOYW1lLCBkYXRhKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCBvYmplY3RTdG9yZSA9IHRoaXMuZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZHdyaXRlJykub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuICAgICAgY29uc3QgbW9kaWZpZWREYXRhID0geyAuLi5kYXRhLCBpZDogZGF0YS5pZCB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9O1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gb2JqZWN0U3RvcmUucHV0KG1vZGlmaWVkRGF0YSk7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXF1ZXN0LmVycm9yKTtcclxuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOuNsOydtO2EsCDsgq3soJwg66mU7ISc65OcXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlTmFtZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59XHJcbiAgICovXHJcbiAgYXN5bmMgZGVsZXRlRGF0YShzdG9yZU5hbWUsIGlkKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5kYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkd3JpdGUnKS5vYmplY3RTdG9yZShzdG9yZU5hbWUpLmRlbGV0ZShpZCk7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHNhbmRib3hEQiA9IG5ldyBJbmRleGVkREIoJ3NhbmRib3hEQicsIDIsIFsnbm90ZXBhZCddKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNhbmRib3hEQjtcclxuIiwiY29uc3QgcmVuZGVyUmF3ID0gKHN0cmluZywgLi4udmFsdWVzKSA9PiB7XHJcbiAgcmV0dXJuIFN0cmluZy5yYXcoc3RyaW5nLCAuLi52YWx1ZXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc1xyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKi9cclxuY29uc3QgcmVwZWF0ID0gKHRpbWVzLCBjYWxsYmFjaykgPT4ge1xyXG4gIHJldHVybiBuZXcgQXJyYXkodGltZXMpLmZpbGwoJycpLm1hcChjYWxsYmFjaykuam9pbignJyk7XHJcbn07XHJcblxyXG5leHBvcnQgeyByZW5kZXJSYXcgYXMgaHRtbCwgcmVuZGVyUmF3IGFzIGNzcywgcmVwZWF0IH07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMuaW5qZWN0SFRNTCgpO1xyXG4gIH1cclxuXHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxkaXYgaWQ9XCJwYWdlXCI+PC9kaXY+XHJcbiAgICAgIDxteS1pY29ucyB0YWJpbmRleD1cIi0xXCI+PC9teS1pY29ucz5cclxuICAgICAgPG15LWZvb3Rlcj48L215LWZvb3Rlcj5cclxuICAgIGA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHRldHJpcyBmcm9tICcuLi8uLi9wdWJsaWMvdGV0cmlzLnBuZyc7XHJcbmltcG9ydCBmbGFwcHlCaXJkIGZyb20gJy4uLy4uL3B1YmxpYy9mbGFwcHlCaXJkLnBuZyc7XHJcbmltcG9ydCBub3RlcGFkIGZyb20gJy4uLy4uL3B1YmxpYy9ub3RlcGFkLnBuZyc7XHJcbmltcG9ydCBzYW5kYm94REIgZnJvbSAnLi4vY29yZS9JbmRleGVkREInO1xyXG5cclxuY29uc3QgQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/ICcnIDogJy9qcy1zYW5kYm94JztcclxuXHJcbmNvbnN0IHJvdXRlcyA9IFtcclxuICB7XHJcbiAgICBwYXRoOiBgJHtCQVNFX1VSTH0vYCxcclxuICAgIGh0bWw6IGh0bWxgPG15LWhvbWU+PC9teS1ob21lPmAsXHJcbiAgICBsYWJlbDogJ0hvbWUnLFxyXG4gICAgaWNvblNyYzogbnVsbCxcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGg6IGAke0JBU0VfVVJMfS90ZXRyaXNgLFxyXG4gICAgaHRtbDogaHRtbGA8bXktdGV0cmlzPjwvbXktdGV0cmlzPmAsXHJcbiAgICBsYWJlbDogJ1RldHJpcycsXHJcbiAgICBpY29uU3JjOiB0ZXRyaXMsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBgJHtCQVNFX1VSTH0vZmxhcHB5YmlyZGAsXHJcbiAgICBodG1sOiBodG1sYDxteS1mbGFwcHliaXJkPjwvbXktZmxhcHB5YmlyZD5gLFxyXG4gICAgbGFiZWw6ICdGbGFwcHkmbmJzcDtCaXJkJyxcclxuICAgIGljb25TcmM6IGZsYXBweUJpcmQsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBgJHtCQVNFX1VSTH0vbm90ZXBhZGAsXHJcbiAgICBodG1sOiBodG1sYDxteS1ub3RlcGFkPjwvbXktbm90ZXBhZD5gLFxyXG4gICAgbGFiZWw6ICdOb3RlJm5ic3A7UGFkJyxcclxuICAgIGljb25TcmM6IG5vdGVwYWQsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBgJHtCQVNFX1VSTH0vbm90ZXBhZC86aWRgLFxyXG4gICAgaHRtbDogaHRtbGA8bXktbm90ZXBhZCBpZD1cIjppZFwiPjwvbXktbm90ZXBhZD5gLFxyXG4gICAgbGFiZWw6ICdOb3RlJm5ic3A7UGFkJyxcclxuICAgIGljb25TcmM6IG51bGwsXHJcbiAgfSxcclxuXTtcclxuXHJcbmNvbnN0IG1haW5JY29ucyA9IHJvdXRlcy5yZWR1Y2UoKHByZXYsIHJvdXRlcikgPT4ge1xyXG4gIGNvbnN0IHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfSA9IHJvdXRlcjtcclxuICBpZiAoIXJvdXRlci5pY29uU3JjKSByZXR1cm4gcHJldjtcclxuICByZXR1cm4gWy4uLnByZXYsIHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfV07XHJcbn0sIFtdKTtcclxuXHJcbmNvbnN0IGdldExvY2FsSWNvbnMgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3Qgbm90ZXBhZERhdGEgPSBhd2FpdCBzYW5kYm94REIuZ2V0QWxsRGF0YSgnbm90ZXBhZCcpO1xyXG4gIGNvbnN0IG5vdGVwYWRJY29ucyA9IG5vdGVwYWREYXRhLnJlZHVjZSgocHJldiwgaWNvbikgPT4ge1xyXG4gICAgY29uc3QgeyBpZCwgdGl0bGUgfSA9IGljb247XHJcbiAgICByZXR1cm4gWy4uLnByZXYsIHsgcGF0aDogYC9ub3RlcGFkLyR7aWR9YCwgbGFiZWw6IHRpdGxlLCBpY29uU3JjOiBub3RlcGFkIH1dO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIFsuLi5ub3RlcGFkSWNvbnNdO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVzO1xyXG5leHBvcnQgeyBtYWluSWNvbnMsIGdldExvY2FsSWNvbnMsIEJBU0VfVVJMIH07XHJcbiIsImltcG9ydCByb3V0ZXMsIHsgQkFTRV9VUkwgfSBmcm9tICcuLi91dGlscy9yb3V0ZXMnO1xuXG5jbGFzcyBSb3V0ZXIge1xuICBjb25zdHJ1Y3Rvcihyb3V0ZSkge1xuICAgIHRoaXMucm91dGVzID0gcm91dGU7XG4gIH1cblxuICBwYXRoVG9SZWdleHAocGF0aCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGBeJHtwYXRoLnJlcGxhY2UoL1xcLy9nLCAnXFxcXC8nKS5yZXBsYWNlKC86XFx3Ky9nLCAnKC4rKScpfSRgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICBjb25zdCByb3V0ZSA9IHRoaXMucm91dGVzLmZpbmQoKHZhbHVlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyh2YWx1ZS5wYXRoLCBjdXJyZW50UGF0aCk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnBhdGhUb1JlZ2V4cCh2YWx1ZS5wYXRoKSk7XG4gICAgICByZXR1cm4gdGhpcy5wYXRoVG9SZWdleHAodmFsdWUucGF0aCkudGVzdChjdXJyZW50UGF0aCk7XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cocm91dGUpO1xuXG4gICAgaWYgKCFyb3V0ZSkge1xuICAgICAgdGhpcy5yZXBsYWNlVG8oJy8nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGFnZScpLmlubmVySFRNTCA9IHJvdXRlLmh0bWwucmVwbGFjZSgnOmlkJywgdGhpcy5nZXRJZEZyb21QYXRoKGN1cnJlbnRQYXRoKSk7XG4gIH1cblxuICBnZXRJZEZyb21QYXRoKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5tYXRjaCgvXFxkKy8pPy5bMF07XG4gIH1cblxuICBuYXZpZ2F0ZVRvKHVybCkge1xuICAgIGNvbnN0IGJhc2VkVXJsID0gYCR7QkFTRV9VUkx9JHt1cmx9YDtcbiAgICBpZiAoYmFzZWRVcmwgPT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSkgcmV0dXJuO1xuICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBCQVNFX1VSTCArIHVybCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlcGxhY2VUbyh1cmwpIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgQkFTRV9VUkwgKyB1cmwpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBiYWNrKCkge1xuICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG59XG5cbmNvbnN0IHJvdXRlciA9IG5ldyBSb3V0ZXIocm91dGVzKTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIiwiaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IG1haW5JY29ucyB9IGZyb20gJy4uLy4uL3V0aWxzL3JvdXRlcyc7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi4vLi4vY29yZS9Sb3V0ZXInO1xyXG5pbXBvcnQgd2luZG93TG9nbyBmcm9tICcuLi8uLi8uLi9wdWJsaWMvd2luZG93TG9nby5wbmcnO1xyXG5pbXBvcnQgc2VhcmNoSWNvbiBmcm9tICcuLi8uLi8uLi9wdWJsaWMvc2VhcmNoSWNvbi5wbmcnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9vdGVyIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPGltZyBhbHQ9XCJ3aW5kb3dfbG9nb1wiIHNyYz0ke3dpbmRvd0xvZ299IGNsYXNzPVwid2luZG93X2ljb25cIiAvPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5wdXRfYm94XCI+XHJcbiAgICAgICAgPGltZyBhbHQ9XCJzZWFyY2hcIiBzcmM9JHtzZWFyY2hJY29ufSBjbGFzcz1cIndpbmRvd19pY29uXCIgLz48aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIuywvuq4sFwiIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICAke21haW5JY29uc1xyXG4gICAgICAgIC5tYXAoKGljb24pID0+IHtcclxuICAgICAgICAgIHJldHVybiBodG1sYCA8bXktaWNvbiBkYXRhLXBhdGg9XCIke2ljb24ucGF0aH1cIiBkYXRhLWljb25TcmM9XCIke2ljb24uaWNvblNyY31cIj48L215LWljb24+IGA7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuam9pbignJyl9XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2xpY2soZSkge1xyXG4gICAgaWYgKCFlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJykpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpY29uID0gZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpO1xyXG4gICAgcm91dGVyLm5hdmlnYXRlVG8oaWNvbi5kYXRhc2V0LnBhdGgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUgZXh0ZW5kcyBXZWJDb21wb25lbnQge31cclxuIiwiY29uc3QgQkxPQ0tTID0ge1xyXG4gIEk6IFtcclxuICAgIFsxLCAxLCAxLCAxXSxcclxuICAgIFswLCAwLCAwLCAwXSxcclxuICAgIFswLCAwLCAwLCAwXSxcclxuICBdLFxyXG4gIEo6IFtcclxuICAgIFsxLCAwLCAwXSxcclxuICAgIFsxLCAxLCAxXSxcclxuICAgIFswLCAwLCAwXSxcclxuICBdLFxyXG4gIEw6IFtcclxuICAgIFswLCAwLCAxXSxcclxuICAgIFsxLCAxLCAxXSxcclxuICAgIFswLCAwLCAwXSxcclxuICBdLFxyXG4gIE86IFtcclxuICAgIFsxLCAxXSxcclxuICAgIFsxLCAxXSxcclxuICBdLFxyXG4gIFM6IFtcclxuICAgIFswLCAxLCAxXSxcclxuICAgIFsxLCAxLCAwXSxcclxuICAgIFswLCAwLCAwXSxcclxuICBdLFxyXG4gIFQ6IFtcclxuICAgIFswLCAxLCAwXSxcclxuICAgIFsxLCAxLCAxXSxcclxuICAgIFswLCAwLCAwXSxcclxuICBdLFxyXG4gIFo6IFtcclxuICAgIFsxLCAxLCAwXSxcclxuICAgIFswLCAxLCAxXSxcclxuICAgIFswLCAwLCAwXSxcclxuICBdLFxyXG59O1xyXG5cclxuY29uc3QgQk9BUkRfV0lEVEggPSAxMDtcclxuY29uc3QgQk9BUkRfSEVJR0hUID0gMjA7XHJcblxyXG5leHBvcnQgeyBCTE9DS1MsIEJPQVJEX0hFSUdIVCwgQk9BUkRfV0lEVEggfTtcclxuIiwiaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XHJcbmltcG9ydCB7IEJMT0NLUywgQk9BUkRfSEVJR0hULCBCT0FSRF9XSURUSCB9IGZyb20gJy4vY29uc3QnO1xyXG5pbXBvcnQgeyBnZXRCbG9jaywgZ2V0SW5pdGlhbEJsb2NrUG9zLCBnZXRJbml0aWFsQm9hcmQgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRldHJpcyBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5ib2FyZCA9IGdldEluaXRpYWxCb2FyZChCT0FSRF9XSURUSCwgQk9BUkRfSEVJR0hUKTtcclxuICB9XHJcblxyXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgIHRoaXMucXVlcnlTZWxlY3RvcignI3N0YXJ0LWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zdGFydEdhbWUuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxidXR0b24gaWQ9XCJzdGFydC1idXR0b25cIj7qsozsnoQg7Iuc7J6RPC9idXR0b24+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJib2FyZFwiPlxyXG4gICAgICAgICR7dGhpcy5ib2FyZFxyXG4gICAgICAgICAgLm1hcChcclxuICAgICAgICAgICAgKHJvdywgaSkgPT4gaHRtbGBcclxuICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAke3Jvdy5tYXAoKGNvbCwgaikgPT4gaHRtbGA8bGkgY2xhc3M9XCJjZWxsLSR7dGhpcy5ib2FyZFtpXVtqXX1cIj48L2xpPmApLmpvaW4oJycpfVxyXG4gICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIGBcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5qb2luKCcnKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXY+7LaU7ZuEIOy2lOqwgOuQoCDqs7XqsITsnoXri4jri6QuPC9kaXY+XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XHJcbiAgICByZXR1cm4gWydib2FyZCcsICdibG9jaycsICdibG9jay1wb3MnXTtcclxuICB9XHJcblxyXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgIGlmIChuYW1lID09PSAnYmxvY2stcG9zJykge1xyXG4gICAgICBjb25zdCBvbGRQb3MgPSBKU09OLnBhcnNlKG9sZFZhbHVlKTtcclxuICAgICAgY29uc3QgbmV3UG9zID0gSlNPTi5wYXJzZShuZXdWYWx1ZSk7XHJcblxyXG4gICAgICB0aGlzLmJvYXJkID0gdGhpcy5nZXRVcGRhdGVkQm9hcmQobmV3UG9zLCBvbGRQb3MpO1xyXG4gICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0VXBkYXRlZEJvYXJkKG5ld1Bvcywgb2xkUG9zKSB7XHJcbiAgICBjb25zdCBuZXdCb2FyZCA9IFsuLi50aGlzLmJvYXJkXTtcclxuXHJcbiAgICBpZiAob2xkUG9zKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlUHJldkJsb2NrRnJvbUJvYXJkKG5ld0JvYXJkLCBvbGRQb3MpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wdXROZXh0QmxvY2tPbkJvYXJkKG5ld0JvYXJkLCBuZXdQb3MpO1xyXG4gICAgcmV0dXJuIG5ld0JvYXJkO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlUHJldkJsb2NrRnJvbUJvYXJkKG5ld0JvYXJkLCBvbGRQb3MpIHtcclxuICAgIHRoaXMuYmxvY2suZm9yRWFjaCgocm93LCBpKSA9PiB7XHJcbiAgICAgIHJvdy5mb3JFYWNoKChjb2wsIGopID0+IHtcclxuICAgICAgICBpZiAoY29sID09PSAxKSB7XHJcbiAgICAgICAgICBuZXdCb2FyZFtvbGRQb3MueCArIGldW29sZFBvcy55ICsgal0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1dE5leHRCbG9ja09uQm9hcmQobmV3Qm9hcmQsIG5ld1Bvcykge1xyXG4gICAgdGhpcy5ibG9jay5mb3JFYWNoKChyb3csIGkpID0+IHtcclxuICAgICAgcm93LmZvckVhY2goKGNvbCwgaikgPT4ge1xyXG4gICAgICAgIG5ld0JvYXJkW25ld1Bvcy54ICsgaV1bbmV3UG9zLnkgKyBqXSA9IGNvbDtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXJ0R2FtZSgpIHtcclxuICAgIHRoaXMuYmxvY2sgPSBnZXRCbG9jayhCTE9DS1MpO1xyXG4gICAgdGhpcy5ibG9ja1BvcyA9IGdldEluaXRpYWxCbG9ja1BvcyhCT0FSRF9XSURUSCk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlkb3duSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGtleWRvd25IYW5kbGVyKGUpIHtcclxuICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicpIHtcclxuICAgICAgdGhpcy5ibG9ja1BvcyA9IHsgeDogdGhpcy5ibG9ja1Bvcy54ICsgMSwgeTogdGhpcy5ibG9ja1Bvcy55IH07XHJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dVcCcpIHtcclxuICAgICAgdGhpcy5ibG9ja1BvcyA9IHsgeDogdGhpcy5ibG9ja1Bvcy54IC0gMSwgeTogdGhpcy5ibG9ja1Bvcy55IH07XHJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dMZWZ0Jykge1xyXG4gICAgICB0aGlzLmJsb2NrUG9zID0geyB4OiB0aGlzLmJsb2NrUG9zLngsIHk6IHRoaXMuYmxvY2tQb3MueSAtIDEgfTtcclxuICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xyXG4gICAgICB0aGlzLmJsb2NrUG9zID0geyB4OiB0aGlzLmJsb2NrUG9zLngsIHk6IHRoaXMuYmxvY2tQb3MueSArIDEgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBib2FyZCgpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZ2V0QXR0cmlidXRlKCdib2FyZCcpKTtcclxuICB9XHJcblxyXG4gIHNldCBib2FyZCh2YWx1ZSkge1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2JvYXJkJywgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuICB9XHJcblxyXG4gIGdldCBibG9jaygpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZ2V0QXR0cmlidXRlKCdibG9jaycpKTtcclxuICB9XHJcblxyXG4gIHNldCBibG9jayh2YWx1ZSkge1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2Jsb2NrJywgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuICB9XHJcblxyXG4gIGdldCBibG9ja1BvcygpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZ2V0QXR0cmlidXRlKCdibG9jay1wb3MnKSk7XHJcbiAgfVxyXG5cclxuICBzZXQgYmxvY2tQb3ModmFsdWUpIHtcclxuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdibG9jay1wb3MnLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gIH1cclxufVxyXG4iLCJjb25zdCBnZXRJbml0aWFsQm9hcmQgPSAod2lkdGgsIGhlaWdodCkgPT4ge1xyXG4gIHJldHVybiBBcnJheShoZWlnaHQpXHJcbiAgICAuZmlsbCgwKVxyXG4gICAgLm1hcCgoKSA9PiBBcnJheSh3aWR0aCkuZmlsbCgwKSk7XHJcbn07XHJcblxyXG5jb25zdCBnZXRJbml0aWFsQmxvY2tQb3MgPSAod2lkdGgpID0+IHtcclxuICByZXR1cm4geyB4OiBNYXRoLmZsb29yKHdpZHRoIC8gMiksIHk6IDAgfTtcclxufTtcclxuXHJcbmNvbnN0IGdldEJsb2NrID0gKGJsb2NrcykgPT4ge1xyXG4gIHJldHVybiBPYmplY3QudmFsdWVzKGJsb2NrcylbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNyldO1xyXG59O1xyXG5cclxuZXhwb3J0IHsgZ2V0SW5pdGlhbEJvYXJkLCBnZXRJbml0aWFsQmxvY2tQb3MsIGdldEJsb2NrIH07XHJcbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmxhcHB5QmlyZCBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBodG1sYFxyXG4gICAgICA8aDE+RmxhcHB5IEJpcmQ8L2gxPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9jb3JlL1JvdXRlcic7XHJcbmltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBnZXRMb2NhbEljb25zLCBtYWluSWNvbnMgfSBmcm9tICcuLi8uLi91dGlscy9yb3V0ZXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvbnMgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgdGhpcy5pY29ucyA9IFsuLi5tYWluSWNvbnMsIC4uLihhd2FpdCBnZXRMb2NhbEljb25zKCkpXTtcclxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5oYW5kbGVEb3VibGVDbGljayk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdpY29uQ2hhbmdlJywgdGhpcy5oYW5kbGVJY29uQ2hhbmdlKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignaWNvbkRlbGV0ZScsIHRoaXMuaGFuZGxlSWNvbkRlbGV0ZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcclxuICAgIHJldHVybiBbJ2ljb25zJ107XHJcbiAgfVxyXG5cclxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBodG1sYFxyXG4gICAgICAke3RoaXMuaWNvbnNcclxuICAgICAgICAubWFwKChpY29uKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gaHRtbGBcclxuICAgICAgICAgICAgPG15LWljb24gZGF0YS1wYXRoPSR7aWNvbi5wYXRofSBkYXRhLWxhYmVsPSR7aWNvbi5sYWJlbH0gZGF0YS1pY29uU3JjPSR7aWNvbi5pY29uU3JjfT48L215LWljb24+XHJcbiAgICAgICAgICBgO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgYDtcclxuICB9XHJcblxyXG4gIGdldCBpY29ucygpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZ2V0QXR0cmlidXRlKCdpY29ucycpKTtcclxuICB9XHJcblxyXG4gIHNldCBpY29ucyh2YWx1ZSkge1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2ljb25zJywgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNsaWNrKGUpIHtcclxuICAgIGlmICghZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKTtcclxuICAgIGljb24udG9nZ2xlQXR0cmlidXRlKCdjaGVja2VkJyk7XHJcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJ215LWljb24nKS5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgIGlmIChub2RlICE9PSBpY29uKSB7XHJcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2NoZWNrZWQnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVEb3VibGVDbGljayhlKSB7XHJcbiAgICBpZiAoIWUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGljb24gPSBlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJyk7XHJcbiAgICByb3V0ZXIubmF2aWdhdGVUbyhpY29uLmRhdGFzZXQucGF0aCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVLZXlEb3duKGUpIHtcclxuICAgIGNvbnN0IGNoZWNrZWRFbCA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnbXktaWNvbltjaGVja2VkXScpO1xyXG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgIGlmIChjaGVja2VkRWwubGVuZ3RoID4gMSkgcmV0dXJuO1xyXG4gICAgICBpZiAoIWNoZWNrZWRFbCkgcmV0dXJuO1xyXG4gICAgICByb3V0ZXIubmF2aWdhdGVUbyhjaGVja2VkRWxbMF0uZGF0YXNldC5wYXRoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUljb25DaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBwYXRoLCBsYWJlbCwgaWNvblNyYyB9ID0gZS5kZXRhaWw7XHJcbiAgICBjb25zdCBwcmV2SWNvbkluZGV4ID0gdGhpcy5pY29ucy5maW5kSW5kZXgoKGljb24pID0+IGljb24ucGF0aCA9PT0gcGF0aCk7XHJcblxyXG4gICAgaWYgKHByZXZJY29uSW5kZXggPT09IC0xKSB7XHJcbiAgICAgIHRoaXMuaWNvbnMgPSBbLi4udGhpcy5pY29ucywgeyBwYXRoLCBsYWJlbCwgaWNvblNyYyB9XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IG5ld0ljb25zID0gWy4uLnRoaXMuaWNvbnNdO1xyXG4gICAgICBuZXdJY29uc1twcmV2SWNvbkluZGV4XSA9IHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfTtcclxuICAgICAgdGhpcy5pY29ucyA9IG5ld0ljb25zO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlSWNvbkRlbGV0ZShlKSB7XHJcbiAgICBjb25zdCB7IHBhdGggfSA9IGUuZGV0YWlsO1xyXG4gICAgdGhpcy5pY29ucyA9IHRoaXMuaWNvbnMuZmlsdGVyKChpY29uKSA9PiBpY29uLnBhdGggIT09IHBhdGgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEljb24gZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICBjb25zdCB7IGxhYmVsLCBpY29uc3JjIH0gPSB0aGlzLmRhdGFzZXQ7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPGltZyBhbHQ9XCIke2xhYmVsfV9pY29uXCIgc3JjPSR7aWNvbnNyY30gLz5cclxuICAgICAgJHtsYWJlbCA/IGA8c3BhbiBjbGFzcz1cImljb25fbmFtZVwiPiR7bGFiZWx9PC9zcGFuPmAgOiAnJ31cclxuICAgIGA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xyXG5pbXBvcnQgc2FuZGJveERCIGZyb20gJy4uLy4uL2NvcmUvSW5kZXhlZERCJztcclxuaW1wb3J0IE5vdGVQYWRJY29uIGZyb20gJy4uLy4uLy4uL3B1YmxpYy9ub3RlcGFkLnBuZyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RlUGFkIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHRoaXMuZGF0YSA9IChhd2FpdCBzYW5kYm94REIuZ2V0RGF0YSgnbm90ZXBhZCcsIHRoaXMuaWQpKSA/PyB7XHJcbiAgICAgIHRpdGxlOiAn7KCc66qp7JeG7J2MJyxcclxuICAgICAgY29udGVudDogJycsXHJcbiAgICB9O1xyXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignc2F2ZScsIHRoaXMuaGFuZGxlU2F2ZSk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2xvY2FsU2F2ZScsIHRoaXMuaGFuZGxlTG9jYWxTYXZlKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZGVsZXRlJywgdGhpcy5oYW5kbGVEZWxldGUpO1xyXG4gIH1cclxuXHJcbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NhdmUnLCB0aGlzLmhhbmRsZVNhdmUpO1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2NhbFNhdmUnLCB0aGlzLmhhbmRsZUxvY2FsU2F2ZSk7XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgY29uc3QgeyB0aXRsZSwgY29udGVudCB9ID0gdGhpcy5kYXRhO1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxteS1ub3RlcGFkLWhlYWRlciB0aXRsZT0ke3RpdGxlfT48L215LW5vdGVwYWQtaGVhZGVyPlxyXG4gICAgICA8dGV4dGFyZWE+JHtjb250ZW50fTwvdGV4dGFyZWE+XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlTG9jYWxTYXZlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IG5vdGVQYWREYXRhID0gdGhpcy5nZXROb3RlUGFkRGF0YSgpO1xyXG4gICAgaWYgKCFub3RlUGFkRGF0YSkgcmV0dXJuO1xyXG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtub3RlUGFkRGF0YS5jb250ZW50XSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XHJcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgIGxpbmsuZG93bmxvYWQgPSBgJHtub3RlUGFkRGF0YS50aXRsZX0udHh0YDtcclxuICAgIGxpbmsuY2xpY2soKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGhhbmRsZVNhdmUoZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgY29uc3Qgbm90ZVBhZERhdGEgPSB0aGlzLmdldE5vdGVQYWREYXRhKCk7XHJcbiAgICAgIGlmICghbm90ZVBhZERhdGEpIHJldHVybjtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNhbmRib3hEQi51cHNlcnREYXRhKCdub3RlcGFkJywgbm90ZVBhZERhdGEpO1xyXG4gICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgY29uc3QgcGF0aCA9IGAvbm90ZXBhZC8ke3Jlc3VsdH1gO1xyXG5cclxuICAgICAgYWxlcnQoJ+yggOyepeuQmOyXiOyKteuLiOuLpC4nKTtcclxuICAgICAgY29uc3QgaWNvbkNoYW5nZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpY29uQ2hhbmdlJywge1xyXG4gICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgcGF0aCxcclxuICAgICAgICAgIGxhYmVsOiBub3RlUGFkRGF0YS50aXRsZS5yZXBsYWNlKC8gL2csICcmbmJzcDsnKSxcclxuICAgICAgICAgIGljb25TcmM6IE5vdGVQYWRJY29uLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdteS1pY29ucycpLmRpc3BhdGNoRXZlbnQoaWNvbkNoYW5nZUV2ZW50KTtcclxuICAgICAgcm91dGVyLm5hdmlnYXRlVG8ocGF0aCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgYWxlcnQoJ+yggOyepeyXkCDsi6TtjKjtlojsirXri4jri6QuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBoYW5kbGVEZWxldGUoZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgY29uc3QgY29uZmlybVJlc3VsdCA9IHdpbmRvdy5jb25maXJtKCfsoJXrp5Ag7IKt7KCc7ZWY7Iuc6rKg7Iq164uI6rmMPycpO1xyXG4gICAgICBpZiAoIWNvbmZpcm1SZXN1bHQpIHJldHVybjtcclxuXHJcbiAgICAgIGF3YWl0IHNhbmRib3hEQi5kZWxldGVEYXRhKCdub3RlcGFkJywgdGhpcy5pZCk7XHJcblxyXG4gICAgICBhbGVydCgn7IKt7KCc65CY7JeI7Iq164uI64ukLicpO1xyXG4gICAgICBjb25zdCBpY29uRGVsZXRlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2ljb25EZWxldGUnLCB7XHJcbiAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICBwYXRoOiBgL25vdGVwYWQvJHt0aGlzLmlkfWAsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ215LWljb25zJykuZGlzcGF0Y2hFdmVudChpY29uRGVsZXRlRXZlbnQpO1xyXG4gICAgICByb3V0ZXIucmVwbGFjZVRvKCcvbm90ZXBhZCcpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGFsZXJ0KCfsgq3soJzsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukLicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0Tm90ZVBhZERhdGEoKSB7XHJcbiAgICBjb25zdCBjb250ZW50RWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3RleHRhcmVhJyk7XHJcbiAgICBjb25zdCBjb250ZW50ID0gY29udGVudEVsLnZhbHVlLnRyaW0oKTtcclxuICAgIGlmICghY29udGVudCkge1xyXG4gICAgICBhbGVydCgn64K07Jqp7J20IOyXhuyKteuLiOuLpC4nKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRpdGxlO1xyXG4gICAgd2hpbGUgKCF0aXRsZSkge1xyXG4gICAgICB0aXRsZSA9IHByb21wdCgn7YyM7J2866qF7J2EIOyeheugpe2VmOyEuOyalC4nLCB0aGlzLmRhdGEudGl0bGUucmVwbGFjZSgvJm5ic3A7L2csICcgJykpO1xyXG4gICAgICBpZiAoIXRpdGxlKSB7XHJcbiAgICAgICAgY29uc3QgY29uZmlybVJlc3VsdCA9IHdpbmRvdy5jb25maXJtKCfsoJzrqqnsnYAg7ZWE7IiY7J6F64uI64ukLicpO1xyXG4gICAgICAgIGlmICghY29uZmlybVJlc3VsdCkgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgdGl0bGU6IHRpdGxlLnRyaW0oKS5yZXBsYWNlKC8gL2csICcmbmJzcDsnKSxcclxuICAgICAgY29udGVudDogY29udGVudC5yZXBsYWNlKC8gL2csICcmbmJzcDsnKS5yZXBsYWNlKC9cXG4vZywgJzxicj4nKS5yZXBsYWNlKC9cXHQvZywgJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOycpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldCBpZCgpIHtcclxuICAgIHJldHVybiBOdW1iZXIodGhpcy5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uLy4uL2NvcmUvUm91dGVyJztcclxuXHJcbmNvbnN0IGRpc2FibGUgPSB0cnVlO1xyXG5cclxuY29uc3QgYnV0dG9ucyA9IFtcclxuICB7XHJcbiAgICBpZDogJ2ZpbGUnLFxyXG4gICAgdGl0bGU6ICftjIzsnbwnLFxyXG4gICAga2V5OiAnRicsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAxLCB0ZXh0OiAn7IOI66GcIOunjOuTpOq4sChOKScsIGtleTogWydDdHJsJywgJ04nXSwgb25DbGljazogaGFuZGxlTmV3Q2xpY2sgfSxcclxuICAgICAgeyBpZDogMiwgdGV4dDogJ+uCtCDsu7Ttk6jthLDsl5Ag7KCA7J6lKFcpJywga2V5OiBbJ0N0cmwnLCAnU2hpZnQnLCAnTiddLCBvbkNsaWNrOiBoYW5kbGVMb2NhbFNhdmVDbGljayB9LFxyXG4gICAgICB7IGlkOiAzLCB0ZXh0OiAn7KCA7J6lKFMpJywga2V5OiBbJ0N0cmwnLCAnUyddLCBvbkNsaWNrOiBoYW5kbGVTYXZlQ2xpY2sgfSxcclxuICAgICAgeyBpZDogNCwgdGV4dDogJ+yCreygnChEKScsIGtleTogWydDdHJsJywgJ1NoaWZ0JywgJ1MnXSwgb25DbGljazogaGFuZGxlRGVsZXRlQ2xpY2sgfSxcclxuICAgICAgeyBpZDogNSwgdGV4dDogJ+2OmOydtOyngCDshKTsoJUoVSkuLi4nLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDYsIHRleHQ6ICfsnbjsh4QoUCkuLi4nLCBrZXk6IFsnQ3RybCcsICdQJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogNywgdGV4dDogJ+uBneuCtOq4sChYKScsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2VkaXQnLFxyXG4gICAgdGl0bGU6ICftjrjsp5EnLFxyXG4gICAga2V5OiAnRScsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiA4LCB0ZXh0OiAn7Iuk7ZaJIOy3qOyGjChVKScsIGtleTogWydDdHJsJywgJ1onXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiA5LCB0ZXh0OiAn7J6Y652864K06riwKFQpJywga2V5OiBbJ0N0cmwnLCAnWCddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDEwLCB0ZXh0OiAn67O17IKsKEMpJywga2V5OiBbJ0N0cmwnLCAnQyddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDExLCB0ZXh0OiAn67aZ7Jes64Sj6riwKFApJywga2V5OiBbJ0N0cmwnLCAnViddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDEyLCB0ZXh0OiAn7IKt7KCcKEQpJywga2V5OiBbJ0RlbCddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDEzLCB0ZXh0OiAnQmluZ+ycvOuhnCDqsoDsg4koUykuLi4nLCBrZXk6IFsnQ3RybCcsICdFJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTQsIHRleHQ6ICfssL7quLAoRikuLi4nLCBrZXk6IFsnQ3RybCcsICdGJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTUsIHRleHQ6ICfri6TsnYwg7LC+6riwKE4pJywga2V5OiBbJ0YzJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTYsIHRleHQ6ICfsnbTsoIQg7LC+6riwKFYpJywga2V5OiBbJ1NoaWZ0JywgJ0YzJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTcsIHRleHQ6ICfrsJTqvrjquLAoUikuLi4nLCBrZXk6IFsnQ3RybCcsICdIJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTgsIHRleHQ6ICfsnbTrj5koRykuLi4nLCBrZXk6IFsnQ3RybCcsICdHJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTksIHRleHQ6ICfrqqjrkZAg7ISg7YOdKEEpJywga2V5OiBbJ0N0cmwnLCAnQSddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDIwLCB0ZXh0OiAn7Iuc6rCEL+uCoOynnChEKScsIGtleTogWydGNSddLCBkaXNhYmxlIH0sXHJcbiAgICBdLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdmb3JtYXQnLFxyXG4gICAgdGl0bGU6ICfshJzsi50nLFxyXG4gICAga2V5OiAnTycsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAyMSwgdGV4dDogJ+yekOuPmSDspIQg67CU6r+IKFcpJywga2V5OiBbXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyMiwgdGV4dDogJ+q4gOq8tChGKS4uLicsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ3ZpZXcnLFxyXG4gICAgdGl0bGU6ICfrs7TquLAnLFxyXG4gICAga2V5OiAnVicsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAyMywgdGV4dDogJ+2ZleuMgO2VmOq4sChaKScsIGtleTogWydDdHJsJywgJysnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyNCwgdGV4dDogJ+y2leyGjO2VmOq4sChYKScsIGtleTogWydDdHJsJywgJy0nXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyNSwgdGV4dDogJ+yDge2DnCDtkZzsi5zspIQoUyknLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICBdLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdoZWxwJyxcclxuICAgIHRpdGxlOiAn64+E7JuA66eQJyxcclxuICAgIGtleTogJ0gnLFxyXG4gICAgc2xvdHM6IFtcclxuICAgICAgeyBpZDogMjYsIHRleHQ6ICfrj4Tsm4Drp5Ag67O06riwKEgpJywga2V5OiBbXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyNywgdGV4dDogJ+2UvOuTnOuwsSDrs7TrgrTquLAoRiknLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDI4LCB0ZXh0OiAn66mU66qo7J6lIOygleuztChBKScsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuXTtcclxuXHJcbmNvbnN0IHNsb3RzID0gYnV0dG9ucy5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XHJcbiAgcmV0dXJuIFsuLi5hY2MsIC4uLmN1ci5zbG90c107XHJcbn0sIFtdKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJ1dHRvbnM7XHJcbmV4cG9ydCB7IHNsb3RzIH07XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVTYXZlQ2xpY2soKSB7XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2F2ZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUxvY2FsU2F2ZUNsaWNrKCkge1xyXG4gIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2xvY2FsU2F2ZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNsaWNrKCkge1xyXG4gIGNvbnN0IG5vdGVwYWQgPSB0aGlzLmNsb3Nlc3QoJ215LW5vdGVwYWQnKTtcclxuICBpZiAobm90ZXBhZC5pZCA9PT0gMCkgcmV0dXJuO1xyXG4gIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2RlbGV0ZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZU5ld0NsaWNrKCkge1xyXG4gIGNvbnN0IG5vdGVwYWQgPSB0aGlzLmNsb3Nlc3QoJ215LW5vdGVwYWQnKTtcclxuICBpZiAobm90ZXBhZC5pZCA9PT0gMCkge1xyXG4gICAgbm90ZXBhZC5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpLnZhbHVlID0gJyc7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHJvdXRlci5uYXZpZ2F0ZVRvKCcvbm90ZXBhZCcpO1xyXG59XHJcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgYnV0dG9ucywgeyBzbG90cyB9IGZyb20gJy4uL2NvbnN0L2J1dHRvbnMnO1xyXG5pbXBvcnQgTm90ZVBhZEljb24gZnJvbSAnLi4vLi4vLi4vLi4vcHVibGljL25vdGVwYWQucG5nJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi8uLi9jb3JlL1JvdXRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RlUGFkSGVhZGVyIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgfVxyXG5cclxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTtcclxuICB9XHJcblxyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPGhlYWRlcj5cclxuICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgIDxpbWcgYWx0PVwibm90ZXBhZF9pY29uXCIgc3JjPSR7Tm90ZVBhZEljb259IC8+XHJcbiAgICAgICAgICAke3RoaXMudGl0bGV9IC0gV2luZG93cyDrqZTrqqjsnqVcclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInZpZXdfYnV0dG9uc1wiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZpZXdfYnV0dG9uXCIgaWQ9XCJtaW5pXCI+8J+XlTwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZpZXdfYnV0dG9uXCIgaWQ9XCJmdWxsXCI+8J+XljwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZpZXdfYnV0dG9uXCIgaWQ9XCJjbG9zZVwiPuKFqTwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2hlYWRlcj5cclxuICAgICAgPGRpdiBjbGFzcz1cImVkaXRfYnV0dG9uc1wiPlxyXG4gICAgICAgICR7YnV0dG9uc1xyXG4gICAgICAgICAgLm1hcChcclxuICAgICAgICAgICAgKGJ1dHRvbikgPT4gaHRtbGBcclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdF9idXR0b25cIj5cclxuICAgICAgICAgICAgICAgICR7YnV0dG9uLnRpdGxlfSg8dT4ke2J1dHRvbi5rZXl9PC91PilcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3B1cFwiPlxyXG4gICAgICAgICAgICAgICAgICAke2J1dHRvbi5zbG90c1xyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAoc2xvdCkgPT4gaHRtbGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1YlwiIGRhdGEtaWQ9XCIke3Nsb3QuaWR9XCIgZGF0YS1kaXNhYmxlPVwiJHshIXNsb3QuZGlzYWJsZX1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiR7c2xvdC50ZXh0fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICR7c2xvdC5rZXkubGVuZ3RoID4gMCA/IGA8ZGl2PiR7c2xvdC5rZXkuam9pbignICsgJyl9PC9kaXY+YCA6ICcnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIGBcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5qb2luKCcnKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2xpY2soZSkge1xyXG4gICAgY29uc3Qgdmlld0J1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy52aWV3X2J1dHRvbicpO1xyXG4gICAgY29uc3QgZWRpdEJ1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5lZGl0X2J1dHRvbicpO1xyXG4gICAgY29uc3Qgc3ViID0gZS50YXJnZXQuY2xvc2VzdCgnLnN1YicpO1xyXG5cclxuICAgIGlmICh2aWV3QnV0dG9uKSB7XHJcbiAgICAgIHRoaXMuY2xpY2tWaWV3QnV0dG9uKHZpZXdCdXR0b24pO1xyXG4gICAgfSBlbHNlIGlmIChlZGl0QnV0dG9uKSB7XHJcbiAgICAgIHRoaXMuY2xpY2tFZGl0QnV0dG9uKGVkaXRCdXR0b24sIHN1Yik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsb3NlUG9wdXAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrVmlld0J1dHRvbih2aWV3QnV0dG9uKSB7XHJcbiAgICBzd2l0Y2ggKHZpZXdCdXR0b24uaWQpIHtcclxuICAgICAgY2FzZSAnZnVsbCc6XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2Z1bGxzY3JlZW4nKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnbWluaSc6XHJcbiAgICAgIGNhc2UgJ2Nsb3NlJzpcclxuICAgICAgICByb3V0ZXIuYmFjaygpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xpY2tFZGl0QnV0dG9uKGVkaXRCdXR0b24sIHN1Yikge1xyXG4gICAgaWYgKHN1Yikge1xyXG4gICAgICBjb25zdCBzbG90SWQgPSBOdW1iZXIoc3ViLmRhdGFzZXQuaWQpO1xyXG4gICAgICBjb25zdCB7IG9uQ2xpY2sgfSA9IHNsb3RzLmZpbmQoKHNsb3QpID0+IHNsb3QuaWQgPT09IHNsb3RJZCkgfHwge307XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljay5jYWxsKHRoaXMpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRvZ2dsZVBvcHVwKGVkaXRCdXR0b24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlUG9wdXAoZWRpdEJ1dHRvbikge1xyXG4gICAgY29uc3QgcG9wdXAgPSBlZGl0QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cCcpO1xyXG4gICAgaWYgKHBvcHVwLmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpKSB7XHJcbiAgICAgIHBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xyXG4gICAgICBwb3B1cC5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbG9zZVBvcHVwKCkge1xyXG4gICAgLy8gY29uc3QgcG9wdXBzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXAuc2hvdycpO1xyXG4gICAgLy8gcG9wdXBzLmZvckVhY2goKHBvcHVwKSA9PiBwb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JykpO1xyXG4gICAgY29uc3QgcG9wdXAgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC5zaG93Jyk7XHJcbiAgICBwb3B1cD8uY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRpdGxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCd0aXRsZScpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRpdGxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCd0aXRsZScpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuaW1wb3J0IHsgaHRtbCwgcmVwZWF0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV0cmlzQm9hcmQgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgJHtyZXBlYXQoXHJcbiAgICAgICAgMjAsXHJcbiAgICAgICAgKGEsIGkpID0+XHJcbiAgICAgICAgICBodG1sYFxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgJHtyZXBlYXQoMTAsICh2LCBqKSA9PiBodG1sYDxsaT4ke2l9LCAke2p9PC9saT5gKX1cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIGBcclxuICAgICAgKX1cclxuICAgIGA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV0cmlzSW5mbyBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBodG1sYFxyXG4gICAgICA8ZGl2PjfsooXsnZgg7YWM7Yq466Gc66+464W4KOu4lOuhnSnqsIAg7ZWc66y27J2M7Jy866GcIOuenOuNpO2VmOqyjCDrk7HsnqXtlanri4jri6QuPC9kaXY+XHJcbiAgICAgIDxkaXY+7ZWE65Oc64qUIDIwIHggMTAg7J6F64uI64ukLjwvZGl2PlxyXG4gICAgICA8ZGl2PlggOiDsi5zqs4TrsKntlqUg7ZqM7KCEKOyasO2ajOyghCk8L2Rpdj5cclxuICAgICAgPGRpdj5aIDog67CY7Iuc6rOE67Cp7ZalIO2ajOyghCjsooztmozsoIQpPC9kaXY+XHJcbiAgICBgO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XHJcbmltcG9ydCBzYW5kYm94REIgZnJvbSAnLi9jb3JlL0luZGV4ZWREQic7XHJcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vdmlldy9Db21tb24vRm9vdGVyJztcclxuaW1wb3J0IEhvbWUgZnJvbSAnLi92aWV3L0hvbWUnO1xyXG5pbXBvcnQgVGV0cmlzIGZyb20gJy4vdmlldy9UZXRyaXMnO1xyXG5pbXBvcnQgRmxhcHB5QmlyZCBmcm9tICcuL3ZpZXcvRmxhcHB5QmlyZCc7XHJcbmltcG9ydCBJY29ucyBmcm9tICcuL3ZpZXcvQ29tbW9uL0ljb25zJztcclxuaW1wb3J0IEljb24gZnJvbSAnLi92aWV3L0NvbW1vbi9JY29uJztcclxuaW1wb3J0IE5vdGVQYWQgZnJvbSAnLi92aWV3L05vdGVQYWQnO1xyXG5pbXBvcnQgTm90ZVBhZEhlYWRlciBmcm9tICcuL3ZpZXcvTm90ZVBhZC9jb21wb25lbnRzL05vdGVQYWRIZWFkZXInO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4vY29yZS9Sb3V0ZXInO1xyXG5pbXBvcnQgVGV0cmlzQm9hcmQgZnJvbSAnLi92aWV3L1RldHJpcy9jb21wb25lbnRzL1RldHJpc0JvYXJkJztcclxuaW1wb3J0IFRldHJpc0luZm8gZnJvbSAnLi92aWV3L1RldHJpcy9jb21wb25lbnRzL1RldHJpc0luZm8nO1xyXG5cclxuKGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgc2FuZGJveERCLm9wZW5EQigpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IGFsZXJ0KCdJbmRleGVkRELrpbwg7IKs7Jqp7ZWgIOyImCDsl4bsirXri4jri6QuJykpO1xyXG4gIH1cclxuXHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1hcHAnLCBBcHApO1xyXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbXktZm9vdGVyJywgRm9vdGVyKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWhvbWUnLCBIb21lKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LXRldHJpcycsIFRldHJpcyk7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1mbGFwcHliaXJkJywgRmxhcHB5QmlyZCk7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1pY29ucycsIEljb25zKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWljb24nLCBJY29uKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LW5vdGVwYWQnLCBOb3RlUGFkKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LW5vdGVwYWQtaGVhZGVyJywgTm90ZVBhZEhlYWRlcik7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS10ZXRyaXMtYm9hcmQnLCBUZXRyaXNCb2FyZCk7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS10ZXRyaXMtaW5mbycsIFRldHJpc0luZm8pO1xyXG59KSgpO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiByb3V0ZXIucmVuZGVyKCkpO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKSA9PiByb3V0ZXIucmVuZGVyKCkpO1xyXG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImRiIiwiY29uc3RydWN0b3IiLCJkYk5hbWUiLCJkYlZlcnNpb24iLCJzdG9yZXMiLCJ0aGlzIiwiYXN5bmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3QiLCJ3aW5kb3ciLCJpbmRleGVkREIiLCJvcGVuIiwib25zdWNjZXNzIiwicmVzdWx0Iiwib25lcnJvciIsImUiLCJvbnVwZ3JhZGVuZWVkZWQiLCJmb3JFYWNoIiwic3RvcmUiLCJvYmplY3RTdG9yZU5hbWVzIiwiY29udGFpbnMiLCJkZWxldGVPYmplY3RTdG9yZSIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsInN0b3JlTmFtZSIsImlkIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsImdldCIsImdldEFsbCIsImRhdGEiLCJtb2RpZmllZERhdGEiLCJEYXRlIiwiZ2V0VGltZSIsInB1dCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImRlbGV0ZSIsInJlbmRlclJhdyIsInN0cmluZyIsInZhbHVlcyIsIlN0cmluZyIsInJhdyIsInJlcGVhdCIsInRpbWVzIiwiY2FsbGJhY2siLCJBcnJheSIsImZpbGwiLCJtYXAiLCJqb2luIiwiV2ViQ29tcG9uZW50IiwiSFRNTEVsZW1lbnQiLCJjb25uZWN0ZWRDYWxsYmFjayIsInJlbmRlciIsImlubmVySFRNTCIsImluamVjdEhUTUwiLCJBcHAiLCJCQVNFX1VSTCIsInJvdXRlcyIsInBhdGgiLCJodG1sIiwibGFiZWwiLCJpY29uU3JjIiwibWFpbkljb25zIiwicmVkdWNlIiwicHJldiIsInJvdXRlciIsImdldExvY2FsSWNvbnMiLCJpY29uIiwidGl0bGUiLCJyb3V0ZSIsInBhdGhUb1JlZ2V4cCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJjdXJyZW50UGF0aCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJmaW5kIiwidmFsdWUiLCJ0ZXN0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0SWRGcm9tUGF0aCIsInJlcGxhY2VUbyIsIm1hdGNoIiwibmF2aWdhdGVUbyIsInVybCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJiYWNrIiwiRm9vdGVyIiwic3VwZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlQ2xpY2siLCJiaW5kIiwidGFyZ2V0IiwiY2xvc2VzdCIsImRhdGFzZXQiLCJIb21lIiwiQkxPQ0tTIiwiSSIsIkoiLCJMIiwiTyIsIlMiLCJUIiwiWiIsIlRldHJpcyIsImJvYXJkIiwic3RhcnRHYW1lIiwicm93IiwiaSIsImNvbCIsImoiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJuYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsIm9sZFBvcyIsIkpTT04iLCJwYXJzZSIsIm5ld1BvcyIsImdldFVwZGF0ZWRCb2FyZCIsIm5ld0JvYXJkIiwicmVtb3ZlUHJldkJsb2NrRnJvbUJvYXJkIiwicHV0TmV4dEJsb2NrT25Cb2FyZCIsImJsb2NrIiwieCIsInkiLCJibG9ja3MiLCJPYmplY3QiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJibG9ja1BvcyIsIndpZHRoIiwia2V5ZG93bkhhbmRsZXIiLCJrZXkiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzdHJpbmdpZnkiLCJGbGFwcHlCaXJkIiwiSWNvbnMiLCJpY29ucyIsImhhbmRsZURvdWJsZUNsaWNrIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZUljb25DaGFuZ2UiLCJoYW5kbGVJY29uRGVsZXRlIiwidG9nZ2xlQXR0cmlidXRlIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjaGVja2VkRWwiLCJsZW5ndGgiLCJkZXRhaWwiLCJwcmV2SWNvbkluZGV4IiwiZmluZEluZGV4IiwibmV3SWNvbnMiLCJmaWx0ZXIiLCJJY29uIiwiaWNvbnNyYyIsIk5vdGVQYWQiLCJjb250ZW50IiwiaGFuZGxlU2F2ZSIsImhhbmRsZUxvY2FsU2F2ZSIsImhhbmRsZURlbGV0ZSIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0Iiwibm90ZVBhZERhdGEiLCJnZXROb3RlUGFkRGF0YSIsImJsb2IiLCJCbG9iIiwidHlwZSIsImxpbmsiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImRvd25sb2FkIiwiY2xpY2siLCJzdG9wUHJvcGFnYXRpb24iLCJhbGVydCIsImljb25DaGFuZ2VFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImVyciIsImNvbmZpcm0iLCJpY29uRGVsZXRlRXZlbnQiLCJ0cmltIiwicHJvbXB0IiwiTnVtYmVyIiwiZGlzYWJsZSIsImJ1dHRvbnMiLCJzbG90cyIsInRleHQiLCJvbkNsaWNrIiwibm90ZXBhZCIsImJ1YmJsZXMiLCJhY2MiLCJjdXIiLCJOb3RlUGFkSGVhZGVyIiwiYnV0dG9uIiwic2xvdCIsInZpZXdCdXR0b24iLCJlZGl0QnV0dG9uIiwic3ViIiwiY2xpY2tWaWV3QnV0dG9uIiwiY2xpY2tFZGl0QnV0dG9uIiwiY2xvc2VQb3B1cCIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJzbG90SWQiLCJjYWxsIiwidG9nZ2xlUG9wdXAiLCJwb3B1cCIsInJlbW92ZSIsImFkZCIsIlRldHJpc0JvYXJkIiwiYSIsInYiLCJUZXRyaXNJbmZvIiwicXVldWVNaWNyb3Rhc2siLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJzb3VyY2VSb290IjoiIn0=