(()=>{"use strict";var e="/js-sandbox/";const t=new class{db;constructor(e,t,n){this.dbName=e,this.dbVersion=t,this.stores=n}async openDB(){return new Promise(((e,t)=>{const n=window.indexedDB.open(this.dbName,this.dbVersion);n.onsuccess=()=>{this.db=n.result,e()},n.onerror=e=>{t(e)},n.onupgradeneeded=()=>{this.db=n.result,this.stores.forEach((e=>{this.db.objectStoreNames.contains(e)&&this.db.deleteObjectStore(e),this.db.createObjectStore(e,{keyPath:"id",autoIncrement:!0})}))}}))}async getData(e,t){return new Promise(((n,i)=>{const s=this.db.transaction(e,"readonly").objectStore(e).get(t);s.onsuccess=()=>{n(s.result)},s.onerror=e=>{i(e)}}))}async getAllData(e){return new Promise(((t,n)=>{const i=this.db.transaction(e,"readonly").objectStore(e).getAll();i.onsuccess=()=>{t(i.result)},i.onerror=e=>{n(e)}}))}async upsertData(e,t){return new Promise(((n,i)=>{const s=this.db.transaction(e,"readwrite").objectStore(e).put(t);s.onsuccess=()=>{n(s.result)},s.onerror=e=>{i(e)}}))}async deleteData(e,t){return new Promise(((n,i)=>{const s=this.db.transaction(e,"readwrite").objectStore(e).delete(t);s.onsuccess=()=>{n(s.result)},s.onerror=e=>{i(e)}}))}}("sandboxDB",2,["notepad"]),n=(e,...t)=>String.raw(e,...t),i=e+"2a583f97b153f7da7d41.png",s=[{path:"/",html:n`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:n`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:e+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:n`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:e+"39b884119b49599495ed.png"},{path:"/notepad",html:n`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:i}],a=s.reduce(((e,t)=>{const{path:n,label:i,iconSrc:s}=t;return"/"===t.path?e:[...e,{path:n,label:i,iconSrc:s}]}),[]),l=async()=>[...(await t.getAllData("notepad")).reduce(((e,t)=>{const{id:n,title:s}=t;return[...e,{path:`/notepad/${n}`,label:s,iconSrc:i}]}),[])],o=s,c=new class{constructor(e){this.routes=e}render(){const e=this.routes.find((e=>e.path===window.location.pathname.replace("/js-sandbox","")));e?document.querySelector("#page").innerHTML=e.html:this.replaceTo("/")}navigateTo(e){window.history.pushState(null,null,e),this.render()}replaceTo(e){window.history.replaceState(null,null,e),this.render()}back(){window.history.back(),this.render()}}(o);class r extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class d extends r{async connectedCallback(){this.icons=[...a,...await l()],super.connectedCallback(),window.addEventListener("popstate",(()=>c.render())),this.addEventListener("iconChange",(e=>{this.icons=[...this.icons,e.detail],this.render()}))}injectHTML(){return n`
      <div id="page"></div>
      <my-icons icons=${JSON.stringify(this.icons)} tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const h=e+"59cb65e4f8f2627d6c2c.png",p=e+"bc8d31a2338dd0b3f68a.png";class b extends r{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return n`
      <img alt="window_logo" src=${h} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${p} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${a.map((e=>n` <my-icon data-path="${e.path}" data-iconSrc="${e.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");c.navigateTo(t.dataset.path)}}class u extends r{}class y extends r{injectHTML(){return n`
      <h1>Tetris</h1>
      <p>You are viewing the Tetris component!</p>
    `}}class m extends r{injectHTML(){return n`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class k extends r{constructor(){super(),this.icons=JSON.parse(this.getAttribute("icons"))}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this)),this.addEventListener("dblclick",this.handleDoubleClick.bind(this)),this.addEventListener("keydown",this.handleKeyDown.bind(this))}injectHTML(){return n`
      ${this.icons.map((e=>n`
            <my-icon data-path=${e.path} data-label=${e.label} data-iconSrc=${e.iconSrc}></my-icon>
          `)).join("")}
    `}handleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");t.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((e=>{e!==t&&e.removeAttribute("checked")}))}handleDoubleClick(e){if(!e.target.closest("my-icon"))return;const t=e.target.closest("my-icon");c.navigateTo(t.dataset.path)}handleKeyDown(e){const t=this.querySelectorAll("my-icon[checked]");if("Enter"===e.key){if(t.length>1)return;if(!t)return;c.navigateTo(t[0].dataset.path)}}}class v extends r{injectHTML(){const{label:e,iconsrc:t}=this.dataset;return n`
      <img alt="${e}_icon" src=${t} />
      ${e?`<span class="icon_name">${e}</span>`:""}
    `}}class f extends r{connectedCallback(){super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave)}injectHTML(){return n`
      <my-notepad-header></my-notepad-header>
      <textarea></textarea>
    `}handleLocalSave(){const e=this.getNotePadData();if("fail"!==e)try{const t=new Blob([e.content],{type:"text/plain"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download=`${e.title}.txt`,n.click()}catch(e){alert("저장에 실패했습니다."),console.error(e)}finally{this.querySelector("textarea").value=""}}async handleSave(e){e.stopPropagation();const n=this.getNotePadData();if("fail"!==n)try{const e=await t.upsertData("notepad",{title:n.title,content:n.content});e&&alert("저장되었습니다."),this.dispatchEvent(new CustomEvent("iconChange",{bubbles:!0,detail:{path:`/notepad/${e}`,label:n.title,iconSrc:i}}))}catch(e){alert("저장에 실패했습니다."),console.error(e)}finally{this.querySelector("textarea").value=""}}getNotePadData(){const e=this.querySelector("textarea").value;if(!e)return alert("내용이 없습니다."),"fail";let t=prompt("저장할 파일명을 입력하세요","제목없음");for(;null==t||""===t;){if(null===t)return"fail";t=prompt("파일명은 필수입니다.","제목없음")}return{title:t,content:e}}}const w=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로&nbsp;만들기(N)",key:["Ctrl","N"],disable:!0},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],disable:!0},{id:5,text:"페이지&nbsp;설정(U)...",key:[],disable:!0},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:!0},{id:7,text:"끝내기(X)",key:[],disable:!0}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행&nbsp;취소(U)",key:["Ctrl","Z"],disable:!0},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:!0},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:!0},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:!0},{id:12,text:"삭제(D)",key:["Del"],disable:!0},{id:13,text:"Bing으로&nbsp;검색(S)...",key:["Ctrl","E"],disable:!0},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:!0},{id:15,text:"다음&nbsp;찾기(N)",key:["F3"],disable:!0},{id:16,text:"이전&nbsp;찾기(V)",key:["Shift","F3"],disable:!0},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:!0},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:!0},{id:19,text:"모두&nbsp;선택(A)",key:["Ctrl","A"],disable:!0},{id:20,text:"시간/날짜(D)",key:["F5"],disable:!0}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동&nbsp;줄&nbsp;바꿈(W)",key:[],disable:!0},{id:22,text:"글꼴(F)...",key:[],disable:!0}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:!0},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:!0},{id:25,text:"상태&nbsp;표시줄(S)",key:[],disable:!0}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말&nbsp;보기(H)",key:[],disable:!0},{id:27,text:"피드백&nbsp;보내기(F)",key:[],disable:!0},{id:28,text:"메모장&nbsp;정보(A)",key:[],disable:!0}]}];class g extends r{slots=w.reduce(((e,t)=>[...e,...t.slots]),[]);connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick),this.querySelectorAll(".sub").forEach((e=>{const t=this.slots.find((t=>t.id===Number(e.dataset.id))).onClick;t&&e.addEventListener("click",t)}))}disconnectedCallback(){this.removeEventListener("click",this.handleClick),this.querySelectorAll(".sub").forEach((e=>{const t=this.slots.find((t=>t.id===Number(e.dataset.id))).onClick;t&&e.removeEventListener("click",t)}))}injectHTML(){return n`
      <header>
        <span><img alt="notepad_icon" src=${i} />제목없음 - Windows 메모장</span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${w.map((e=>n`
              <button class="edit_button">
                ${e.title}(<u>${e.key}</u>)
                <div class="popup">
                  ${e.slots.map((e=>n`
                        <div class="sub" data-id="${e.id}" data-disable="${!!e.disable}">
                          <div>${e.text}</div>
                          ${e.key.length>0?`<div>${e.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(e){switch(e.target.className){case"view_button":(function(e){switch(e.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":c.back()}}).call(this,e.target);break;case"edit_button":(function(e){e.querySelector(".popup").classList.toggle("show"),this.querySelectorAll(".popup").forEach((t=>{t!==e.querySelector(".popup")&&t.classList.remove("show")}))}).call(this,e.target)}}}(async()=>{await t.openDB(),customElements.define("my-app",d),customElements.define("my-footer",b),customElements.define("my-home",u),customElements.define("my-tetris",y),customElements.define("my-flappybird",m),customElements.define("my-icons",k),customElements.define("my-icon",v),customElements.define("my-notepad",f),customElements.define("my-notepad-header",g)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,