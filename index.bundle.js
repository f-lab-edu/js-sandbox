(()=>{"use strict";var t="/js-sandbox/";const e=new class{db;constructor(t,e,i){this.dbName=t,this.dbVersion=e,this.stores=i}async openDB(){return new Promise(((t,e)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,t()},i.onerror=t=>{e(t)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((t=>{this.db.objectStoreNames.contains(t)&&this.db.deleteObjectStore(t),this.db.createObjectStore(t,{keyPath:"id"})}))}}))}async getData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readonly").objectStore(t).get(e);n.onsuccess=()=>{i(n.result)},n.onerror=t=>{s(t)}}))}async getAllData(t){return new Promise(((e,i)=>{const s=this.db.transaction(t,"readonly").objectStore(t).getAll();s.onsuccess=()=>{e(s.result)},s.onerror=t=>{i(t)}}))}async upsertData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t),a={...e,id:e.id||(new Date).getTime()},o=n.put(a);o.onsuccess=()=>{i(o.result)},o.onerror=()=>{console.log(o.error),s(o.error)}}))}async deleteData(t,e){return new Promise(((i,s)=>{const n=this.db.transaction(t,"readwrite").objectStore(t).delete(e);n.onsuccess=()=>{i(!0)},n.onerror=t=>{s(t)}}))}}("sandboxDB",2,["notepad"]),i=(t,...e)=>String.raw(t,...e),s=(t,e)=>new Array(t).fill("").map(e).join("");class n extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class a extends n{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const o=t+"2a583f97b153f7da7d41.png",r="/js-sandbox",c=[{path:"/",html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:t+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:t+"39b884119b49599495ed.png"},{path:"/notepad",html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:o},{path:"/notepad/:id",html:i`<my-notepad id=":id"></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null}],l=c.reduce(((t,e)=>{const{path:i,label:s,iconSrc:n}=e;return e.iconSrc?[...t,{path:i,label:s,iconSrc:n}]:t}),[]),d=async()=>[...(await e.getAllData("notepad")).reduce(((t,e)=>{const{id:i,title:s}=e;return[...t,{path:`/notepad/${i}`,label:s,iconSrc:o}]}),[])],h=c,p=new class{constructor(t){this.routes=t}pathToRegexp(t){return new RegExp(`^${t.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const t=window.location.pathname,e=this.routes.find((e=>this.pathToRegexp(this.getUrlFrom(e.path)).test(t)));e?document.querySelector("#page").innerHTML=e.html.replace(":id",this.getIdFromPath(t)):this.replaceTo("/")}getIdFromPath(t){return t.match(/\d+/)?.[0]}navigateTo(t){this.getUrlFrom(t)!==window.location.pathname&&(window.history.pushState(null,null,r+t),this.render())}replaceTo(t){window.history.replaceState(null,null,r+t),this.render()}getUrlFrom(t){return`${r}${t}`}back(){window.history.back(),this.render()}}(h),b=t+"59cb65e4f8f2627d6c2c.png",u=t+"bc8d31a2338dd0b3f68a.png";class y extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${b} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${u} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${l.map((t=>i` <my-icon data-path="${t.path}" data-iconSrc="${t.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");p.navigateTo(e.dataset.path)}}class m extends n{}const k={I:[[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[1,0,0],[1,1,1],[0,0,0]],L:[[0,0,1],[1,1,1],[0,0,0]],O:[[1,1],[1,1]],S:[[0,1,1],[1,1,0],[0,0,0]],T:[[0,1,0],[1,1,1],[0,0,0]],Z:[[1,1,0],[0,1,1],[0,0,0]]};class g extends n{constructor(){super(),this.board=(10,Array(20).fill(0).map((()=>Array(10).fill(0))))}connectedCallback(){super.connectedCallback(),this.querySelector("#start-button").addEventListener("click",this.startGame.bind(this))}injectHTML(){return i`
      <button id="start-button">게임 시작</button>
      <div class="board">
        ${this.board.map(((t,e)=>i`
              <ul>
                ${t.map(((t,s)=>i`<li class="cell-${this.board[e][s]}"></li>`)).join("")}
              </ul>
            `)).join("")}
      </div>
      <div>추후 추가될 공간입니다.</div>
    `}static get observedAttributes(){return["board","block","block-pos"]}attributeChangedCallback(t,e,i){if("block-pos"===t){const t=JSON.parse(e),s=JSON.parse(i);this.board=this.getUpdatedBoard(s,t),this.render()}}getUpdatedBoard(t,e){const i=[...this.board];return e&&this.removePrevBlockFromBoard(i,e),this.putNextBlockOnBoard(i,t),i}removePrevBlockFromBoard(t,e){this.block.forEach(((i,s)=>{i.forEach(((i,n)=>{1===i&&(t[e.x+s][e.y+n]=0)}))}))}putNextBlockOnBoard(t,e){this.block.forEach(((i,s)=>{i.forEach(((i,n)=>{t[e.x+s][e.y+n]=i}))}))}startGame(){var t;this.block=(t=k,Object.values(t)[Math.floor(7*Math.random())]),this.blockPos=(10,{x:Math.floor(5),y:0}),document.addEventListener("keydown",this.keydownHandler.bind(this))}keydownHandler(t){"ArrowDown"===t.key?this.blockPos={x:this.blockPos.x+1,y:this.blockPos.y}:"ArrowUp"===t.key?this.blockPos={x:this.blockPos.x-1,y:this.blockPos.y}:"ArrowLeft"===t.key?this.blockPos={x:this.blockPos.x,y:this.blockPos.y-1}:"ArrowRight"===t.key&&(this.blockPos={x:this.blockPos.x,y:this.blockPos.y+1})}get board(){return JSON.parse(this.getAttribute("board"))}set board(t){this.setAttribute("board",JSON.stringify(t))}get block(){return JSON.parse(this.getAttribute("block"))}set block(t){this.setAttribute("block",JSON.stringify(t))}get blockPos(){return JSON.parse(this.getAttribute("block-pos"))}set blockPos(t){this.setAttribute("block-pos",JSON.stringify(t))}}class v extends n{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class w extends n{async connectedCallback(){this.icons=[...l,...await d()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange),this.addEventListener("iconDelete",this.handleIconDelete)}static get observedAttributes(){return["icons"]}attributeChangedCallback(t,e,i){e!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((t=>i`
            <my-icon data-path=${t.path} data-label=${t.label} data-iconSrc=${t.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(t){this.setAttribute("icons",JSON.stringify(t))}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");e.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((t=>{t!==e&&t.removeAttribute("checked")}))}handleDoubleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");p.navigateTo(e.dataset.path)}handleKeyDown(t){const e=this.querySelectorAll("my-icon[checked]");if("Enter"===t.key){if(e.length>1)return;if(!e)return;p.navigateTo(e[0].dataset.path)}}handleIconChange(t){const{path:e,label:i,iconSrc:s}=t.detail,n=this.icons.findIndex((t=>t.path===e));if(-1===n)this.icons=[...this.icons,{path:e,label:i,iconSrc:s}];else{const t=[...this.icons];t[n]={path:e,label:i,iconSrc:s},this.icons=t}}handleIconDelete(t){const{path:e}=t.detail;this.icons=this.icons.filter((t=>t.path!==e))}}class f extends n{injectHTML(){const{label:t,iconsrc:e}=this.dataset;return i`
      <img alt="${t}_icon" src=${e} />
      ${t?`<span class="icon_name">${t}</span>`:""}
    `}}class x extends n{async connectedCallback(){this.data=await e.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave),this.addEventListener("delete",this.handleDelete)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave)}injectHTML(){const{title:t,content:e}=this.data;return i`
      <my-notepad-header title=${t}></my-notepad-header>
      <textarea>${e}</textarea>
    `}handleLocalSave(t){t.preventDefault();const e=this.getNotePadData();if(!e)return;const i=new Blob([e.content],{type:"text/plain"}),s=document.createElement("a");s.href=URL.createObjectURL(i),s.download=`${e.title}.txt`,s.click()}async handleSave(t){try{t.stopPropagation();const i=this.getNotePadData();if(!i)return;const s=await e.upsertData("notepad",i);if(!s)return;const n=`/notepad/${s}`;alert("저장되었습니다.");const a=new CustomEvent("iconChange",{detail:{path:n,label:i.title.replace(/ /g,"&nbsp;"),iconSrc:o}});document.querySelector("my-icons").dispatchEvent(a),router.navigateTo(n)}catch(t){alert("저장에 실패했습니다.")}}async handleDelete(t){try{if(t.stopPropagation(),!window.confirm("정말 삭제하시겠습니까?"))return;await e.deleteData("notepad",this.id),alert("삭제되었습니다.");const i=new CustomEvent("iconDelete",{detail:{path:`/notepad/${this.id}`}});document.querySelector("my-icons").dispatchEvent(i),router.replaceTo("/notepad")}catch(t){alert("삭제에 실패했습니다.")}}getNotePadData(){const t=this.querySelector("textarea").value.trim();if(!t)return alert("내용이 없습니다."),null;let e;for(;!e;)if(!(e=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),e||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:e.trim().replace(/ /g,"&nbsp;"),content:t.replace(/ /g,"&nbsp;").replace(/\n/g,"<br>").replace(/\t/g,"&nbsp;&nbsp;&nbsp;&nbsp;")}}get id(){return Number(this.getAttribute("id"))}}const S=!0,C=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],onClick:function(){const t=this.closest("my-notepad");0!==t.id?p.navigateTo("/notepad"):t.querySelector("textarea").value=""}},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],onClick:function(){0!==this.closest("my-notepad").id&&this.dispatchEvent(new CustomEvent("delete",{bubbles:!0}))}},{id:5,text:"페이지 설정(U)...",key:[],disable:S},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:S},{id:7,text:"끝내기(X)",key:[],disable:S}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:S},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:S},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:S},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:S},{id:12,text:"삭제(D)",key:["Del"],disable:S},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:S},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:S},{id:15,text:"다음 찾기(N)",key:["F3"],disable:S},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:S},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:S},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:S},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:S},{id:20,text:"시간/날짜(D)",key:["F5"],disable:S}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:S},{id:22,text:"글꼴(F)...",key:[],disable:S}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:S},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:S},{id:25,text:"상태 표시줄(S)",key:[],disable:S}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:S},{id:27,text:"피드백 보내기(F)",key:[],disable:S},{id:28,text:"메모장 정보(A)",key:[],disable:S}]}],E=C.reduce(((t,e)=>[...t,...e.slots]),[]),L=C;class $ extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}injectHTML(){return i`
      <header>
        <span>
          <img alt="notepad_icon" src=${o} />
          ${this.title} - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${L.map((t=>i`
              <button class="edit_button">
                ${t.title}(<u>${t.key}</u>)
                <div class="popup">
                  ${t.slots.map((t=>i`
                        <div class="sub" data-id="${t.id}" data-disable="${!!t.disable}">
                          <div>${t.text}</div>
                          ${t.key.length>0?`<div>${t.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(t){const e=t.target.closest(".view_button"),i=t.target.closest(".edit_button"),s=t.target.closest(".sub");e?this.clickViewButton(e):i?this.clickEditButton(i,s):this.closePopup()}clickViewButton(t){switch(t.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":p.back()}}clickEditButton(t,e){if(e){const t=Number(e.dataset.id),{onClick:i}=E.find((e=>e.id===t))||{};i&&i.call(this)}else this.togglePopup(t)}togglePopup(t){const e=t.querySelector(".popup");e.classList.contains("show")?e.classList.remove("show"):(this.closePopup(),e.classList.add("show"))}closePopup(){const t=this.querySelector(".popup.show");t?.classList.remove("show")}get title(){return this.getAttribute("title")}get title(){return this.getAttribute("title")}}class P extends n{injectHTML(){return i`
      ${s(20,((t,e)=>i`
            <ul>
              ${s(10,((t,s)=>i`<li>${e}, ${s}</li>`))}
            </ul>
          `))}
    `}}class D extends n{injectHTML(){return i`
      <div>7종의 테트로미노(블록)가 한묶음으로 랜덤하게 등장합니다.</div>
      <div>필드는 20 x 10 입니다.</div>
      <div>X : 시계방향 회전(우회전)</div>
      <div>Z : 반시계방향 회전(좌회전)</div>
    `}}(async()=>{try{await e.openDB()}catch(t){queueMicrotask((()=>alert("IndexedDB를 사용할 수 없습니다.")))}customElements.define("my-app",a),customElements.define("my-footer",y),customElements.define("my-home",m),customElements.define("my-tetris",g),customElements.define("my-flappybird",v),customElements.define("my-icons",w),customElements.define("my-icon",f),customElements.define("my-notepad",x),customElements.define("my-notepad-header",$),customElements.define("my-tetris-board",P),customElements.define("my-tetris-info",D)})(),window.addEventListener("load",(()=>p.render())),window.addEventListener("popstate",(()=>p.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,