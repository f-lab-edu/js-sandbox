(()=>{"use strict";var t="/js-sandbox/";const e=new class{db;constructor(t,e,i){this.dbName=t,this.dbVersion=e,this.stores=i}async openDB(){return new Promise(((t,e)=>{const i=window.indexedDB.open(this.dbName,this.dbVersion);i.onsuccess=()=>{this.db=i.result,t()},i.onerror=t=>{e(t)},i.onupgradeneeded=()=>{this.db=i.result,this.stores.forEach((t=>{this.db.objectStoreNames.contains(t)&&this.db.deleteObjectStore(t),this.db.createObjectStore(t,{keyPath:"id"})}))}}))}async getData(t,e){return new Promise(((i,n)=>{const s=this.db.transaction(t,"readonly").objectStore(t).get(e);s.onsuccess=()=>{i(s.result)},s.onerror=t=>{n(t)}}))}async getAllData(t){return new Promise(((e,i)=>{const n=this.db.transaction(t,"readonly").objectStore(t).getAll();n.onsuccess=()=>{e(n.result)},n.onerror=t=>{i(t)}}))}async upsertData(t,e){return new Promise(((i,n)=>{const s=this.db.transaction(t,"readwrite").objectStore(t),o={...e,id:e.id||(new Date).getTime()},a=s.put(o);a.onsuccess=()=>{i(a.result)},a.onerror=()=>{console.log(a.error),n(a.error)}}))}async deleteData(t,e){return new Promise(((i,n)=>{const s=this.db.transaction(t,"readwrite").objectStore(t).delete(e);s.onsuccess=()=>{i(!0)},s.onerror=t=>{n(t)}}))}}("sandboxDB",2,["notepad"]),i=(t,...e)=>String.raw(t,...e);class n extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.injectHTML()}injectHTML(){return""}}class s extends n{injectHTML(){return i`
      <div id="page"></div>
      <my-icons tabindex="-1"></my-icons>
      <my-footer></my-footer>
    `}}const o=t+"2a583f97b153f7da7d41.png",a="/js-sandbox",r=[{path:"/",html:i`<my-home></my-home>`,label:"Home",iconSrc:null},{path:"/tetris",html:i`<my-tetris></my-tetris>`,label:"Tetris",iconSrc:t+"71c0bea6462001116fcf.png"},{path:"/flappybird",html:i`<my-flappybird></my-flappybird>`,label:"Flappy&nbsp;Bird",iconSrc:t+"39b884119b49599495ed.png"},{path:"/notepad",html:i`<my-notepad></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:o},{path:"/notepad/:id",html:i`<my-notepad data-id=":id"></my-notepad>`,label:"Note&nbsp;Pad",iconSrc:null}],l=r.reduce(((t,e)=>{const{path:i,label:n,iconSrc:s}=e;return e.iconSrc?[...t,{path:i,label:n,iconSrc:s}]:t}),[]),c=async()=>[...(await e.getAllData("notepad")).reduce(((t,e)=>{const{id:i,title:n}=e;return[...t,{path:`/notepad/${i}`,label:n,iconSrc:o}]}),[])],d=r,h=new class{constructor(t){this.routes=t}pathToRegexp(t){return new RegExp(`^${t.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")}$`)}render(){const t=window.location.pathname,e=this.routes.find((e=>this.pathToRegexp(this.getUrlFrom(e.path)).test(t)));e?document.querySelector("#page").innerHTML=e.html.replace(":id",this.getIdFromPath(t)):this.replaceTo("/")}getIdFromPath(t){return t.match(/\d+/)?.[0]}navigateTo(t){this.getUrlFrom(t)!==window.location.pathname&&(window.history.pushState(null,null,a+t),this.render())}replaceTo(t){window.history.replaceState(null,null,a+t),this.render()}getUrlFrom(t){return`${a}${t}`}back(){window.history.back(),this.render()}}(d),u=t+"59cb65e4f8f2627d6c2c.png",p=t+"bc8d31a2338dd0b3f68a.png";class b extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick.bind(this))}injectHTML(){return i`
      <img alt="window_logo" src=${u} class="window_icon" />
      <div class="input_box">
        <img alt="search" src=${p} class="window_icon" /><input type="text" placeholder="찾기" />
      </div>
      ${l.map((t=>i` <my-icon data-path="${t.path}" data-iconSrc="${t.iconSrc}"></my-icon> `)).join("")}
    `}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}}class m extends n{}const y={I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[2,0,0],[2,2,2],[0,0,0]],L:[[0,0,3],[3,3,3],[0,0,0]],O:[[4,4],[4,4]],S:[[0,5,5],[5,5,0],[0,0,0]],T:[[0,6,0],[6,6,6],[0,0,0]],Z:[[7,7,0],[0,7,7],[0,0,0]]},k={0:"empty",1:"I",2:"J",3:"L",4:"O",5:"S",6:"T",7:"Z",10:"I freeze",20:"J freeze",30:"L freeze",40:"O freeze",50:"S freeze",60:"T freeze",70:"Z freeze"},v={1:100,2:300,3:500,4:800},g=10;class w{constructor(){this.createNewBlock()}rotate(t){const e=this.block[0].map(((t,e)=>this.block.map((t=>t[e])).reverse())),i=e[0].length,n=e.length;let s=this.x,o=this.y;s+i>g&&(s=g-i),s<0&&(s=0),o+n>20&&(o=20-n),o<0&&(o=0),this.canMove(t,s,o,e)&&(this.block=e,this.x=s,this.y=o)}moveLeft(t){this.canMove(t,this.x-1,this.y,this.block)&&(this.x-=1)}moveRight(t){this.canMove(t,this.x+1,this.y,this.block)&&(this.x+=1)}moveDown(t){this.canMove(t,this.x,this.y+1,this.block)?this.y+=1:0===this.y?(this.freeze(t),document.querySelector("my-tetris").stopGame()):(this.freeze(t),this.createNewBlock())}freeze(t){const{block:e,x:i,y:n}=this;e.forEach(((e,s)=>{e.forEach(((e,o)=>{0!==e&&(t[n+s][i+o]=10*e)}))}));const s=document.querySelector("my-tetris");var o;10===s.tetrominoCounter&&(s.tetrominoCounter=0,s.dropInterval*=.9),(o=function(){let e=0;return t.forEach(((i,n)=>{i.every((t=>t>=10))&&(e+=1,t.splice(n,1),t.unshift(Array(g).fill(0)))})),e}())>0&&(s.score+=v[o]??0),s.tetrominoCounter+=1}createNewBlock(){this.block=Object.values(y)[Math.floor(7*Math.random())];const t=this.getInitialBlockPos(g,this.block);this.x=t.x,this.y=t.y}canMove(t,e,i,n){for(let s=0;s<n.length;s+=1)for(let o=0;o<n[s].length;o+=1)if(0!==n[s][o]){const n=e+o,a=i+s;if(n<0||n>=g||a<0||a>=20||t[a][n]>=10)return!1}return!0}getInitialBlockPos(t,e){const i=e.findIndex((t=>t.some((t=>0!==t))));return{x:Math.floor((t-e[0].length)/2),y:-i}}clone(){const t=new w;return t.block=this.block.map((t=>[...t])),t.x=this.x,t.y=this.y,t}}class f extends n{constructor(){super(),this.board=this.getInitialBoard(g,20),this.start=!1,this.tetromino=null,this.score=0,this.lastTime=null,this.dropInterval=1e3,this.tetrominoCounter=0,this.animationId=null,this.startGame=this.startGame.bind(this),this.keydownHandler=this.keydownHandler.bind(this),this.dropBlock=this.dropBlock.bind(this)}connectedCallback(){super.connectedCallback(),this.querySelector("#start-button").addEventListener("click",this.startGame)}injectHTML(){return i`
      <button id="start-button">게임 시작</button>
      <div class="board">
        ${this.board.map((t=>i`
              <ul>
                ${t.map((t=>i`<li class="cell-${k[t]}"></li>`)).join("")}
              </ul>
            `)).join("")}
      </div>
      <span class="score">${this.score}</span>
    `}static get observedAttributes(){return["board"]}attributeChangedCallback(t){"board"===t&&(this.render(),console.log("board changed"))}getInitialBoard(t,e){return Array.from(Array(e),(()=>Array(t).fill(0)))}startGame(){this.start||(this.start=!0,this.tetromino=new w,this.tetrominoCounter+=1,this.updateBoard(),document.addEventListener("keydown",this.keydownHandler),this.lastTime=performance.now(),requestAnimationFrame(this.dropBlock))}stopGame(){this.start=!1,this.board=this.getInitialBoard(g,20),this.score=0,this.tetrominoCounter=0,this.dropInterval=1e3,cancelAnimationFrame(this.animationId),document.removeEventListener("keydown",this.keydownHandler)}dropBlock(t){if(t-this.lastTime>this.dropInterval){const e=this.tetromino.clone(),i=this.board;this.tetromino.moveDown(i),this.updateBoard(i,e),this.lastTime=t}this.animationId=requestAnimationFrame(this.dropBlock)}keydownHandler(t){const e=this.tetromino.clone(),i=this.board;"ArrowDown"===t.key?this.tetromino.moveDown(i):"ArrowUp"===t.key?this.tetromino.rotate(i):"ArrowLeft"===t.key?this.tetromino.moveLeft(i):"ArrowRight"===t.key&&this.tetromino.moveRight(i),this.updateBoard(i,e)}updateBoard(t=this.board,e=null){e&&this.removeOldBlock(e,t),this.putNewBlock(this.tetromino,t),this.board=t}removeOldBlock(t,e){const{block:i,x:n,y:s}=t;i.forEach(((t,i)=>{t.forEach(((t,o)=>{e[s+i]?.[n+o]===t&&(e[s+i][n+o]=0)}))}))}putNewBlock(t,e){const{x:i,y:n,block:s}=t;s.forEach(((t,s)=>{t.forEach(((t,o)=>{0!==t&&(e[n+s][i+o]=t)}))}))}get board(){return JSON.parse(this.getAttribute("board"))}set board(t){this.setAttribute("board",JSON.stringify(t))}}class x extends n{injectHTML(){return i`
      <h1>Flappy Bird</h1>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
      <p>You are viewing the Flappy Bird component!</p>
    `}}class C extends n{async connectedCallback(){this.icons=[...l,...await c()],super.connectedCallback(),this.addEventListener("click",this.handleClick),this.addEventListener("dblclick",this.handleDoubleClick),this.addEventListener("keydown",this.handleKeyDown),this.addEventListener("iconChange",this.handleIconChange),this.addEventListener("iconDelete",this.handleIconDelete)}static get observedAttributes(){return["icons"]}attributeChangedCallback(t,e,i){e!==i&&this.render()}injectHTML(){return i`
      ${this.icons.map((t=>i`
            <my-icon data-path=${t.path} data-label=${t.label} data-iconSrc=${t.iconSrc}></my-icon>
          `)).join("")}
    `}get icons(){return JSON.parse(this.getAttribute("icons"))}set icons(t){this.setAttribute("icons",JSON.stringify(t))}handleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");e.toggleAttribute("checked"),this.querySelectorAll("my-icon").forEach((t=>{t!==e&&t.removeAttribute("checked")}))}handleDoubleClick(t){if(!t.target.closest("my-icon"))return;const e=t.target.closest("my-icon");h.navigateTo(e.dataset.path)}handleKeyDown(t){const e=this.querySelectorAll("my-icon[checked]");if("Enter"===t.key){if(e.length>1)return;if(!e)return;h.navigateTo(e[0].dataset.path)}}handleIconChange(t){const{path:e,label:i,iconSrc:n}=t.detail,s=this.icons.findIndex((t=>t.path===e));if(-1===s)this.icons=[...this.icons,{path:e,label:i,iconSrc:n}];else{const t=[...this.icons];t[s]={path:e,label:i,iconSrc:n},this.icons=t}}handleIconDelete(t){const{path:e}=t.detail;this.icons=this.icons.filter((t=>t.path!==e))}}class S extends n{injectHTML(){const{label:t,iconsrc:e}=this.dataset;return i`
      <img alt="${t}_icon" src=${e} />
      ${t?`<span class="icon_name">${t}</span>`:""}
    `}}class E extends n{async connectedCallback(){this.data=await e.getData("notepad",this.id)??{title:"제목없음",content:""},super.connectedCallback(),this.addEventListener("save",this.handleSave),this.addEventListener("localSave",this.handleLocalSave),this.addEventListener("delete",this.handleDelete)}disconnectedCallback(){this.removeEventListener("save",this.handleSave),this.removeEventListener("localSave",this.handleLocalSave),this.removeEventListener("delete",this.handleDelete)}injectHTML(){const{title:t,content:e}=this.data;return i`
      <my-notepad-header title=${t}></my-notepad-header>
      <textarea>${e}</textarea>
    `}handleLocalSave(t){t.preventDefault();const e=this.getNotePadData();if(!e)return;const i=new Blob([e.content],{type:"text/plain"}),n=document.createElement("a");n.href=URL.createObjectURL(i),n.download=`${e.title}.txt`,n.click()}async handleSave(t){t.stopPropagation();const i=this.getNotePadData();if(i)try{const t=await e.upsertData("notepad",i),n=`/notepad/${t}`;alert("저장되었습니다.");const s=new CustomEvent("iconChange",{detail:{path:n,label:i.title,iconSrc:o}});document.querySelector("my-icons").dispatchEvent(s),this.id===t?this.title=i.title.replace(/&nbsp;/g," "):h.navigateTo(n)}catch(t){alert("저장에 실패했습니다.")}}async handleDelete(t){try{if(t.stopPropagation(),!window.confirm("정말 삭제하시겠습니까?"))return;await e.deleteData("notepad",this.id),alert("삭제되었습니다.");const i=new CustomEvent("iconDelete",{detail:{path:`/notepad/${this.id}`}});document.querySelector("my-icons").dispatchEvent(i),h.replaceTo("/notepad")}catch(t){alert("삭제에 실패했습니다.")}}getNotePadData(){const t=this.querySelector("textarea").value.trim();if(!t)return alert("내용이 없습니다."),null;let e;for(;!e;)if(!(e=prompt("파일명을 입력하세요.",this.data.title.replace(/&nbsp;/g," ")),e||window.confirm("제목은 필수입니다.")))return null;return{id:this.id,title:e.trim().replace(/ /g,"&nbsp;"),content:t.replace(/ /g,"&nbsp;")}}get id(){return Number(this.getAttribute("data-id"))}set title(t){this.querySelector("my-notepad-header").setAttribute("title",t)}}const L=!0,B=[{id:"file",title:"파일",key:"F",slots:[{id:1,text:"새로 만들기(N)",key:["Ctrl","N"],onClick:function(){const t=document.querySelector("my-notepad");t.getAttribute("data-id")?h.navigateTo("/notepad"):t.render()}},{id:2,text:"내 컴퓨터에 저장(W)",key:["Ctrl","Shift","N"],onClick:function(){this.dispatchEvent(new CustomEvent("localSave",{bubbles:!0}))}},{id:3,text:"저장(S)",key:["Ctrl","S"],onClick:function(){this.dispatchEvent(new CustomEvent("save",{bubbles:!0}))}},{id:4,text:"삭제(D)",key:["Ctrl","Shift","S"],onClick:function(){document.querySelector("my-notepad").getAttribute("data-id")&&this.dispatchEvent(new CustomEvent("delete",{bubbles:!0}))}},{id:5,text:"페이지 설정(U)...",key:[],disable:L},{id:6,text:"인쇄(P)...",key:["Ctrl","P"],disable:L},{id:7,text:"끝내기(X)",key:[],disable:L}]},{id:"edit",title:"편집",key:"E",slots:[{id:8,text:"실행 취소(U)",key:["Ctrl","Z"],disable:L},{id:9,text:"잘라내기(T)",key:["Ctrl","X"],disable:L},{id:10,text:"복사(C)",key:["Ctrl","C"],disable:L},{id:11,text:"붙여넣기(P)",key:["Ctrl","V"],disable:L},{id:12,text:"삭제(D)",key:["Del"],disable:L},{id:13,text:"Bing으로 검색(S)...",key:["Ctrl","E"],disable:L},{id:14,text:"찾기(F)...",key:["Ctrl","F"],disable:L},{id:15,text:"다음 찾기(N)",key:["F3"],disable:L},{id:16,text:"이전 찾기(V)",key:["Shift","F3"],disable:L},{id:17,text:"바꾸기(R)...",key:["Ctrl","H"],disable:L},{id:18,text:"이동(G)...",key:["Ctrl","G"],disable:L},{id:19,text:"모두 선택(A)",key:["Ctrl","A"],disable:L},{id:20,text:"시간/날짜(D)",key:["F5"],disable:L}]},{id:"format",title:"서식",key:"O",slots:[{id:21,text:"자동 줄 바꿈(W)",key:[],disable:L},{id:22,text:"글꼴(F)...",key:[],disable:L}]},{id:"view",title:"보기",key:"V",slots:[{id:23,text:"확대하기(Z)",key:["Ctrl","+"],disable:L},{id:24,text:"축소하기(X)",key:["Ctrl","-"],disable:L},{id:25,text:"상태 표시줄(S)",key:[],disable:L}]},{id:"help",title:"도움말",key:"H",slots:[{id:26,text:"도움말 보기(H)",key:[],disable:L},{id:27,text:"피드백 보내기(F)",key:[],disable:L},{id:28,text:"메모장 정보(A)",key:[],disable:L}]}],$=B.reduce(((t,e)=>[...t,...e.slots]),[]),D=B;class T extends n{connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}static get observedAttributes(){return["title"]}attributeChangedCallback(t,e,i){"title"===t&&e&&(this.querySelector("#title").innerText=i)}injectHTML(){return i`
      <header>
        <span>
          <img alt="notepad_icon" src=${o} />
          <span id="title">${this.title}</span> - Windows 메모장
        </span>
        <div class="view_buttons">
          <button class="view_button" id="mini">🗕</button>
          <button class="view_button" id="full">🗖</button>
          <button class="view_button" id="close">Ⅹ</button>
        </div>
      </header>
      <div class="edit_buttons">
        ${D.map((t=>i`
              <button class="edit_button">
                ${t.title}(<u>${t.key}</u>)
                <div class="popup">
                  ${t.slots.map((t=>i`
                        <div class="sub" data-id="${t.id}" data-disable="${!!t.disable}">
                          <div>${t.text}</div>
                          ${t.key.length>0?`<div>${t.key.join(" + ")}</div>`:""}
                        </div>
                      `)).join("")}
                </div>
              </button>
            `)).join("")}
      </div>
    `}handleClick(t){const e=t.target.closest(".view_button"),i=t.target.closest(".edit_button"),n=t.target.closest(".sub");e?this.clickViewButton(e):i?this.clickEditButton(i,n):this.closePopup()}clickViewButton(t){switch(t.id){case"full":this.parentElement.classList.toggle("fullscreen");break;case"mini":case"close":h.back()}}clickEditButton(t,e){if(e){const t=Number(e.dataset.id),{onClick:i}=$.find((e=>e.id===t))||{};i&&i.call(this)}else this.togglePopup(t)}togglePopup(t){const e=t.querySelector(".popup");e.classList.contains("show")?e.classList.remove("show"):(this.closePopup(),e.classList.add("show"))}closePopup(){const t=this.querySelector(".popup.show");t?.classList.remove("show")}get title(){return this.getAttribute("title")}}(async()=>{try{await e.openDB()}catch(t){queueMicrotask((()=>alert("IndexedDB를 사용할 수 없습니다.")))}customElements.define("my-app",s),customElements.define("my-footer",b),customElements.define("my-home",m),customElements.define("my-tetris",f),customElements.define("my-flappybird",x),customElements.define("my-icons",C),customElements.define("my-icon",S),customElements.define("my-notepad",E),customElements.define("my-notepad-header",T)})(),window.addEventListener("load",(()=>h.render())),window.addEventListener("popstate",(()=>h.render()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDQSxJQUFJQSxFQ0RvQixlQ2dJeEIsTUFFQSxFQUZrQixJQWhJbEIsTUFDRUMsR0FRQUMsWUFBWUMsRUFBUUMsRUFBV0MsR0FDN0JDLEtBQUtILE9BQVNBLEVBQ2RHLEtBQUtGLFVBQVlBLEVBQ2pCRSxLQUFLRCxPQUFTQSxDQUNoQixDQU1BRSxlQUNFLE9BQU8sSUFBSUMsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVQyxPQUFPQyxVQUFVQyxLQUFLUixLQUFLSCxPQUFRRyxLQUFLRixXQUV4RE8sRUFBUUksVUFBWSxLQUNsQlQsS0FBS0wsR0FBS1UsRUFBUUssT0FDbEJQLEdBQVMsRUFHWEUsRUFBUU0sUUFBV0MsSUFDakJSLEVBQU9RLEVBQUUsRUFHWFAsRUFBUVEsZ0JBQWtCLEtBQ3hCYixLQUFLTCxHQUFLVSxFQUFRSyxPQUVsQlYsS0FBS0QsT0FBT2UsU0FBU0MsSUFDZmYsS0FBS0wsR0FBR3FCLGlCQUFpQkMsU0FBU0YsSUFDcENmLEtBQUtMLEdBQUd1QixrQkFBa0JILEdBRTVCZixLQUFLTCxHQUFHd0Isa0JBQWtCSixFQUFPLENBQUVLLFFBQVMsTUFBTyxHQUNuRCxDQUNILEdBRUwsQ0FRQW5CLGNBQWNvQixFQUFXQyxHQUN2QixPQUFPLElBQUlwQixTQUFRLENBQUNDLEVBQVNDLEtBQzNCLE1BQU1DLEVBQVVMLEtBQUtMLEdBQUc0QixZQUFZRixFQUFXLFlBQVlHLFlBQVlILEdBQVdJLElBQUlILEdBRXRGakIsRUFBUUksVUFBWSxLQUNsQk4sRUFBUUUsRUFBUUssT0FBTyxFQUd6QkwsRUFBUU0sUUFBV0MsSUFDakJSLEVBQU9RLEVBQUUsQ0FDVixHQUVMLENBT0FYLGlCQUFpQm9CLEdBQ2YsT0FBTyxJQUFJbkIsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVTCxLQUFLTCxHQUFHNEIsWUFBWUYsRUFBVyxZQUFZRyxZQUFZSCxHQUFXSyxTQUVsRnJCLEVBQVFJLFVBQVksS0FDbEJOLEVBQVFFLEVBQVFLLE9BQU8sRUFHekJMLEVBQVFNLFFBQVdDLElBQ2pCUixFQUFPUSxFQUFFLENBQ1YsR0FFTCxDQVFBWCxpQkFBaUJvQixFQUFXTSxHQUMxQixPQUFPLElBQUl6QixTQUFRLENBQUNDLEVBQVNDLEtBQzNCLE1BQU1vQixFQUFjeEIsS0FBS0wsR0FBRzRCLFlBQVlGLEVBQVcsYUFBYUcsWUFBWUgsR0FDdEVPLEVBQWUsSUFBS0QsRUFBTUwsR0FBSUssRUFBS0wsS0FBTSxJQUFJTyxNQUFPQyxXQUNwRHpCLEVBQVVtQixFQUFZTyxJQUFJSCxHQUVoQ3ZCLEVBQVFJLFVBQVksS0FDbEJOLEVBQVFFLEVBQVFLLE9BQU8sRUFHekJMLEVBQVFNLFFBQVUsS0FDaEJxQixRQUFRQyxJQUFJNUIsRUFBUTZCLE9BQ3BCOUIsRUFBT0MsRUFBUTZCLE1BQU0sQ0FDdEIsR0FFTCxDQVFBakMsaUJBQWlCb0IsRUFBV0MsR0FDMUIsT0FBTyxJQUFJcEIsU0FBUSxDQUFDQyxFQUFTQyxLQUMzQixNQUFNQyxFQUFVTCxLQUFLTCxHQUFHNEIsWUFBWUYsRUFBVyxhQUFhRyxZQUFZSCxHQUFXYyxPQUFPYixHQUUxRmpCLEVBQVFJLFVBQVksS0FDbEJOLEdBQVEsRUFBSyxFQUdmRSxFQUFRTSxRQUFXQyxJQUNqQlIsRUFBT1EsRUFBRSxDQUNWLEdBRUwsR0FHOEIsWUFBYSxFQUFHLENBQUMsWUNoSTNDd0IsRUFBWSxDQUFDQyxLQUFXQyxJQUNyQkMsT0FBT0MsSUFBSUgsS0FBV0MsR0NEaEIsTUFBTUcsVUFBcUJDLFlBQ3hDQyxvQkFDRTNDLEtBQUs0QyxRQUNQLENBRUFBLFNBQ0U1QyxLQUFLNkMsVUFBWTdDLEtBQUs4QyxZQUN4QixDQUVBQSxhQUNFLE1BQU8sRUFDVCxFQ1JhLE1BQU1DLFVBQVlOLEVBQy9CSyxhQUNFLE9BQU8sQ0FBSTs7OztLQUtiLEUscUNDSklFLEVBQXlELGNBRXpEQyxFQUFTLENBQ2IsQ0FDRUMsS0FBTSxJQUNOQyxLQUFNLENBQUksc0JBQ1ZDLE1BQU8sT0FDUEMsUUFBUyxNQUVYLENBQ0VILEtBQU0sVUFDTkMsS0FBTSxDQUFJLDBCQUNWQyxNQUFPLFNBQ1BDLFEsOEJBRUYsQ0FDRUgsS0FBTSxjQUNOQyxLQUFNLENBQUksa0NBQ1ZDLE1BQU8sbUJBQ1BDLFEsOEJBRUYsQ0FDRUgsS0FBTSxXQUNOQyxLQUFNLENBQUksNEJBQ1ZDLE1BQU8sZ0JBQ1BDLFFBQVMsR0FFWCxDQUNFSCxLQUFNLGVBQ05DLEtBQU0sQ0FBSSwwQ0FDVkMsTUFBTyxnQkFDUEMsUUFBUyxPQUlQQyxFQUFZTCxFQUFPTSxRQUFPLENBQUNDLEVBQU1DLEtBQ3JDLE1BQU0sS0FBRVAsRUFBSSxNQUFFRSxFQUFLLFFBQUVDLEdBQVlJLEVBQ2pDLE9BQUtBLEVBQU9KLFFBQ0wsSUFBSUcsRUFBTSxDQUFFTixPQUFNRSxRQUFPQyxZQURKRyxDQUNjLEdBQ3pDLElBRUdFLEVBQWdCekQsU0FPYixXQU5tQixhQUFxQixZQUNkc0QsUUFBTyxDQUFDQyxFQUFNRyxLQUM3QyxNQUFNLEdBQUVyQyxFQUFFLE1BQUVzQyxHQUFVRCxFQUN0QixNQUFPLElBQUlILEVBQU0sQ0FBRU4sS0FBTSxZQUFZNUIsSUFBTThCLE1BQU9RLEVBQU9QLFFBQVMsR0FBVSxHQUMzRSxLQUtMLElDTEEsRUFGZSxJQWhEZixNQUNFekQsWUFBWWlFLEdBQ1Y3RCxLQUFLaUQsT0FBU1ksQ0FDaEIsQ0FFQUMsYUFBYVosR0FDWCxPQUFPLElBQUlhLE9BQU8sSUFBSWIsRUFBS2MsUUFBUSxNQUFPLE9BQU9BLFFBQVEsUUFBUyxXQUNwRSxDQUVBcEIsU0FDRSxNQUFNcUIsRUFBYzNELE9BQU80RCxTQUFTQyxTQUM5Qk4sRUFBUTdELEtBQUtpRCxPQUFPbUIsTUFBTUMsR0FDdkJyRSxLQUFLOEQsYUFBYTlELEtBQUtzRSxXQUFXRCxFQUFNbkIsT0FBT3FCLEtBQUtOLEtBR3hESixFQUtMVyxTQUFTQyxjQUFjLFNBQVM1QixVQUFZZ0IsRUFBTVYsS0FBS2EsUUFBUSxNQUFPaEUsS0FBSzBFLGNBQWNULElBSnZGakUsS0FBSzJFLFVBQVUsSUFLbkIsQ0FFQUQsY0FBY3hCLEdBQ1osT0FBT0EsRUFBSzBCLE1BQU0sU0FBUyxFQUM3QixDQUVBQyxXQUFXQyxHQUNMOUUsS0FBS3NFLFdBQVdRLEtBQVN4RSxPQUFPNEQsU0FBU0MsV0FDN0M3RCxPQUFPeUUsUUFBUUMsVUFBVSxLQUFNLEtBQU1oQyxFQUFXOEIsR0FDaEQ5RSxLQUFLNEMsU0FDUCxDQUVBK0IsVUFBVUcsR0FDUnhFLE9BQU95RSxRQUFRRSxhQUFhLEtBQU0sS0FBTWpDLEVBQVc4QixHQUNuRDlFLEtBQUs0QyxRQUNQLENBRUEwQixXQUFXUSxHQUNULE1BQU8sR0FBRzlCLElBQVc4QixHQUN2QixDQUVBSSxPQUNFNUUsT0FBT3lFLFFBQVFHLE9BQ2ZsRixLQUFLNEMsUUFDUCxHQUd3QixHLDhEQzNDWCxNQUFNdUMsVUFBZTFDLEVBQ2xDRSxvQkFDRXlDLE1BQU16QyxvQkFDTjNDLEtBQUtxRixpQkFBaUIsUUFBU3JGLEtBQUtzRixZQUFZQyxLQUFLdkYsTUFDdkQsQ0FFQThDLGFBQ0UsT0FBTyxDQUFJO21DQUNvQjs7Z0NBRUg7O1FBRXhCUSxFQUFBLEtBQ01LLEdBQ0csQ0FBSSx3QkFBd0JBLEVBQUtULHVCQUF1QlMsRUFBS04seUJBRXJFbUMsS0FBSztLQUVaLENBRUFGLFlBQVkxRSxHQUNWLElBQUtBLEVBQUU2RSxPQUFPQyxRQUFRLFdBQVksT0FFbEMsTUFBTS9CLEVBQU8vQyxFQUFFNkUsT0FBT0MsUUFBUSxXQUM5QixhQUFrQi9CLEVBQUtnQyxRQUFRekMsS0FDakMsRUM5QmEsTUFBTTBDLFVBQWFuRCxHQ0ZsQyxNQUFNb0QsRUFBUyxDQUNiQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNWLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDVixDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQ1YsQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUVaQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLElBRVRDLEVBQUcsQ0FDRCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsSUFFVEMsRUFBRyxDQUNELENBQUMsRUFBRyxHQUNKLENBQUMsRUFBRyxJQUVOQyxFQUFHLENBQ0QsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLElBRVRDLEVBQUcsQ0FDRCxDQUFDLEVBQUcsRUFBRyxHQUNQLENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsSUFFVEMsRUFBRyxDQUNELENBQUMsRUFBRyxFQUFHLEdBQ1AsQ0FBQyxFQUFHLEVBQUcsR0FDUCxDQUFDLEVBQUcsRUFBRyxLQUlMQyxFQUFnQixDQUNwQixFQUFHLFFBQ0gsRUFBRyxJQUNILEVBQUcsSUFDSCxFQUFHLElBQ0gsRUFBRyxJQUNILEVBQUcsSUFDSCxFQUFHLElBQ0gsRUFBRyxJQUNILEdBQUksV0FDSixHQUFJLFdBQ0osR0FBSSxXQUNKLEdBQUksV0FDSixHQUFJLFdBQ0osR0FBSSxXQUNKLEdBQUksWUFHQUMsRUFBUyxDQUNiLEVBQUcsSUFDSCxFQUFHLElBQ0gsRUFBRyxJQUNILEVBQUcsS0FHQ0MsRUFBYyxHQzdETCxNQUFNQyxFQUNuQjVHLGNBQ0VJLEtBQUt5RyxnQkFDUCxDQUVBQyxPQUFPQyxHQUNMLE1BQU1DLEVBQWU1RyxLQUFLNkcsTUFBTSxHQUFHQyxLQUFJLENBQUNDLEVBQUdDLElBQU1oSCxLQUFLNkcsTUFBTUMsS0FBS0csR0FBUUEsRUFBSUQsS0FBSUUsWUFDM0VDLEVBQWVQLEVBQWEsR0FBR1EsT0FDL0JDLEVBQWdCVCxFQUFhUSxPQUNuQyxJQUFJRSxFQUFPdEgsS0FBS3VILEVBQ1pDLEVBQU94SCxLQUFLeUgsRUFFWkgsRUFBT0gsRUFBZVosSUFDeEJlLEVBQU9mLEVBQWNZLEdBRW5CRyxFQUFPLElBQ1RBLEVBQU8sR0FFTEUsRUFBT0gsRUQ0Q00sS0MzQ2ZHLEVEMkNlLEdDM0NPSCxHQUVwQkcsRUFBTyxJQUNUQSxFQUFPLEdBR0x4SCxLQUFLMEgsUUFBUWYsRUFBT1csRUFBTUUsRUFBTVosS0FDbEM1RyxLQUFLNkcsTUFBUUQsRUFDYjVHLEtBQUt1SCxFQUFJRCxFQUNUdEgsS0FBS3lILEVBQUlELEVBRWIsQ0FFQUcsU0FBU2hCLEdBQ0gzRyxLQUFLMEgsUUFBUWYsRUFBTzNHLEtBQUt1SCxFQUFJLEVBQUd2SCxLQUFLeUgsRUFBR3pILEtBQUs2RyxTQUMvQzdHLEtBQUt1SCxHQUFLLEVBRWQsQ0FFQUssVUFBVWpCLEdBQ0ozRyxLQUFLMEgsUUFBUWYsRUFBTzNHLEtBQUt1SCxFQUFJLEVBQUd2SCxLQUFLeUgsRUFBR3pILEtBQUs2RyxTQUMvQzdHLEtBQUt1SCxHQUFLLEVBRWQsQ0FFQU0sU0FBU2xCLEdBQ0gzRyxLQUFLMEgsUUFBUWYsRUFBTzNHLEtBQUt1SCxFQUFHdkgsS0FBS3lILEVBQUksRUFBR3pILEtBQUs2RyxPQUMvQzdHLEtBQUt5SCxHQUFLLEVBQ1UsSUFBWHpILEtBQUt5SCxHQUNkekgsS0FBSzhILE9BQU9uQixHQUNJbkMsU0FBU0MsY0FBYyxhQUMvQnNELGFBRVIvSCxLQUFLOEgsT0FBT25CLEdBQ1ozRyxLQUFLeUcsaUJBRVQsQ0FFQXFCLE9BQU9uQixHQUNMLE1BQU0sTUFBRUUsRUFBSyxFQUFFVSxFQUFDLEVBQUVFLEdBQU16SCxLQUN4QjZHLEVBQU0vRixTQUFRLENBQUNtRyxFQUFLRCxLQUNsQkMsRUFBSW5HLFNBQVEsQ0FBQ2tILEVBQUtDLEtBQ0osSUFBUkQsSUFDRnJCLEVBQU1jLEVBQUlULEdBQUdPLEVBQUlVLEdBQVcsR0FBTkQsRUFDeEIsR0FDQSxJQUdKLE1BQU1FLEVBQVUxRCxTQUFTQyxjQUFjLGFBMkJ2QyxJQUFpQjBELEVBbEJrQixLQUE3QkQsRUFBUUUsbUJBQ1ZGLEVBQVFFLGlCQUFtQixFQUMzQkYsRUFBUUcsY0FBZ0IsS0FnQlhGLEVBWmpCLFdBQ0UsSUFBSXpILEVBQVMsRUFRYixPQVBBaUcsRUFBTTdGLFNBQVEsQ0FBQ21HLEVBQUtELEtBQ2RDLEVBQUlxQixPQUFPQyxHQUFTQSxHQUFRLE9BQzlCN0gsR0FBVSxFQUNWaUcsRUFBTTZCLE9BQU94QixFQUFHLEdBQ2hCTCxFQUFNOEIsUUFBUUMsTUFBTW5DLEdBQWFvQyxLQUFLLElBQ3hDLElBRUtqSSxDQUNULENBdEJRa0ksSUF5QlksSUFDaEJWLEVBQVFXLE9BQVN2QyxFQUFPNkIsSUFBZ0IsR0F2QjVDRCxFQUFRRSxrQkFBb0IsQ0EwQjlCLENBRUEzQixpQkFDRXpHLEtBQUs2RyxNQUFRaUMsT0FBT3hHLE9BQU91RCxHQUFRa0QsS0FBS0MsTUFBc0IsRUFBaEJELEtBQUtFLFdBQ25ELE1BQU1DLEVBQWtCbEosS0FBS21KLG1CQUFtQjVDLEVBQWF2RyxLQUFLNkcsT0FDbEU3RyxLQUFLdUgsRUFBSTJCLEVBQWdCM0IsRUFDekJ2SCxLQUFLeUgsRUFBSXlCLEVBQWdCekIsQ0FDM0IsQ0FFQUMsUUFBUWYsRUFBT1ksRUFBR0UsRUFBR1osR0FDbkIsSUFBSyxJQUFJSSxFQUFNLEVBQUdBLEVBQU1KLEVBQU1PLE9BQVFILEdBQU8sRUFDM0MsSUFBSyxJQUFJZSxFQUFNLEVBQUdBLEVBQU1uQixFQUFNSSxHQUFLRyxPQUFRWSxHQUFPLEVBQ2hELEdBQXdCLElBQXBCbkIsRUFBTUksR0FBS2UsR0FBWSxDQUN6QixNQUFNb0IsRUFBUTdCLEVBQUlTLEVBQ1pxQixFQUFRNUIsRUFBSVIsRUFDbEIsR0FBSW1DLEVBQVEsR0FBS0EsR0FBUzdDLEdBQWU4QyxFQUFRLEdBQUtBLEdEcEQzQyxJQ29Eb0UxQyxFQUFNMEMsR0FBT0QsSUFBVSxHQUNwRyxPQUFPLENBRVgsQ0FJSixPQUFPLENBQ1QsQ0FFQUQsbUJBQW1CRyxFQUFPekMsR0FDeEIsTUFBTTBDLEVBQXdCMUMsRUFBTTJDLFdBQVd2QyxHQUFRQSxFQUFJd0MsTUFBTWxCLEdBQWtCLElBQVRBLE1BRTFFLE1BQU8sQ0FDTGhCLEVBQUd3QixLQUFLQyxPQUFPTSxFQUFRekMsRUFBTSxHQUFHTyxRQUFVLEdBQzFDSyxHQUFJOEIsRUFFUixDQUVBRyxRQUNFLE1BQU1DLEVBQVMsSUFBSW5ELEVBSW5CLE9BSEFtRCxFQUFPOUMsTUFBUTdHLEtBQUs2RyxNQUFNQyxLQUFLRyxHQUFRLElBQUlBLEtBQzNDMEMsRUFBT3BDLEVBQUl2SCxLQUFLdUgsRUFDaEJvQyxFQUFPbEMsRUFBSXpILEtBQUt5SCxFQUNUa0MsQ0FDVCxFQ3ZJYSxNQUFNQyxVQUFlbkgsRUFDbEM3QyxjQUNFd0YsUUFDQXBGLEtBQUsyRyxNQUFRM0csS0FBSzZKLGdCQUFnQnRELEVGdURqQixJRXREakJ2RyxLQUFLOEosT0FBUSxFQUNiOUosS0FBSytKLFVBQVksS0FDakIvSixLQUFLNkksTUFBUSxFQUNiN0ksS0FBS2dLLFNBQVcsS0FDaEJoSyxLQUFLcUksYUFBZSxJQUNwQnJJLEtBQUtvSSxpQkFBbUIsRUFDeEJwSSxLQUFLaUssWUFBYyxLQUNuQmpLLEtBQUtrSyxVQUFZbEssS0FBS2tLLFVBQVUzRSxLQUFLdkYsTUFDckNBLEtBQUttSyxlQUFpQm5LLEtBQUttSyxlQUFlNUUsS0FBS3ZGLE1BQy9DQSxLQUFLb0ssVUFBWXBLLEtBQUtvSyxVQUFVN0UsS0FBS3ZGLEtBQ3ZDLENBRUEyQyxvQkFDRXlDLE1BQU16QyxvQkFDTjNDLEtBQUt5RSxjQUFjLGlCQUFpQlksaUJBQWlCLFFBQVNyRixLQUFLa0ssVUFDckUsQ0FFQXBILGFBQ0UsT0FBTyxDQUFJOzs7VUFHTDlDLEtBQUsyRyxNQUNKRyxLQUNFRyxHQUFRLENBQUk7O2tCQUVQQSxFQUFJSCxLQUFLa0IsR0FBUSxDQUFJLG1CQUFtQjNCLEVBQWMyQixjQUFleEMsS0FBSzs7Z0JBSWpGQSxLQUFLOzs0QkFFWXhGLEtBQUs2STtLQUUvQixDQUVXd0IsZ0NBQ1QsTUFBTyxDQUFDLFFBQ1YsQ0FFQUMseUJBQXlCQyxHQUNWLFVBQVRBLElBQ0Z2SyxLQUFLNEMsU0FDTFosUUFBUUMsSUFBSSxpQkFFaEIsQ0FFQTRILGdCQUFnQlAsRUFBT2tCLEdBQ3JCLE9BQU85QixNQUFNK0IsS0FBSy9CLE1BQU04QixJQUFTLElBQU05QixNQUFNWSxHQUFPWCxLQUFLLElBQzNELENBRUF1QixZQUNNbEssS0FBSzhKLFFBQ1Q5SixLQUFLOEosT0FBUSxFQUNiOUosS0FBSytKLFVBQVksSUFBSXZELEVBQ3JCeEcsS0FBS29JLGtCQUFvQixFQUN6QnBJLEtBQUswSyxjQUNMbEcsU0FBU2EsaUJBQWlCLFVBQVdyRixLQUFLbUssZ0JBRTFDbkssS0FBS2dLLFNBQVdXLFlBQVlDLE1BQzVCQyxzQkFBc0I3SyxLQUFLb0ssV0FDN0IsQ0FFQXJDLFdBQ0UvSCxLQUFLOEosT0FBUSxFQUNiOUosS0FBSzJHLE1BQVEzRyxLQUFLNkosZ0JBQWdCdEQsRUZWakIsSUVXakJ2RyxLQUFLNkksTUFBUSxFQUNiN0ksS0FBS29JLGlCQUFtQixFQUN4QnBJLEtBQUtxSSxhQUFlLElBQ3BCeUMscUJBQXFCOUssS0FBS2lLLGFBQzFCekYsU0FBU3VHLG9CQUFvQixVQUFXL0ssS0FBS21LLGVBQy9DLENBRUFDLFVBQVVZLEdBR1IsR0FGa0JBLEVBQVloTCxLQUFLZ0ssU0FFbkJoSyxLQUFLcUksYUFBYyxDQUNqQyxNQUFNNEMsRUFBZ0JqTCxLQUFLK0osVUFBVUwsUUFDL0J3QixFQUFXbEwsS0FBSzJHLE1BQ3RCM0csS0FBSytKLFVBQVVsQyxTQUFTcUQsR0FDeEJsTCxLQUFLMEssWUFBWVEsRUFBVUQsR0FDM0JqTCxLQUFLZ0ssU0FBV2dCLENBQ2xCLENBRUFoTCxLQUFLaUssWUFBY1ksc0JBQXNCN0ssS0FBS29LLFVBQ2hELENBRUFELGVBQWV2SixHQUNiLE1BQU1xSyxFQUFnQmpMLEtBQUsrSixVQUFVTCxRQUMvQndCLEVBQVdsTCxLQUFLMkcsTUFFUixjQUFWL0YsRUFBRXVLLElBQ0puTCxLQUFLK0osVUFBVWxDLFNBQVNxRCxHQUNMLFlBQVZ0SyxFQUFFdUssSUFDWG5MLEtBQUsrSixVQUFVckQsT0FBT3dFLEdBQ0gsY0FBVnRLLEVBQUV1SyxJQUNYbkwsS0FBSytKLFVBQVVwQyxTQUFTdUQsR0FDTCxlQUFWdEssRUFBRXVLLEtBQ1huTCxLQUFLK0osVUFBVW5DLFVBQVVzRCxHQUczQmxMLEtBQUswSyxZQUFZUSxFQUFVRCxFQUM3QixDQUVBUCxZQUFZUSxFQUFXbEwsS0FBSzJHLE1BQU9zRSxFQUFnQixNQUM3Q0EsR0FDRmpMLEtBQUtvTCxlQUFlSCxFQUFlQyxHQUdyQ2xMLEtBQUtxTCxZQUFZckwsS0FBSytKLFVBQVdtQixHQUNqQ2xMLEtBQUsyRyxNQUFRdUUsQ0FDZixDQUVBRSxlQUFlckIsRUFBV21CLEdBQ3hCLE1BQU0sTUFBRXJFLEVBQUssRUFBRVUsRUFBQyxFQUFFRSxHQUFNc0MsRUFFeEJsRCxFQUFNL0YsU0FBUSxDQUFDbUcsRUFBS0QsS0FDbEJDLEVBQUluRyxTQUFRLENBQUNrSCxFQUFLQyxLQUNaaUQsRUFBU3pELEVBQUlULEtBQUtPLEVBQUlVLEtBQU9ELElBRS9Ca0QsRUFBU3pELEVBQUlULEdBQUdPLEVBQUlVLEdBQUssRUFDM0IsR0FDQSxHQUVOLENBRUFvRCxZQUFZdEIsRUFBV21CLEdBQ3JCLE1BQU0sRUFBRTNELEVBQUMsRUFBRUUsRUFBQyxNQUFFWixHQUFVa0QsRUFFeEJsRCxFQUFNL0YsU0FBUSxDQUFDbUcsRUFBS0QsS0FDbEJDLEVBQUluRyxTQUFRLENBQUNrSCxFQUFLQyxLQUNKLElBQVJELElBRUZrRCxFQUFTekQsRUFBSVQsR0FBR08sRUFBSVUsR0FBS0QsRUFDM0IsR0FDQSxHQUVOLENBRUlyQixZQUNGLE9BQU8yRSxLQUFLQyxNQUFNdkwsS0FBS3dMLGFBQWEsU0FDdEMsQ0FFSTdFLFVBQU10QyxHQUNSckUsS0FBS3lMLGFBQWEsUUFBU0gsS0FBS0ksVUFBVXJILEdBQzVDLEVDdkphLE1BQU1zSCxVQUFtQmxKLEVBQ3RDSyxhQUNFLE9BQU8sQ0FBSTs7Ozs7Ozs7S0FTYixFQ1RhLE1BQU04SSxVQUFjbkosRUFDakN4QywwQkFDRUQsS0FBSzZMLE1BQVEsSUFBSXZJLFdBQXFCSSxLQUN0QzBCLE1BQU16QyxvQkFDTjNDLEtBQUtxRixpQkFBaUIsUUFBU3JGLEtBQUtzRixhQUNwQ3RGLEtBQUtxRixpQkFBaUIsV0FBWXJGLEtBQUs4TCxtQkFDdkM5TCxLQUFLcUYsaUJBQWlCLFVBQVdyRixLQUFLK0wsZUFDdEMvTCxLQUFLcUYsaUJBQWlCLGFBQWNyRixLQUFLZ00sa0JBQ3pDaE0sS0FBS3FGLGlCQUFpQixhQUFjckYsS0FBS2lNLGlCQUMzQyxDQUVXNUIsZ0NBQ1QsTUFBTyxDQUFDLFFBQ1YsQ0FFQUMseUJBQXlCQyxFQUFNMkIsRUFBVUMsR0FDbkNELElBQWFDLEdBQ2pCbk0sS0FBSzRDLFFBQ1AsQ0FFQUUsYUFDRSxPQUFPLENBQUk7UUFDUDlDLEtBQUs2TCxNQUNKL0UsS0FBS25ELEdBQ0csQ0FBSTtpQ0FDWUEsRUFBS1QsbUJBQW1CUyxFQUFLUCxzQkFBc0JPLEVBQUtOO2NBR2hGbUMsS0FBSztLQUVaLENBRUlxRyxZQUNGLE9BQU9QLEtBQUtDLE1BQU12TCxLQUFLd0wsYUFBYSxTQUN0QyxDQUVJSyxVQUFNeEgsR0FDUnJFLEtBQUt5TCxhQUFhLFFBQVNILEtBQUtJLFVBQVVySCxHQUM1QyxDQUVBaUIsWUFBWTFFLEdBQ1YsSUFBS0EsRUFBRTZFLE9BQU9DLFFBQVEsV0FBWSxPQUVsQyxNQUFNL0IsRUFBTy9DLEVBQUU2RSxPQUFPQyxRQUFRLFdBQzlCL0IsRUFBS3lJLGdCQUFnQixXQUNyQnBNLEtBQUtxTSxpQkFBaUIsV0FBV3ZMLFNBQVN3TCxJQUNwQ0EsSUFBUzNJLEdBQ1gySSxFQUFLQyxnQkFBZ0IsVUFDdkIsR0FFSixDQUVBVCxrQkFBa0JsTCxHQUNoQixJQUFLQSxFQUFFNkUsT0FBT0MsUUFBUSxXQUFZLE9BRWxDLE1BQU0vQixFQUFPL0MsRUFBRTZFLE9BQU9DLFFBQVEsV0FDOUIsYUFBa0IvQixFQUFLZ0MsUUFBUXpDLEtBQ2pDLENBRUE2SSxjQUFjbkwsR0FDWixNQUFNNEwsRUFBWXhNLEtBQUtxTSxpQkFBaUIsb0JBQ3hDLEdBQWMsVUFBVnpMLEVBQUV1SyxJQUFpQixDQUNyQixHQUFJcUIsRUFBVXBGLE9BQVMsRUFBRyxPQUMxQixJQUFLb0YsRUFBVyxPQUNoQixhQUFrQkEsRUFBVSxHQUFHN0csUUFBUXpDLEtBQ3pDLENBQ0YsQ0FFQThJLGlCQUFpQnBMLEdBQ2YsTUFBTSxLQUFFc0MsRUFBSSxNQUFFRSxFQUFLLFFBQUVDLEdBQVl6QyxFQUFFNkwsT0FDN0JDLEVBQWdCMU0sS0FBSzZMLE1BQU1yQyxXQUFXN0YsR0FBU0EsRUFBS1QsT0FBU0EsSUFFbkUsSUFBdUIsSUFBbkJ3SixFQUNGMU0sS0FBSzZMLE1BQVEsSUFBSTdMLEtBQUs2TCxNQUFPLENBQUUzSSxPQUFNRSxRQUFPQyxnQkFDdkMsQ0FDTCxNQUFNc0osRUFBVyxJQUFJM00sS0FBSzZMLE9BQzFCYyxFQUFTRCxHQUFpQixDQUFFeEosT0FBTUUsUUFBT0MsV0FDekNyRCxLQUFLNkwsTUFBUWMsQ0FDZixDQUNGLENBRUFWLGlCQUFpQnJMLEdBQ2YsTUFBTSxLQUFFc0MsR0FBU3RDLEVBQUU2TCxPQUNuQnpNLEtBQUs2TCxNQUFRN0wsS0FBSzZMLE1BQU1lLFFBQVFqSixHQUFTQSxFQUFLVCxPQUFTQSxHQUN6RCxFQ3RGYSxNQUFNMkosVUFBYXBLLEVBQ2hDSyxhQUNFLE1BQU0sTUFBRU0sRUFBSyxRQUFFMEosR0FBWTlNLEtBQUsyRixRQUNoQyxPQUFPLENBQUk7a0JBQ0d2QyxlQUFtQjBKO1FBQzdCMUosRUFBUSwyQkFBMkJBLFdBQWlCO0tBRTFELEVDSGEsTUFBTTJKLFVBQWdCdEssRUFDbkN4QywwQkFDRUQsS0FBSzJCLFdBQWMsVUFBa0IsVUFBVzNCLEtBQUtzQixLQUFRLENBQzNEc0MsTUFBTyxPQUNQb0osUUFBUyxJQUVYNUgsTUFBTXpDLG9CQUNOM0MsS0FBS3FGLGlCQUFpQixPQUFRckYsS0FBS2lOLFlBQ25Dak4sS0FBS3FGLGlCQUFpQixZQUFhckYsS0FBS2tOLGlCQUN4Q2xOLEtBQUtxRixpQkFBaUIsU0FBVXJGLEtBQUttTixhQUN2QyxDQUVBQyx1QkFDRXBOLEtBQUsrSyxvQkFBb0IsT0FBUS9LLEtBQUtpTixZQUN0Q2pOLEtBQUsrSyxvQkFBb0IsWUFBYS9LLEtBQUtrTixpQkFDM0NsTixLQUFLK0ssb0JBQW9CLFNBQVUvSyxLQUFLbU4sYUFDMUMsQ0FFQXJLLGFBQ0UsTUFBTSxNQUFFYyxFQUFLLFFBQUVvSixHQUFZaE4sS0FBSzJCLEtBQ2hDLE9BQU8sQ0FBSTtpQ0FDa0JpQztrQkFDZm9KO0tBRWhCLENBRUFFLGdCQUFnQnRNLEdBQ2RBLEVBQUV5TSxpQkFDRixNQUFNQyxFQUFjdE4sS0FBS3VOLGlCQUN6QixJQUFLRCxFQUFhLE9BQ2xCLE1BQU1FLEVBQU8sSUFBSUMsS0FBSyxDQUFDSCxFQUFZTixTQUFVLENBQUVVLEtBQU0sZUFDL0NDLEVBQU9uSixTQUFTb0osY0FBYyxLQUNwQ0QsRUFBS0UsS0FBT0MsSUFBSUMsZ0JBQWdCUCxHQUNoQ0csRUFBS0ssU0FBVyxHQUFHVixFQUFZMUosWUFDL0IrSixFQUFLTSxPQUNQLENBRUFoTyxpQkFBaUJXLEdBQ2ZBLEVBQUVzTixrQkFDRixNQUFNWixFQUFjdE4sS0FBS3VOLGlCQUN6QixHQUFLRCxFQUVMLElBQ0UsTUFBTTVNLFFBQWUsYUFBcUIsVUFBVzRNLEdBRS9DcEssRUFBTyxZQUFZeEMsSUFFekJ5TixNQUFNLFlBQ04sTUFBTUMsRUFBa0IsSUFBSUMsWUFBWSxhQUFjLENBQ3BENUIsT0FBUSxDQUNOdkosT0FDQUUsTUFBT2tLLEVBQVkxSixNQUNuQlAsUUFBUyxLQUdibUIsU0FBU0MsY0FBYyxZQUFZNkosY0FBY0YsR0FFN0NwTyxLQUFLc0IsS0FBT1osRUFDZFYsS0FBSzRELE1BQVEwSixFQUFZMUosTUFBTUksUUFBUSxVQUFXLEtBRWxELGFBQWtCZCxFQUV0QixDQUFFLE1BQU9xTCxHQUNQSixNQUFNLGNBQ1IsQ0FDRixDQUVBbE8sbUJBQW1CVyxHQUNqQixJQUdFLEdBRkFBLEVBQUVzTixtQkFDb0I1TixPQUFPa08sUUFBUSxnQkFDakIsYUFFZCxhQUFxQixVQUFXeE8sS0FBS3NCLElBRTNDNk0sTUFBTSxZQUNOLE1BQU1NLEVBQWtCLElBQUlKLFlBQVksYUFBYyxDQUNwRDVCLE9BQVEsQ0FDTnZKLEtBQU0sWUFBWWxELEtBQUtzQixRQUczQmtELFNBQVNDLGNBQWMsWUFBWTZKLGNBQWNHLEdBQ2pELFlBQWlCLFdBQ25CLENBQUUsTUFBT0YsR0FDUEosTUFBTSxjQUNSLENBQ0YsQ0FFQVosaUJBQ0UsTUFDTVAsRUFEWWhOLEtBQUt5RSxjQUFjLFlBQ1hKLE1BQU1xSyxPQUNoQyxJQUFLMUIsRUFFSCxPQURBbUIsTUFBTSxhQUNDLEtBR1QsSUFBSXZLLEVBQ0osTUFBUUEsR0FFTixLQURBQSxFQUFRK0ssT0FBTyxjQUFlM08sS0FBSzJCLEtBQUtpQyxNQUFNSSxRQUFRLFVBQVcsTUFDNURKLEdBQ21CdEQsT0FBT2tPLFFBQVEsZUFDakIsT0FBTyxLQUkvQixNQUFPLENBQ0xsTixHQUFJdEIsS0FBS3NCLEdBQ1RzQyxNQUFPQSxFQUFNOEssT0FBTzFLLFFBQVEsS0FBTSxVQUNsQ2dKLFFBQVNBLEVBQVFoSixRQUFRLEtBQU0sVUFFbkMsQ0FFSTFDLFNBQ0YsT0FBT3NOLE9BQU81TyxLQUFLd0wsYUFBYSxXQUNsQyxDQUVJNUgsVUFBTUEsR0FDUjVELEtBQUt5RSxjQUFjLHFCQUFxQmdILGFBQWEsUUFBUzdILEVBQ2hFLEVDM0hGLE1BQU1pTCxHQUFVLEVBRVZDLEVBQVUsQ0FDZCxDQUNFeE4sR0FBSSxPQUNKc0MsTUFBTyxLQUNQdUgsSUFBSyxJQUNMNEQsTUFBTyxDQUNMLENBQUV6TixHQUFJLEVBQUcwTixLQUFNLFlBQWE3RCxJQUFLLENBQUMsT0FBUSxLQUFNOEQsUUFpRnRELFdBQ0UsTUFBTUMsRUFBVTFLLFNBQVNDLGNBQWMsY0FDbEN5SyxFQUFRMUQsYUFBYSxXQUkxQixhQUFrQixZQUhoQjBELEVBQVF0TSxRQUlaLEdBdkZNLENBQUV0QixHQUFJLEVBQUcwTixLQUFNLGVBQWdCN0QsSUFBSyxDQUFDLE9BQVEsUUFBUyxLQUFNOEQsUUFzRWxFLFdBQ0VqUCxLQUFLc08sY0FBYyxJQUFJRCxZQUFZLFlBQWEsQ0FBRWMsU0FBUyxJQUM3RCxHQXZFTSxDQUFFN04sR0FBSSxFQUFHME4sS0FBTSxRQUFTN0QsSUFBSyxDQUFDLE9BQVEsS0FBTThELFFBaUVsRCxXQUNFalAsS0FBS3NPLGNBQWMsSUFBSUQsWUFBWSxPQUFRLENBQUVjLFNBQVMsSUFDeEQsR0FsRU0sQ0FBRTdOLEdBQUksRUFBRzBOLEtBQU0sUUFBUzdELElBQUssQ0FBQyxPQUFRLFFBQVMsS0FBTThELFFBd0UzRCxXQUNrQnpLLFNBQVNDLGNBQWMsY0FDMUIrRyxhQUFhLFlBQzFCeEwsS0FBS3NPLGNBQWMsSUFBSUQsWUFBWSxTQUFVLENBQUVjLFNBQVMsSUFDMUQsR0EzRU0sQ0FBRTdOLEdBQUksRUFBRzBOLEtBQU0sZUFBZ0I3RCxJQUFLLEdBQUkwRCxXQUN4QyxDQUFFdk4sR0FBSSxFQUFHME4sS0FBTSxXQUFZN0QsSUFBSyxDQUFDLE9BQVEsS0FBTTBELFdBQy9DLENBQUV2TixHQUFJLEVBQUcwTixLQUFNLFNBQVU3RCxJQUFLLEdBQUkwRCxhQUd0QyxDQUNFdk4sR0FBSSxPQUNKc0MsTUFBTyxLQUNQdUgsSUFBSyxJQUNMNEQsTUFBTyxDQUNMLENBQUV6TixHQUFJLEVBQUcwTixLQUFNLFdBQVk3RCxJQUFLLENBQUMsT0FBUSxLQUFNMEQsV0FDL0MsQ0FBRXZOLEdBQUksRUFBRzBOLEtBQU0sVUFBVzdELElBQUssQ0FBQyxPQUFRLEtBQU0wRCxXQUM5QyxDQUFFdk4sR0FBSSxHQUFJME4sS0FBTSxRQUFTN0QsSUFBSyxDQUFDLE9BQVEsS0FBTTBELFdBQzdDLENBQUV2TixHQUFJLEdBQUkwTixLQUFNLFVBQVc3RCxJQUFLLENBQUMsT0FBUSxLQUFNMEQsV0FDL0MsQ0FBRXZOLEdBQUksR0FBSTBOLEtBQU0sUUFBUzdELElBQUssQ0FBQyxPQUFRMEQsV0FDdkMsQ0FBRXZOLEdBQUksR0FBSTBOLEtBQU0sa0JBQW1CN0QsSUFBSyxDQUFDLE9BQVEsS0FBTTBELFdBQ3ZELENBQUV2TixHQUFJLEdBQUkwTixLQUFNLFdBQVk3RCxJQUFLLENBQUMsT0FBUSxLQUFNMEQsV0FDaEQsQ0FBRXZOLEdBQUksR0FBSTBOLEtBQU0sV0FBWTdELElBQUssQ0FBQyxNQUFPMEQsV0FDekMsQ0FBRXZOLEdBQUksR0FBSTBOLEtBQU0sV0FBWTdELElBQUssQ0FBQyxRQUFTLE1BQU8wRCxXQUNsRCxDQUFFdk4sR0FBSSxHQUFJME4sS0FBTSxZQUFhN0QsSUFBSyxDQUFDLE9BQVEsS0FBTTBELFdBQ2pELENBQUV2TixHQUFJLEdBQUkwTixLQUFNLFdBQVk3RCxJQUFLLENBQUMsT0FBUSxLQUFNMEQsV0FDaEQsQ0FBRXZOLEdBQUksR0FBSTBOLEtBQU0sV0FBWTdELElBQUssQ0FBQyxPQUFRLEtBQU0wRCxXQUNoRCxDQUFFdk4sR0FBSSxHQUFJME4sS0FBTSxXQUFZN0QsSUFBSyxDQUFDLE1BQU8wRCxhQUc3QyxDQUNFdk4sR0FBSSxTQUNKc0MsTUFBTyxLQUNQdUgsSUFBSyxJQUNMNEQsTUFBTyxDQUNMLENBQUV6TixHQUFJLEdBQUkwTixLQUFNLGFBQWM3RCxJQUFLLEdBQUkwRCxXQUN2QyxDQUFFdk4sR0FBSSxHQUFJME4sS0FBTSxXQUFZN0QsSUFBSyxHQUFJMEQsYUFHekMsQ0FDRXZOLEdBQUksT0FDSnNDLE1BQU8sS0FDUHVILElBQUssSUFDTDRELE1BQU8sQ0FDTCxDQUFFek4sR0FBSSxHQUFJME4sS0FBTSxVQUFXN0QsSUFBSyxDQUFDLE9BQVEsS0FBTTBELFdBQy9DLENBQUV2TixHQUFJLEdBQUkwTixLQUFNLFVBQVc3RCxJQUFLLENBQUMsT0FBUSxLQUFNMEQsV0FDL0MsQ0FBRXZOLEdBQUksR0FBSTBOLEtBQU0sWUFBYTdELElBQUssR0FBSTBELGFBRzFDLENBQ0V2TixHQUFJLE9BQ0pzQyxNQUFPLE1BQ1B1SCxJQUFLLElBQ0w0RCxNQUFPLENBQ0wsQ0FBRXpOLEdBQUksR0FBSTBOLEtBQU0sWUFBYTdELElBQUssR0FBSTBELFdBQ3RDLENBQUV2TixHQUFJLEdBQUkwTixLQUFNLGFBQWM3RCxJQUFLLEdBQUkwRCxXQUN2QyxDQUFFdk4sR0FBSSxHQUFJME4sS0FBTSxZQUFhN0QsSUFBSyxHQUFJMEQsY0FLdENFLEVBQVFELEVBQVF2TCxRQUFPLENBQUM2TCxFQUFLQyxJQUMxQixJQUFJRCxLQUFRQyxFQUFJTixRQUN0QixJQUVILElDcEVlLE1BQU1PLFVBQXNCN00sRUFDekNFLG9CQUNFeUMsTUFBTXpDLG9CQUNOM0MsS0FBS3FGLGlCQUFpQixRQUFTckYsS0FBS3NGLFlBQ3RDLENBRUE4SCx1QkFDRXBOLEtBQUsrSyxvQkFBb0IsUUFBUy9LLEtBQUtzRixZQUN6QyxDQUVXK0UsZ0NBQ1QsTUFBTyxDQUFDLFFBQ1YsQ0FFQUMseUJBQXlCQyxFQUFNMkIsRUFBVUMsR0FDMUIsVUFBVDVCLEdBQW9CMkIsSUFDdEJsTSxLQUFLeUUsY0FBYyxVQUFVOEssVUFBWXBELEVBRTdDLENBRUFySixhQUNFLE9BQU8sQ0FBSTs7O3dDQUd5Qjs2QkFDWDlDLEtBQUs0RDs7Ozs7Ozs7O1VBU3hCLE9BRUc0TCxHQUFXLENBQUk7O2tCQUVWQSxFQUFPNUwsWUFBWTRMLEVBQU9yRTs7b0JBRXhCcUUsRUFBT1QsTUFDTmpJLEtBQ0UySSxHQUFTLENBQUk7b0RBQ2dCQSxFQUFLbk8sdUJBQXVCbU8sRUFBS1o7aUNBQ3BEWSxFQUFLVDs0QkFDVlMsRUFBS3RFLElBQUkvRCxPQUFTLEVBQUksUUFBUXFJLEVBQUt0RSxJQUFJM0YsS0FBSyxlQUFpQjs7MEJBSXBFQSxLQUFLOzs7Z0JBS2ZBLEtBQUs7O0tBR2QsQ0FFQUYsWUFBWTFFLEdBQ1YsTUFBTThPLEVBQWE5TyxFQUFFNkUsT0FBT0MsUUFBUSxnQkFDOUJpSyxFQUFhL08sRUFBRTZFLE9BQU9DLFFBQVEsZ0JBQzlCa0ssRUFBTWhQLEVBQUU2RSxPQUFPQyxRQUFRLFFBRXpCZ0ssRUFDRjFQLEtBQUs2UCxnQkFBZ0JILEdBQ1pDLEVBQ1QzUCxLQUFLOFAsZ0JBQWdCSCxFQUFZQyxHQUVqQzVQLEtBQUsrUCxZQUVULENBRUFGLGdCQUFnQkgsR0FDZCxPQUFRQSxFQUFXcE8sSUFDakIsSUFBSyxPQUNIdEIsS0FBS2dRLGNBQWNDLFVBQVVDLE9BQU8sY0FDcEMsTUFDRixJQUFLLE9BQ0wsSUFBSyxRQUNILFNBS04sQ0FFQUosZ0JBQWdCSCxFQUFZQyxHQUMxQixHQUFJQSxFQUFLLENBQ1AsTUFBTU8sRUFBU3ZCLE9BQU9nQixFQUFJakssUUFBUXJFLEtBQzVCLFFBQUUyTixHQUFZRixFQUFNM0ssTUFBTXFMLEdBQVNBLEVBQUtuTyxLQUFPNk8sS0FBVyxDQUFDLEVBQzdEbEIsR0FDRkEsRUFBUW1CLEtBQUtwUSxLQUVqQixNQUNFQSxLQUFLcVEsWUFBWVYsRUFFckIsQ0FFQVUsWUFBWVYsR0FDVixNQUFNVyxFQUFRWCxFQUFXbEwsY0FBYyxVQUNuQzZMLEVBQU1MLFVBQVVoUCxTQUFTLFFBQzNCcVAsRUFBTUwsVUFBVU0sT0FBTyxTQUV2QnZRLEtBQUsrUCxhQUNMTyxFQUFNTCxVQUFVTyxJQUFJLFFBRXhCLENBRUFULGFBQ0UsTUFBTU8sRUFBUXRRLEtBQUt5RSxjQUFjLGVBQ2pDNkwsR0FBT0wsVUFBVU0sT0FBTyxPQUMxQixDQUVJM00sWUFDRixPQUFPNUQsS0FBS3dMLGFBQWEsUUFDM0IsRUM3R0YsV0FDRSxVQUNRLFVBQ1IsQ0FBRSxNQUFPNUssR0FDUDZQLGdCQUFlLElBQU10QyxNQUFNLDJCQUM3QixDQUVBdUMsZUFBZUMsT0FBTyxTQUFVNU4sR0FDaEMyTixlQUFlQyxPQUFPLFlBQWF4TCxHQUNuQ3VMLGVBQWVDLE9BQU8sVUFBVy9LLEdBQ2pDOEssZUFBZUMsT0FBTyxZQUFhL0csR0FDbkM4RyxlQUFlQyxPQUFPLGdCQUFpQmhGLEdBQ3ZDK0UsZUFBZUMsT0FBTyxXQUFZL0UsR0FDbEM4RSxlQUFlQyxPQUFPLFVBQVc5RCxHQUNqQzZELGVBQWVDLE9BQU8sYUFBYzVELEdBQ3BDMkQsZUFBZUMsT0FBTyxvQkFBcUJyQixFQUM1QyxFQWhCRCxHQWtCQWhQLE9BQU8rRSxpQkFBaUIsUUFBUSxJQUFNLGFBQ3RDL0UsT0FBTytFLGlCQUFpQixZQUFZLElBQU0sWSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL2NvcmUvSW5kZXhlZERCLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvY29yZS9XZWJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL0FwcC5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdXRpbHMvcm91dGVzLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy9jb3JlL1JvdXRlci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXNhbmRib3gvLi9zcmMvdmlldy9Db21tb24vRm9vdGVyLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvVGV0cmlzL2NvbnN0L2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L1RldHJpcy9jbGFzcy9UZXRyb21pbm8uanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvVGV0cmlzL2luZGV4LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0ZsYXBweUJpcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvQ29tbW9uL0ljb25zLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L0NvbW1vbi9JY29uLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L05vdGVQYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1zYW5kYm94Ly4vc3JjL3ZpZXcvTm90ZVBhZC9jb25zdC9idXR0b25zLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy92aWV3L05vdGVQYWQvY29tcG9uZW50cy9Ob3RlUGFkSGVhZGVyLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtc2FuZGJveC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvanMtc2FuZGJveC9cIjsiLCJjbGFzcyBJbmRleGVkREIge1xyXG4gIGRiO1xyXG5cclxuICAvKipcclxuICAgKiDsg53shLHsnpBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGJOYW1lXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRiVmVyc2lvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHN0b3Jlc1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGRiTmFtZSwgZGJWZXJzaW9uLCBzdG9yZXMpIHtcclxuICAgIHRoaXMuZGJOYW1lID0gZGJOYW1lO1xyXG4gICAgdGhpcy5kYlZlcnNpb24gPSBkYlZlcnNpb247XHJcbiAgICB0aGlzLnN0b3JlcyA9IHN0b3JlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERCIOyYpO2UiCDrqZTshJzrk5xcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBhc3luYyBvcGVuREIoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gd2luZG93LmluZGV4ZWREQi5vcGVuKHRoaXMuZGJOYW1lLCB0aGlzLmRiVmVyc2lvbik7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmRiID0gcmVxdWVzdC5yZXN1bHQ7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmRiID0gcmVxdWVzdC5yZXN1bHQ7XHJcblxyXG4gICAgICAgIHRoaXMuc3RvcmVzLmZvckVhY2goKHN0b3JlKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKHN0b3JlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRiLmRlbGV0ZU9iamVjdFN0b3JlKHN0b3JlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmUsIHsga2V5UGF0aDogJ2lkJyB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog642w7J207YSwIOyhsO2ajCDrqZTshJzrk5xcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn1cclxuICAgKi9cclxuICBhc3luYyBnZXREYXRhKHN0b3JlTmFtZSwgaWQpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWRvbmx5Jykub2JqZWN0U3RvcmUoc3RvcmVOYW1lKS5nZXQoaWQpO1xyXG5cclxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgIHJlamVjdChlKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog642w7J207YSwIOyghOyytCDsobDtmowg66mU7ISc65OcXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlTmFtZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdFtdPn1cclxuICAgKi9cclxuICBhc3luYyBnZXRBbGxEYXRhKHN0b3JlTmFtZSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZG9ubHknKS5vYmplY3RTdG9yZShzdG9yZU5hbWUpLmdldEFsbCgpO1xyXG5cclxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgIHJlamVjdChlKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog642w7J207YSwIOy2lOqwgCDrqZTshJzrk5xcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVOYW1lXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fVxyXG4gICAqL1xyXG4gIGFzeW5jIHVwc2VydERhdGEoc3RvcmVOYW1lLCBkYXRhKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCBvYmplY3RTdG9yZSA9IHRoaXMuZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZHdyaXRlJykub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuICAgICAgY29uc3QgbW9kaWZpZWREYXRhID0geyAuLi5kYXRhLCBpZDogZGF0YS5pZCB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9O1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gb2JqZWN0U3RvcmUucHV0KG1vZGlmaWVkRGF0YSk7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXF1ZXN0LmVycm9yKTtcclxuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOuNsOydtO2EsCDsgq3soJwg66mU7ISc65OcXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlTmFtZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59XHJcbiAgICovXHJcbiAgYXN5bmMgZGVsZXRlRGF0YShzdG9yZU5hbWUsIGlkKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5kYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkd3JpdGUnKS5vYmplY3RTdG9yZShzdG9yZU5hbWUpLmRlbGV0ZShpZCk7XHJcblxyXG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHNhbmRib3hEQiA9IG5ldyBJbmRleGVkREIoJ3NhbmRib3hEQicsIDIsIFsnbm90ZXBhZCddKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNhbmRib3hEQjtcclxuIiwiY29uc3QgcmVuZGVyUmF3ID0gKHN0cmluZywgLi4udmFsdWVzKSA9PiB7XHJcbiAgcmV0dXJuIFN0cmluZy5yYXcoc3RyaW5nLCAuLi52YWx1ZXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc1xyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKi9cclxuY29uc3QgcmVwZWF0ID0gKHRpbWVzLCBjYWxsYmFjaykgPT4ge1xyXG4gIHJldHVybiBuZXcgQXJyYXkodGltZXMpLmZpbGwoJycpLm1hcChjYWxsYmFjaykuam9pbignJyk7XHJcbn07XHJcblxyXG5leHBvcnQgeyByZW5kZXJSYXcgYXMgaHRtbCwgcmVuZGVyUmF3IGFzIGNzcywgcmVwZWF0IH07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMuaW5qZWN0SFRNTCgpO1xyXG4gIH1cclxuXHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxkaXYgaWQ9XCJwYWdlXCI+PC9kaXY+XHJcbiAgICAgIDxteS1pY29ucyB0YWJpbmRleD1cIi0xXCI+PC9teS1pY29ucz5cclxuICAgICAgPG15LWZvb3Rlcj48L215LWZvb3Rlcj5cclxuICAgIGA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHRldHJpcyBmcm9tICcuLi8uLi9wdWJsaWMvdGV0cmlzLnBuZyc7XHJcbmltcG9ydCBmbGFwcHlCaXJkIGZyb20gJy4uLy4uL3B1YmxpYy9mbGFwcHlCaXJkLnBuZyc7XHJcbmltcG9ydCBub3RlcGFkIGZyb20gJy4uLy4uL3B1YmxpYy9ub3RlcGFkLnBuZyc7XHJcbmltcG9ydCBzYW5kYm94REIgZnJvbSAnLi4vY29yZS9JbmRleGVkREInO1xyXG5cclxuY29uc3QgQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/ICcnIDogJy9qcy1zYW5kYm94JztcclxuXHJcbmNvbnN0IHJvdXRlcyA9IFtcclxuICB7XHJcbiAgICBwYXRoOiBgL2AsXHJcbiAgICBodG1sOiBodG1sYDxteS1ob21lPjwvbXktaG9tZT5gLFxyXG4gICAgbGFiZWw6ICdIb21lJyxcclxuICAgIGljb25TcmM6IG51bGwsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBgL3RldHJpc2AsXHJcbiAgICBodG1sOiBodG1sYDxteS10ZXRyaXM+PC9teS10ZXRyaXM+YCxcclxuICAgIGxhYmVsOiAnVGV0cmlzJyxcclxuICAgIGljb25TcmM6IHRldHJpcyxcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGg6IGAvZmxhcHB5YmlyZGAsXHJcbiAgICBodG1sOiBodG1sYDxteS1mbGFwcHliaXJkPjwvbXktZmxhcHB5YmlyZD5gLFxyXG4gICAgbGFiZWw6ICdGbGFwcHkmbmJzcDtCaXJkJyxcclxuICAgIGljb25TcmM6IGZsYXBweUJpcmQsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBgL25vdGVwYWRgLFxyXG4gICAgaHRtbDogaHRtbGA8bXktbm90ZXBhZD48L215LW5vdGVwYWQ+YCxcclxuICAgIGxhYmVsOiAnTm90ZSZuYnNwO1BhZCcsXHJcbiAgICBpY29uU3JjOiBub3RlcGFkLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogYC9ub3RlcGFkLzppZGAsXHJcbiAgICBodG1sOiBodG1sYDxteS1ub3RlcGFkIGRhdGEtaWQ9XCI6aWRcIj48L215LW5vdGVwYWQ+YCxcclxuICAgIGxhYmVsOiAnTm90ZSZuYnNwO1BhZCcsXHJcbiAgICBpY29uU3JjOiBudWxsLFxyXG4gIH0sXHJcbl07XHJcblxyXG5jb25zdCBtYWluSWNvbnMgPSByb3V0ZXMucmVkdWNlKChwcmV2LCByb3V0ZXIpID0+IHtcclxuICBjb25zdCB7IHBhdGgsIGxhYmVsLCBpY29uU3JjIH0gPSByb3V0ZXI7XHJcbiAgaWYgKCFyb3V0ZXIuaWNvblNyYykgcmV0dXJuIHByZXY7XHJcbiAgcmV0dXJuIFsuLi5wcmV2LCB7IHBhdGgsIGxhYmVsLCBpY29uU3JjIH1dO1xyXG59LCBbXSk7XHJcblxyXG5jb25zdCBnZXRMb2NhbEljb25zID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IG5vdGVwYWREYXRhID0gYXdhaXQgc2FuZGJveERCLmdldEFsbERhdGEoJ25vdGVwYWQnKTtcclxuICBjb25zdCBub3RlcGFkSWNvbnMgPSBub3RlcGFkRGF0YS5yZWR1Y2UoKHByZXYsIGljb24pID0+IHtcclxuICAgIGNvbnN0IHsgaWQsIHRpdGxlIH0gPSBpY29uO1xyXG4gICAgcmV0dXJuIFsuLi5wcmV2LCB7IHBhdGg6IGAvbm90ZXBhZC8ke2lkfWAsIGxhYmVsOiB0aXRsZSwgaWNvblNyYzogbm90ZXBhZCB9XTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiBbLi4ubm90ZXBhZEljb25zXTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcztcclxuZXhwb3J0IHsgbWFpbkljb25zLCBnZXRMb2NhbEljb25zLCBCQVNFX1VSTCB9O1xyXG4iLCJpbXBvcnQgcm91dGVzLCB7IEJBU0VfVVJMIH0gZnJvbSAnLi4vdXRpbHMvcm91dGVzJztcclxuXHJcbmNsYXNzIFJvdXRlciB7XHJcbiAgY29uc3RydWN0b3Iocm91dGUpIHtcclxuICAgIHRoaXMucm91dGVzID0gcm91dGU7XHJcbiAgfVxyXG5cclxuICBwYXRoVG9SZWdleHAocGF0aCkge1xyXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke3BhdGgucmVwbGFjZSgvXFwvL2csICdcXFxcLycpLnJlcGxhY2UoLzpcXHcrL2csICcoLispJyl9JGApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgY3VycmVudFBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XHJcbiAgICBjb25zdCByb3V0ZSA9IHRoaXMucm91dGVzLmZpbmQoKHZhbHVlKSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBhdGhUb1JlZ2V4cCh0aGlzLmdldFVybEZyb20odmFsdWUucGF0aCkpLnRlc3QoY3VycmVudFBhdGgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCFyb3V0ZSkge1xyXG4gICAgICB0aGlzLnJlcGxhY2VUbygnLycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhZ2UnKS5pbm5lckhUTUwgPSByb3V0ZS5odG1sLnJlcGxhY2UoJzppZCcsIHRoaXMuZ2V0SWRGcm9tUGF0aChjdXJyZW50UGF0aCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWRGcm9tUGF0aChwYXRoKSB7XHJcbiAgICByZXR1cm4gcGF0aC5tYXRjaCgvXFxkKy8pPy5bMF07XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZVRvKHVybCkge1xyXG4gICAgaWYgKHRoaXMuZ2V0VXJsRnJvbSh1cmwpID09PSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpIHJldHVybjtcclxuICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBCQVNFX1VSTCArIHVybCk7XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgcmVwbGFjZVRvKHVybCkge1xyXG4gICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIEJBU0VfVVJMICsgdXJsKTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBnZXRVcmxGcm9tKHVybCkge1xyXG4gICAgcmV0dXJuIGAke0JBU0VfVVJMfSR7dXJsfWA7XHJcbiAgfVxyXG5cclxuICBiYWNrKCkge1xyXG4gICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHJvdXRlciA9IG5ldyBSb3V0ZXIocm91dGVzKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcclxuIiwiaW1wb3J0IFdlYkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb3JlL1dlYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IG1haW5JY29ucyB9IGZyb20gJy4uLy4uL3V0aWxzL3JvdXRlcyc7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi4vLi4vY29yZS9Sb3V0ZXInO1xyXG5pbXBvcnQgd2luZG93TG9nbyBmcm9tICcuLi8uLi8uLi9wdWJsaWMvd2luZG93TG9nby5wbmcnO1xyXG5pbXBvcnQgc2VhcmNoSWNvbiBmcm9tICcuLi8uLi8uLi9wdWJsaWMvc2VhcmNoSWNvbi5wbmcnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9vdGVyIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPGltZyBhbHQ9XCJ3aW5kb3dfbG9nb1wiIHNyYz0ke3dpbmRvd0xvZ299IGNsYXNzPVwid2luZG93X2ljb25cIiAvPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5wdXRfYm94XCI+XHJcbiAgICAgICAgPGltZyBhbHQ9XCJzZWFyY2hcIiBzcmM9JHtzZWFyY2hJY29ufSBjbGFzcz1cIndpbmRvd19pY29uXCIgLz48aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIuywvuq4sFwiIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICAke21haW5JY29uc1xyXG4gICAgICAgIC5tYXAoKGljb24pID0+IHtcclxuICAgICAgICAgIHJldHVybiBodG1sYCA8bXktaWNvbiBkYXRhLXBhdGg9XCIke2ljb24ucGF0aH1cIiBkYXRhLWljb25TcmM9XCIke2ljb24uaWNvblNyY31cIj48L215LWljb24+IGA7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuam9pbignJyl9XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2xpY2soZSkge1xyXG4gICAgaWYgKCFlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJykpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpY29uID0gZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpO1xyXG4gICAgcm91dGVyLm5hdmlnYXRlVG8oaWNvbi5kYXRhc2V0LnBhdGgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUgZXh0ZW5kcyBXZWJDb21wb25lbnQge31cclxuIiwiY29uc3QgQkxPQ0tTID0ge1xuICBJOiBbXG4gICAgWzAsIDAsIDAsIDBdLFxuICAgIFsxLCAxLCAxLCAxXSxcbiAgICBbMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDAsIDBdLFxuICBdLFxuICBKOiBbXG4gICAgWzIsIDAsIDBdLFxuICAgIFsyLCAyLCAyXSxcbiAgICBbMCwgMCwgMF0sXG4gIF0sXG4gIEw6IFtcbiAgICBbMCwgMCwgM10sXG4gICAgWzMsIDMsIDNdLFxuICAgIFswLCAwLCAwXSxcbiAgXSxcbiAgTzogW1xuICAgIFs0LCA0XSxcbiAgICBbNCwgNF0sXG4gIF0sXG4gIFM6IFtcbiAgICBbMCwgNSwgNV0sXG4gICAgWzUsIDUsIDBdLFxuICAgIFswLCAwLCAwXSxcbiAgXSxcbiAgVDogW1xuICAgIFswLCA2LCAwXSxcbiAgICBbNiwgNiwgNl0sXG4gICAgWzAsIDAsIDBdLFxuICBdLFxuICBaOiBbXG4gICAgWzcsIDcsIDBdLFxuICAgIFswLCA3LCA3XSxcbiAgICBbMCwgMCwgMF0sXG4gIF0sXG59O1xuXG5jb25zdCBCTE9DS19DTEFTU0VTID0ge1xuICAwOiAnZW1wdHknLFxuICAxOiAnSScsXG4gIDI6ICdKJyxcbiAgMzogJ0wnLFxuICA0OiAnTycsXG4gIDU6ICdTJyxcbiAgNjogJ1QnLFxuICA3OiAnWicsXG4gIDEwOiAnSSBmcmVlemUnLFxuICAyMDogJ0ogZnJlZXplJyxcbiAgMzA6ICdMIGZyZWV6ZScsXG4gIDQwOiAnTyBmcmVlemUnLFxuICA1MDogJ1MgZnJlZXplJyxcbiAgNjA6ICdUIGZyZWV6ZScsXG4gIDcwOiAnWiBmcmVlemUnLFxufTtcblxuY29uc3QgU0NPUkVTID0ge1xuICAxOiAxMDAsXG4gIDI6IDMwMCxcbiAgMzogNTAwLFxuICA0OiA4MDAsXG59O1xuXG5jb25zdCBCT0FSRF9XSURUSCA9IDEwO1xuY29uc3QgQk9BUkRfSEVJR0hUID0gMjA7XG5cbmV4cG9ydCB7IEJMT0NLUywgQk9BUkRfSEVJR0hULCBCT0FSRF9XSURUSCwgQkxPQ0tfQ0xBU1NFUywgU0NPUkVTIH07XG4iLCJpbXBvcnQgeyBCTE9DS1MsIEJPQVJEX0hFSUdIVCwgQk9BUkRfV0lEVEgsIFNDT1JFUyB9IGZyb20gJy4uL2NvbnN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV0cm9taW5vIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVhdGVOZXdCbG9jaygpO1xuICB9XG5cbiAgcm90YXRlKGJvYXJkKSB7XG4gICAgY29uc3Qgcm90YXRlZEJsb2NrID0gdGhpcy5ibG9ja1swXS5tYXAoKF8sIGkpID0+IHRoaXMuYmxvY2subWFwKChyb3cpID0+IHJvd1tpXSkucmV2ZXJzZSgpKTtcbiAgICBjb25zdCByb3RhdGVkV2lkdGggPSByb3RhdGVkQmxvY2tbMF0ubGVuZ3RoO1xuICAgIGNvbnN0IHJvdGF0ZWRIZWlnaHQgPSByb3RhdGVkQmxvY2subGVuZ3RoO1xuICAgIGxldCBuZXdYID0gdGhpcy54O1xuICAgIGxldCBuZXdZID0gdGhpcy55O1xuXG4gICAgaWYgKG5ld1ggKyByb3RhdGVkV2lkdGggPiBCT0FSRF9XSURUSCkge1xuICAgICAgbmV3WCA9IEJPQVJEX1dJRFRIIC0gcm90YXRlZFdpZHRoO1xuICAgIH1cbiAgICBpZiAobmV3WCA8IDApIHtcbiAgICAgIG5ld1ggPSAwO1xuICAgIH1cbiAgICBpZiAobmV3WSArIHJvdGF0ZWRIZWlnaHQgPiBCT0FSRF9IRUlHSFQpIHtcbiAgICAgIG5ld1kgPSBCT0FSRF9IRUlHSFQgLSByb3RhdGVkSGVpZ2h0O1xuICAgIH1cbiAgICBpZiAobmV3WSA8IDApIHtcbiAgICAgIG5ld1kgPSAwO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNhbk1vdmUoYm9hcmQsIG5ld1gsIG5ld1ksIHJvdGF0ZWRCbG9jaykpIHtcbiAgICAgIHRoaXMuYmxvY2sgPSByb3RhdGVkQmxvY2s7XG4gICAgICB0aGlzLnggPSBuZXdYO1xuICAgICAgdGhpcy55ID0gbmV3WTtcbiAgICB9XG4gIH1cblxuICBtb3ZlTGVmdChib2FyZCkge1xuICAgIGlmICh0aGlzLmNhbk1vdmUoYm9hcmQsIHRoaXMueCAtIDEsIHRoaXMueSwgdGhpcy5ibG9jaykpIHtcbiAgICAgIHRoaXMueCAtPSAxO1xuICAgIH1cbiAgfVxuXG4gIG1vdmVSaWdodChib2FyZCkge1xuICAgIGlmICh0aGlzLmNhbk1vdmUoYm9hcmQsIHRoaXMueCArIDEsIHRoaXMueSwgdGhpcy5ibG9jaykpIHtcbiAgICAgIHRoaXMueCArPSAxO1xuICAgIH1cbiAgfVxuXG4gIG1vdmVEb3duKGJvYXJkKSB7XG4gICAgaWYgKHRoaXMuY2FuTW92ZShib2FyZCwgdGhpcy54LCB0aGlzLnkgKyAxLCB0aGlzLmJsb2NrKSkge1xuICAgICAgdGhpcy55ICs9IDE7XG4gICAgfSBlbHNlIGlmICh0aGlzLnkgPT09IDApIHtcbiAgICAgIHRoaXMuZnJlZXplKGJvYXJkKTtcbiAgICAgIGNvbnN0ICR0ZXRyaXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdteS10ZXRyaXMnKTtcbiAgICAgICR0ZXRyaXMuc3RvcEdhbWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mcmVlemUoYm9hcmQpO1xuICAgICAgdGhpcy5jcmVhdGVOZXdCbG9jaygpO1xuICAgIH1cbiAgfVxuXG4gIGZyZWV6ZShib2FyZCkge1xuICAgIGNvbnN0IHsgYmxvY2ssIHgsIHkgfSA9IHRoaXM7XG4gICAgYmxvY2suZm9yRWFjaCgocm93LCBpKSA9PiB7XG4gICAgICByb3cuZm9yRWFjaCgoY29sLCBqKSA9PiB7XG4gICAgICAgIGlmIChjb2wgIT09IDApIHtcbiAgICAgICAgICBib2FyZFt5ICsgaV1beCArIGpdID0gY29sICogMTA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY29uc3QgJHRldHJpcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ215LXRldHJpcycpO1xuXG4gICAgc3BlZWRVcCgpO1xuICAgIHNjb3JlVXAocmVtb3ZlRnVsbFJvd3MoKSk7XG5cbiAgICAvLyB0aGlzLmJsb2NrID0gQkxPQ0tTLk87XG4gICAgJHRldHJpcy50ZXRyb21pbm9Db3VudGVyICs9IDE7XG5cbiAgICBmdW5jdGlvbiBzcGVlZFVwKCkge1xuICAgICAgaWYgKCR0ZXRyaXMudGV0cm9taW5vQ291bnRlciA9PT0gMTApIHtcbiAgICAgICAgJHRldHJpcy50ZXRyb21pbm9Db3VudGVyID0gMDtcbiAgICAgICAgJHRldHJpcy5kcm9wSW50ZXJ2YWwgKj0gMC45O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZ1bGxSb3dzKCkge1xuICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICBib2FyZC5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgICAgaWYgKHJvdy5ldmVyeSgoY2VsbCkgPT4gY2VsbCA+PSAxMCkpIHtcbiAgICAgICAgICByZXN1bHQgKz0gMTtcbiAgICAgICAgICBib2FyZC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYm9hcmQudW5zaGlmdChBcnJheShCT0FSRF9XSURUSCkuZmlsbCgwKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY29yZVVwKGNsZWFyZWRSb3dzKSB7XG4gICAgICBpZiAoY2xlYXJlZFJvd3MgPiAwKSB7XG4gICAgICAgICR0ZXRyaXMuc2NvcmUgKz0gU0NPUkVTW2NsZWFyZWRSb3dzXSA/PyAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZU5ld0Jsb2NrKCkge1xuICAgIHRoaXMuYmxvY2sgPSBPYmplY3QudmFsdWVzKEJMT0NLUylbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNyldO1xuICAgIGNvbnN0IGluaXRpYWxCbG9ja1BvcyA9IHRoaXMuZ2V0SW5pdGlhbEJsb2NrUG9zKEJPQVJEX1dJRFRILCB0aGlzLmJsb2NrKTtcbiAgICB0aGlzLnggPSBpbml0aWFsQmxvY2tQb3MueDtcbiAgICB0aGlzLnkgPSBpbml0aWFsQmxvY2tQb3MueTtcbiAgfVxuXG4gIGNhbk1vdmUoYm9hcmQsIHgsIHksIGJsb2NrKSB7XG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgYmxvY2subGVuZ3RoOyByb3cgKz0gMSkge1xuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgYmxvY2tbcm93XS5sZW5ndGg7IGNvbCArPSAxKSB7XG4gICAgICAgIGlmIChibG9ja1tyb3ddW2NvbF0gIT09IDApIHtcbiAgICAgICAgICBjb25zdCBuZXh0WCA9IHggKyBjb2w7XG4gICAgICAgICAgY29uc3QgbmV4dFkgPSB5ICsgcm93O1xuICAgICAgICAgIGlmIChuZXh0WCA8IDAgfHwgbmV4dFggPj0gQk9BUkRfV0lEVEggfHwgbmV4dFkgPCAwIHx8IG5leHRZID49IEJPQVJEX0hFSUdIVCB8fCBib2FyZFtuZXh0WV1bbmV4dFhdID49IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXRJbml0aWFsQmxvY2tQb3Mod2lkdGgsIGJsb2NrKSB7XG4gICAgY29uc3QgZmlyc3ROb25FbXB0eVJvd0luZGV4ID0gYmxvY2suZmluZEluZGV4KChyb3cpID0+IHJvdy5zb21lKChjZWxsKSA9PiBjZWxsICE9PSAwKSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5mbG9vcigod2lkdGggLSBibG9ja1swXS5sZW5ndGgpIC8gMiksXG4gICAgICB5OiAtZmlyc3ROb25FbXB0eVJvd0luZGV4LFxuICAgIH07XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBjb25zdCBjbG9uZWQgPSBuZXcgVGV0cm9taW5vKCk7XG4gICAgY2xvbmVkLmJsb2NrID0gdGhpcy5ibG9jay5tYXAoKHJvdykgPT4gWy4uLnJvd10pO1xuICAgIGNsb25lZC54ID0gdGhpcy54O1xuICAgIGNsb25lZC55ID0gdGhpcy55O1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn1cbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgeyBCTE9DS19DTEFTU0VTLCBCT0FSRF9IRUlHSFQsIEJPQVJEX1dJRFRIIH0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQgVGV0cm9taW5vIGZyb20gJy4vY2xhc3MvVGV0cm9taW5vJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV0cmlzIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmJvYXJkID0gdGhpcy5nZXRJbml0aWFsQm9hcmQoQk9BUkRfV0lEVEgsIEJPQVJEX0hFSUdIVCk7XG4gICAgdGhpcy5zdGFydCA9IGZhbHNlO1xuICAgIHRoaXMudGV0cm9taW5vID0gbnVsbDtcbiAgICB0aGlzLnNjb3JlID0gMDtcbiAgICB0aGlzLmxhc3RUaW1lID0gbnVsbDtcbiAgICB0aGlzLmRyb3BJbnRlcnZhbCA9IDEwMDA7XG4gICAgdGhpcy50ZXRyb21pbm9Db3VudGVyID0gMDtcbiAgICB0aGlzLmFuaW1hdGlvbklkID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0R2FtZSA9IHRoaXMuc3RhcnRHYW1lLmJpbmQodGhpcyk7XG4gICAgdGhpcy5rZXlkb3duSGFuZGxlciA9IHRoaXMua2V5ZG93bkhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRyb3BCbG9jayA9IHRoaXMuZHJvcEJsb2NrLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignI3N0YXJ0LWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zdGFydEdhbWUpO1xuICB9XG5cbiAgaW5qZWN0SFRNTCgpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxidXR0b24gaWQ9XCJzdGFydC1idXR0b25cIj7qsozsnoQg7Iuc7J6RPC9idXR0b24+XG4gICAgICA8ZGl2IGNsYXNzPVwiYm9hcmRcIj5cbiAgICAgICAgJHt0aGlzLmJvYXJkXG4gICAgICAgICAgLm1hcChcbiAgICAgICAgICAgIChyb3cpID0+IGh0bWxgXG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAke3Jvdy5tYXAoKGNvbCkgPT4gaHRtbGA8bGkgY2xhc3M9XCJjZWxsLSR7QkxPQ0tfQ0xBU1NFU1tjb2xdfVwiPjwvbGk+YCkuam9pbignJyl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICBgXG4gICAgICAgICAgKVxuICAgICAgICAgIC5qb2luKCcnKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPHNwYW4gY2xhc3M9XCJzY29yZVwiPiR7dGhpcy5zY29yZX08L3NwYW4+XG4gICAgYDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbJ2JvYXJkJ107XG4gIH1cblxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSkge1xuICAgIGlmIChuYW1lID09PSAnYm9hcmQnKSB7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgY29uc29sZS5sb2coJ2JvYXJkIGNoYW5nZWQnKTtcbiAgICB9XG4gIH1cblxuICBnZXRJbml0aWFsQm9hcmQod2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKEFycmF5KGhlaWdodCksICgpID0+IEFycmF5KHdpZHRoKS5maWxsKDApKTtcbiAgfVxuXG4gIHN0YXJ0R2FtZSgpIHtcbiAgICBpZiAodGhpcy5zdGFydCkgcmV0dXJuO1xuICAgIHRoaXMuc3RhcnQgPSB0cnVlO1xuICAgIHRoaXMudGV0cm9taW5vID0gbmV3IFRldHJvbWlubygpO1xuICAgIHRoaXMudGV0cm9taW5vQ291bnRlciArPSAxO1xuICAgIHRoaXMudXBkYXRlQm9hcmQoKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlkb3duSGFuZGxlcik7XG5cbiAgICB0aGlzLmxhc3RUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuZHJvcEJsb2NrKTtcbiAgfVxuXG4gIHN0b3BHYW1lKCkge1xuICAgIHRoaXMuc3RhcnQgPSBmYWxzZTtcbiAgICB0aGlzLmJvYXJkID0gdGhpcy5nZXRJbml0aWFsQm9hcmQoQk9BUkRfV0lEVEgsIEJPQVJEX0hFSUdIVCk7XG4gICAgdGhpcy5zY29yZSA9IDA7XG4gICAgdGhpcy50ZXRyb21pbm9Db3VudGVyID0gMDtcbiAgICB0aGlzLmRyb3BJbnRlcnZhbCA9IDEwMDA7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25JZCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5ZG93bkhhbmRsZXIpO1xuICB9XG5cbiAgZHJvcEJsb2NrKHRpbWVzdGFtcCkge1xuICAgIGNvbnN0IGRlbHRhVGltZSA9IHRpbWVzdGFtcCAtIHRoaXMubGFzdFRpbWU7XG5cbiAgICBpZiAoZGVsdGFUaW1lID4gdGhpcy5kcm9wSW50ZXJ2YWwpIHtcbiAgICAgIGNvbnN0IHByZXZUZXRyb21pbm8gPSB0aGlzLnRldHJvbWluby5jbG9uZSgpO1xuICAgICAgY29uc3QgbmV3Qm9hcmQgPSB0aGlzLmJvYXJkO1xuICAgICAgdGhpcy50ZXRyb21pbm8ubW92ZURvd24obmV3Qm9hcmQpO1xuICAgICAgdGhpcy51cGRhdGVCb2FyZChuZXdCb2FyZCwgcHJldlRldHJvbWlubyk7XG4gICAgICB0aGlzLmxhc3RUaW1lID0gdGltZXN0YW1wO1xuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0aW9uSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5kcm9wQmxvY2spO1xuICB9XG5cbiAga2V5ZG93bkhhbmRsZXIoZSkge1xuICAgIGNvbnN0IHByZXZUZXRyb21pbm8gPSB0aGlzLnRldHJvbWluby5jbG9uZSgpO1xuICAgIGNvbnN0IG5ld0JvYXJkID0gdGhpcy5ib2FyZDtcblxuICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIHRoaXMudGV0cm9taW5vLm1vdmVEb3duKG5ld0JvYXJkKTtcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIHRoaXMudGV0cm9taW5vLnJvdGF0ZShuZXdCb2FyZCk7XG4gICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93TGVmdCcpIHtcbiAgICAgIHRoaXMudGV0cm9taW5vLm1vdmVMZWZ0KG5ld0JvYXJkKTtcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dSaWdodCcpIHtcbiAgICAgIHRoaXMudGV0cm9taW5vLm1vdmVSaWdodChuZXdCb2FyZCk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVCb2FyZChuZXdCb2FyZCwgcHJldlRldHJvbWlubyk7XG4gIH1cblxuICB1cGRhdGVCb2FyZChuZXdCb2FyZCA9IHRoaXMuYm9hcmQsIHByZXZUZXRyb21pbm8gPSBudWxsKSB7XG4gICAgaWYgKHByZXZUZXRyb21pbm8pIHtcbiAgICAgIHRoaXMucmVtb3ZlT2xkQmxvY2socHJldlRldHJvbWlubywgbmV3Qm9hcmQpO1xuICAgIH1cblxuICAgIHRoaXMucHV0TmV3QmxvY2sodGhpcy50ZXRyb21pbm8sIG5ld0JvYXJkKTtcbiAgICB0aGlzLmJvYXJkID0gbmV3Qm9hcmQ7XG4gIH1cblxuICByZW1vdmVPbGRCbG9jayh0ZXRyb21pbm8sIG5ld0JvYXJkKSB7XG4gICAgY29uc3QgeyBibG9jaywgeCwgeSB9ID0gdGV0cm9taW5vO1xuXG4gICAgYmxvY2suZm9yRWFjaCgocm93LCBpKSA9PiB7XG4gICAgICByb3cuZm9yRWFjaCgoY29sLCBqKSA9PiB7XG4gICAgICAgIGlmIChuZXdCb2FyZFt5ICsgaV0/Llt4ICsgal0gPT09IGNvbCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgIG5ld0JvYXJkW3kgKyBpXVt4ICsgal0gPSAwO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1dE5ld0Jsb2NrKHRldHJvbWlubywgbmV3Qm9hcmQpIHtcbiAgICBjb25zdCB7IHgsIHksIGJsb2NrIH0gPSB0ZXRyb21pbm87XG5cbiAgICBibG9jay5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgIHJvdy5mb3JFYWNoKChjb2wsIGopID0+IHtcbiAgICAgICAgaWYgKGNvbCAhPT0gMCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgIG5ld0JvYXJkW3kgKyBpXVt4ICsgal0gPSBjb2w7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGJvYXJkKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZ2V0QXR0cmlidXRlKCdib2FyZCcpKTtcbiAgfVxuXG4gIHNldCBib2FyZCh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdib2FyZCcsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gIH1cbn1cbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmxhcHB5QmlyZCBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBodG1sYFxyXG4gICAgICA8aDE+RmxhcHB5IEJpcmQ8L2gxPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgICA8cD5Zb3UgYXJlIHZpZXdpbmcgdGhlIEZsYXBweSBCaXJkIGNvbXBvbmVudCE8L3A+XHJcbiAgICAgIDxwPllvdSBhcmUgdmlld2luZyB0aGUgRmxhcHB5IEJpcmQgY29tcG9uZW50ITwvcD5cclxuICAgICAgPHA+WW91IGFyZSB2aWV3aW5nIHRoZSBGbGFwcHkgQmlyZCBjb21wb25lbnQhPC9wPlxyXG4gICAgYDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9jb3JlL1JvdXRlcic7XHJcbmltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBnZXRMb2NhbEljb25zLCBtYWluSWNvbnMgfSBmcm9tICcuLi8uLi91dGlscy9yb3V0ZXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvbnMgZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgdGhpcy5pY29ucyA9IFsuLi5tYWluSWNvbnMsIC4uLihhd2FpdCBnZXRMb2NhbEljb25zKCkpXTtcclxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5oYW5kbGVEb3VibGVDbGljayk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdpY29uQ2hhbmdlJywgdGhpcy5oYW5kbGVJY29uQ2hhbmdlKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignaWNvbkRlbGV0ZScsIHRoaXMuaGFuZGxlSWNvbkRlbGV0ZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcclxuICAgIHJldHVybiBbJ2ljb25zJ107XHJcbiAgfVxyXG5cclxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgaW5qZWN0SFRNTCgpIHtcclxuICAgIHJldHVybiBodG1sYFxyXG4gICAgICAke3RoaXMuaWNvbnNcclxuICAgICAgICAubWFwKChpY29uKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gaHRtbGBcclxuICAgICAgICAgICAgPG15LWljb24gZGF0YS1wYXRoPSR7aWNvbi5wYXRofSBkYXRhLWxhYmVsPSR7aWNvbi5sYWJlbH0gZGF0YS1pY29uU3JjPSR7aWNvbi5pY29uU3JjfT48L215LWljb24+XHJcbiAgICAgICAgICBgO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgYDtcclxuICB9XHJcblxyXG4gIGdldCBpY29ucygpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZ2V0QXR0cmlidXRlKCdpY29ucycpKTtcclxuICB9XHJcblxyXG4gIHNldCBpY29ucyh2YWx1ZSkge1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2ljb25zJywgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNsaWNrKGUpIHtcclxuICAgIGlmICghZS50YXJnZXQuY2xvc2VzdCgnbXktaWNvbicpKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKTtcclxuICAgIGljb24udG9nZ2xlQXR0cmlidXRlKCdjaGVja2VkJyk7XHJcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJ215LWljb24nKS5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgIGlmIChub2RlICE9PSBpY29uKSB7XHJcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2NoZWNrZWQnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVEb3VibGVDbGljayhlKSB7XHJcbiAgICBpZiAoIWUudGFyZ2V0LmNsb3Nlc3QoJ215LWljb24nKSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGljb24gPSBlLnRhcmdldC5jbG9zZXN0KCdteS1pY29uJyk7XHJcbiAgICByb3V0ZXIubmF2aWdhdGVUbyhpY29uLmRhdGFzZXQucGF0aCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVLZXlEb3duKGUpIHtcclxuICAgIGNvbnN0IGNoZWNrZWRFbCA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnbXktaWNvbltjaGVja2VkXScpO1xyXG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgIGlmIChjaGVja2VkRWwubGVuZ3RoID4gMSkgcmV0dXJuO1xyXG4gICAgICBpZiAoIWNoZWNrZWRFbCkgcmV0dXJuO1xyXG4gICAgICByb3V0ZXIubmF2aWdhdGVUbyhjaGVja2VkRWxbMF0uZGF0YXNldC5wYXRoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUljb25DaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBwYXRoLCBsYWJlbCwgaWNvblNyYyB9ID0gZS5kZXRhaWw7XHJcbiAgICBjb25zdCBwcmV2SWNvbkluZGV4ID0gdGhpcy5pY29ucy5maW5kSW5kZXgoKGljb24pID0+IGljb24ucGF0aCA9PT0gcGF0aCk7XHJcblxyXG4gICAgaWYgKHByZXZJY29uSW5kZXggPT09IC0xKSB7XHJcbiAgICAgIHRoaXMuaWNvbnMgPSBbLi4udGhpcy5pY29ucywgeyBwYXRoLCBsYWJlbCwgaWNvblNyYyB9XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IG5ld0ljb25zID0gWy4uLnRoaXMuaWNvbnNdO1xyXG4gICAgICBuZXdJY29uc1twcmV2SWNvbkluZGV4XSA9IHsgcGF0aCwgbGFiZWwsIGljb25TcmMgfTtcclxuICAgICAgdGhpcy5pY29ucyA9IG5ld0ljb25zO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlSWNvbkRlbGV0ZShlKSB7XHJcbiAgICBjb25zdCB7IHBhdGggfSA9IGUuZGV0YWlsO1xyXG4gICAgdGhpcy5pY29ucyA9IHRoaXMuaWNvbnMuZmlsdGVyKChpY29uKSA9PiBpY29uLnBhdGggIT09IHBhdGgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgV2ViQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvcmUvV2ViQ29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEljb24gZXh0ZW5kcyBXZWJDb21wb25lbnQge1xyXG4gIGluamVjdEhUTUwoKSB7XHJcbiAgICBjb25zdCB7IGxhYmVsLCBpY29uc3JjIH0gPSB0aGlzLmRhdGFzZXQ7XHJcbiAgICByZXR1cm4gaHRtbGBcclxuICAgICAgPGltZyBhbHQ9XCIke2xhYmVsfV9pY29uXCIgc3JjPSR7aWNvbnNyY30gLz5cclxuICAgICAgJHtsYWJlbCA/IGA8c3BhbiBjbGFzcz1cImljb25fbmFtZVwiPiR7bGFiZWx9PC9zcGFuPmAgOiAnJ31cclxuICAgIGA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xyXG5pbXBvcnQgc2FuZGJveERCIGZyb20gJy4uLy4uL2NvcmUvSW5kZXhlZERCJztcclxuaW1wb3J0IE5vdGVQYWRJY29uIGZyb20gJy4uLy4uLy4uL3B1YmxpYy9ub3RlcGFkLnBuZyc7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi4vLi4vY29yZS9Sb3V0ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90ZVBhZCBleHRlbmRzIFdlYkNvbXBvbmVudCB7XHJcbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICB0aGlzLmRhdGEgPSAoYXdhaXQgc2FuZGJveERCLmdldERhdGEoJ25vdGVwYWQnLCB0aGlzLmlkKSkgPz8ge1xyXG4gICAgICB0aXRsZTogJ+ygnOuqqeyXhuydjCcsXHJcbiAgICAgIGNvbnRlbnQ6ICcnLFxyXG4gICAgfTtcclxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3NhdmUnLCB0aGlzLmhhbmRsZVNhdmUpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdsb2NhbFNhdmUnLCB0aGlzLmhhbmRsZUxvY2FsU2F2ZSk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2RlbGV0ZScsIHRoaXMuaGFuZGxlRGVsZXRlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdzYXZlJywgdGhpcy5oYW5kbGVTYXZlKTtcclxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9jYWxTYXZlJywgdGhpcy5oYW5kbGVMb2NhbFNhdmUpO1xyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdkZWxldGUnLCB0aGlzLmhhbmRsZURlbGV0ZSk7XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgY29uc3QgeyB0aXRsZSwgY29udGVudCB9ID0gdGhpcy5kYXRhO1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxteS1ub3RlcGFkLWhlYWRlciB0aXRsZT0ke3RpdGxlfT48L215LW5vdGVwYWQtaGVhZGVyPlxyXG4gICAgICA8dGV4dGFyZWE+JHtjb250ZW50fTwvdGV4dGFyZWE+XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlTG9jYWxTYXZlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IG5vdGVQYWREYXRhID0gdGhpcy5nZXROb3RlUGFkRGF0YSgpO1xyXG4gICAgaWYgKCFub3RlUGFkRGF0YSkgcmV0dXJuO1xyXG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtub3RlUGFkRGF0YS5jb250ZW50XSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XHJcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgIGxpbmsuZG93bmxvYWQgPSBgJHtub3RlUGFkRGF0YS50aXRsZX0udHh0YDtcclxuICAgIGxpbmsuY2xpY2soKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGhhbmRsZVNhdmUoZSkge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIGNvbnN0IG5vdGVQYWREYXRhID0gdGhpcy5nZXROb3RlUGFkRGF0YSgpO1xyXG4gICAgaWYgKCFub3RlUGFkRGF0YSkgcmV0dXJuO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNhbmRib3hEQi51cHNlcnREYXRhKCdub3RlcGFkJywgbm90ZVBhZERhdGEpO1xyXG5cclxuICAgICAgY29uc3QgcGF0aCA9IGAvbm90ZXBhZC8ke3Jlc3VsdH1gO1xyXG5cclxuICAgICAgYWxlcnQoJ+yggOyepeuQmOyXiOyKteuLiOuLpC4nKTtcclxuICAgICAgY29uc3QgaWNvbkNoYW5nZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpY29uQ2hhbmdlJywge1xyXG4gICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgcGF0aCxcclxuICAgICAgICAgIGxhYmVsOiBub3RlUGFkRGF0YS50aXRsZSxcclxuICAgICAgICAgIGljb25TcmM6IE5vdGVQYWRJY29uLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdteS1pY29ucycpLmRpc3BhdGNoRXZlbnQoaWNvbkNoYW5nZUV2ZW50KTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmlkID09PSByZXN1bHQpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gbm90ZVBhZERhdGEudGl0bGUucmVwbGFjZSgvJm5ic3A7L2csICcgJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcm91dGVyLm5hdmlnYXRlVG8ocGF0aCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBhbGVydCgn7KCA7J6l7JeQIOyLpO2MqO2WiOyKteuLiOuLpC4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGhhbmRsZURlbGV0ZShlKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICBjb25zdCBjb25maXJtUmVzdWx0ID0gd2luZG93LmNvbmZpcm0oJ+ygleunkCDsgq3soJztlZjsi5zqsqDsirXri4jquYw/Jyk7XHJcbiAgICAgIGlmICghY29uZmlybVJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgYXdhaXQgc2FuZGJveERCLmRlbGV0ZURhdGEoJ25vdGVwYWQnLCB0aGlzLmlkKTtcclxuXHJcbiAgICAgIGFsZXJ0KCfsgq3soJzrkJjsl4jsirXri4jri6QuJyk7XHJcbiAgICAgIGNvbnN0IGljb25EZWxldGVFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnaWNvbkRlbGV0ZScsIHtcclxuICAgICAgICBkZXRhaWw6IHtcclxuICAgICAgICAgIHBhdGg6IGAvbm90ZXBhZC8ke3RoaXMuaWR9YCxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbXktaWNvbnMnKS5kaXNwYXRjaEV2ZW50KGljb25EZWxldGVFdmVudCk7XHJcbiAgICAgIHJvdXRlci5yZXBsYWNlVG8oJy9ub3RlcGFkJyk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgYWxlcnQoJ+yCreygnOyXkCDsi6TtjKjtlojsirXri4jri6QuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXROb3RlUGFkRGF0YSgpIHtcclxuICAgIGNvbnN0IGNvbnRlbnRFbCA9IHRoaXMucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBjb250ZW50RWwudmFsdWUudHJpbSgpO1xyXG4gICAgaWYgKCFjb250ZW50KSB7XHJcbiAgICAgIGFsZXJ0KCfrgrTsmqnsnbQg7JeG7Iq164uI64ukLicpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdGl0bGU7XHJcbiAgICB3aGlsZSAoIXRpdGxlKSB7XHJcbiAgICAgIHRpdGxlID0gcHJvbXB0KCftjIzsnbzrqoXsnYQg7J6F66Cl7ZWY7IS47JqULicsIHRoaXMuZGF0YS50aXRsZS5yZXBsYWNlKC8mbmJzcDsvZywgJyAnKSk7XHJcbiAgICAgIGlmICghdGl0bGUpIHtcclxuICAgICAgICBjb25zdCBjb25maXJtUmVzdWx0ID0gd2luZG93LmNvbmZpcm0oJ+ygnOuqqeydgCDtlYTsiJjsnoXri4jri6QuJyk7XHJcbiAgICAgICAgaWYgKCFjb25maXJtUmVzdWx0KSByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICB0aXRsZTogdGl0bGUudHJpbSgpLnJlcGxhY2UoLyAvZywgJyZuYnNwOycpLFxyXG4gICAgICBjb250ZW50OiBjb250ZW50LnJlcGxhY2UoLyAvZywgJyZuYnNwOycpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldCBpZCgpIHtcclxuICAgIHJldHVybiBOdW1iZXIodGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XHJcbiAgfVxyXG5cclxuICBzZXQgdGl0bGUodGl0bGUpIHtcclxuICAgIHRoaXMucXVlcnlTZWxlY3RvcignbXktbm90ZXBhZC1oZWFkZXInKS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgdGl0bGUpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uLy4uL2NvcmUvUm91dGVyJztcclxuXHJcbmNvbnN0IGRpc2FibGUgPSB0cnVlO1xyXG5cclxuY29uc3QgYnV0dG9ucyA9IFtcclxuICB7XHJcbiAgICBpZDogJ2ZpbGUnLFxyXG4gICAgdGl0bGU6ICftjIzsnbwnLFxyXG4gICAga2V5OiAnRicsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAxLCB0ZXh0OiAn7IOI66GcIOunjOuTpOq4sChOKScsIGtleTogWydDdHJsJywgJ04nXSwgb25DbGljazogaGFuZGxlTmV3Q2xpY2sgfSxcclxuICAgICAgeyBpZDogMiwgdGV4dDogJ+uCtCDsu7Ttk6jthLDsl5Ag7KCA7J6lKFcpJywga2V5OiBbJ0N0cmwnLCAnU2hpZnQnLCAnTiddLCBvbkNsaWNrOiBoYW5kbGVMb2NhbFNhdmVDbGljayB9LFxyXG4gICAgICB7IGlkOiAzLCB0ZXh0OiAn7KCA7J6lKFMpJywga2V5OiBbJ0N0cmwnLCAnUyddLCBvbkNsaWNrOiBoYW5kbGVTYXZlQ2xpY2sgfSxcclxuICAgICAgeyBpZDogNCwgdGV4dDogJ+yCreygnChEKScsIGtleTogWydDdHJsJywgJ1NoaWZ0JywgJ1MnXSwgb25DbGljazogaGFuZGxlRGVsZXRlQ2xpY2sgfSxcclxuICAgICAgeyBpZDogNSwgdGV4dDogJ+2OmOydtOyngCDshKTsoJUoVSkuLi4nLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDYsIHRleHQ6ICfsnbjsh4QoUCkuLi4nLCBrZXk6IFsnQ3RybCcsICdQJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogNywgdGV4dDogJ+uBneuCtOq4sChYKScsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2VkaXQnLFxyXG4gICAgdGl0bGU6ICftjrjsp5EnLFxyXG4gICAga2V5OiAnRScsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiA4LCB0ZXh0OiAn7Iuk7ZaJIOy3qOyGjChVKScsIGtleTogWydDdHJsJywgJ1onXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiA5LCB0ZXh0OiAn7J6Y652864K06riwKFQpJywga2V5OiBbJ0N0cmwnLCAnWCddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDEwLCB0ZXh0OiAn67O17IKsKEMpJywga2V5OiBbJ0N0cmwnLCAnQyddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDExLCB0ZXh0OiAn67aZ7Jes64Sj6riwKFApJywga2V5OiBbJ0N0cmwnLCAnViddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDEyLCB0ZXh0OiAn7IKt7KCcKEQpJywga2V5OiBbJ0RlbCddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDEzLCB0ZXh0OiAnQmluZ+ycvOuhnCDqsoDsg4koUykuLi4nLCBrZXk6IFsnQ3RybCcsICdFJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTQsIHRleHQ6ICfssL7quLAoRikuLi4nLCBrZXk6IFsnQ3RybCcsICdGJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTUsIHRleHQ6ICfri6TsnYwg7LC+6riwKE4pJywga2V5OiBbJ0YzJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTYsIHRleHQ6ICfsnbTsoIQg7LC+6riwKFYpJywga2V5OiBbJ1NoaWZ0JywgJ0YzJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTcsIHRleHQ6ICfrsJTqvrjquLAoUikuLi4nLCBrZXk6IFsnQ3RybCcsICdIJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTgsIHRleHQ6ICfsnbTrj5koRykuLi4nLCBrZXk6IFsnQ3RybCcsICdHJ10sIGRpc2FibGUgfSxcclxuICAgICAgeyBpZDogMTksIHRleHQ6ICfrqqjrkZAg7ISg7YOdKEEpJywga2V5OiBbJ0N0cmwnLCAnQSddLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDIwLCB0ZXh0OiAn7Iuc6rCEL+uCoOynnChEKScsIGtleTogWydGNSddLCBkaXNhYmxlIH0sXHJcbiAgICBdLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdmb3JtYXQnLFxyXG4gICAgdGl0bGU6ICfshJzsi50nLFxyXG4gICAga2V5OiAnTycsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAyMSwgdGV4dDogJ+yekOuPmSDspIQg67CU6r+IKFcpJywga2V5OiBbXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyMiwgdGV4dDogJ+q4gOq8tChGKS4uLicsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ3ZpZXcnLFxyXG4gICAgdGl0bGU6ICfrs7TquLAnLFxyXG4gICAga2V5OiAnVicsXHJcbiAgICBzbG90czogW1xyXG4gICAgICB7IGlkOiAyMywgdGV4dDogJ+2ZleuMgO2VmOq4sChaKScsIGtleTogWydDdHJsJywgJysnXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyNCwgdGV4dDogJ+y2leyGjO2VmOq4sChYKScsIGtleTogWydDdHJsJywgJy0nXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyNSwgdGV4dDogJ+yDge2DnCDtkZzsi5zspIQoUyknLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICBdLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdoZWxwJyxcclxuICAgIHRpdGxlOiAn64+E7JuA66eQJyxcclxuICAgIGtleTogJ0gnLFxyXG4gICAgc2xvdHM6IFtcclxuICAgICAgeyBpZDogMjYsIHRleHQ6ICfrj4Tsm4Drp5Ag67O06riwKEgpJywga2V5OiBbXSwgZGlzYWJsZSB9LFxyXG4gICAgICB7IGlkOiAyNywgdGV4dDogJ+2UvOuTnOuwsSDrs7TrgrTquLAoRiknLCBrZXk6IFtdLCBkaXNhYmxlIH0sXHJcbiAgICAgIHsgaWQ6IDI4LCB0ZXh0OiAn66mU66qo7J6lIOygleuztChBKScsIGtleTogW10sIGRpc2FibGUgfSxcclxuICAgIF0sXHJcbiAgfSxcclxuXTtcclxuXHJcbmNvbnN0IHNsb3RzID0gYnV0dG9ucy5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XHJcbiAgcmV0dXJuIFsuLi5hY2MsIC4uLmN1ci5zbG90c107XHJcbn0sIFtdKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJ1dHRvbnM7XHJcbmV4cG9ydCB7IHNsb3RzIH07XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVTYXZlQ2xpY2soKSB7XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2F2ZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUxvY2FsU2F2ZUNsaWNrKCkge1xyXG4gIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2xvY2FsU2F2ZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNsaWNrKCkge1xyXG4gIGNvbnN0IG5vdGVwYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdteS1ub3RlcGFkJyk7XHJcbiAgaWYgKCFub3RlcGFkLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKSByZXR1cm47XHJcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZGVsZXRlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlTmV3Q2xpY2soKSB7XHJcbiAgY29uc3Qgbm90ZXBhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ215LW5vdGVwYWQnKTtcclxuICBpZiAoIW5vdGVwYWQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykpIHtcclxuICAgIG5vdGVwYWQucmVuZGVyKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHJvdXRlci5uYXZpZ2F0ZVRvKCcvbm90ZXBhZCcpO1xyXG59XHJcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBXZWJDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9XZWJDb21wb25lbnQnO1xyXG5pbXBvcnQgYnV0dG9ucywgeyBzbG90cyB9IGZyb20gJy4uL2NvbnN0L2J1dHRvbnMnO1xyXG5pbXBvcnQgTm90ZVBhZEljb24gZnJvbSAnLi4vLi4vLi4vLi4vcHVibGljL25vdGVwYWQucG5nJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi8uLi9jb3JlL1JvdXRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RlUGFkSGVhZGVyIGV4dGVuZHMgV2ViQ29tcG9uZW50IHtcclxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgfVxyXG5cclxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xyXG4gICAgcmV0dXJuIFsndGl0bGUnXTtcclxuICB9XHJcblxyXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgIGlmIChuYW1lID09PSAndGl0bGUnICYmIG9sZFZhbHVlKSB7XHJcbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignI3RpdGxlJykuaW5uZXJUZXh0ID0gbmV3VmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbmplY3RIVE1MKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgXHJcbiAgICAgIDxoZWFkZXI+XHJcbiAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICA8aW1nIGFsdD1cIm5vdGVwYWRfaWNvblwiIHNyYz0ke05vdGVQYWRJY29ufSAvPlxyXG4gICAgICAgICAgPHNwYW4gaWQ9XCJ0aXRsZVwiPiR7dGhpcy50aXRsZX08L3NwYW4+IC0gV2luZG93cyDrqZTrqqjsnqVcclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInZpZXdfYnV0dG9uc1wiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZpZXdfYnV0dG9uXCIgaWQ9XCJtaW5pXCI+8J+XlTwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZpZXdfYnV0dG9uXCIgaWQ9XCJmdWxsXCI+8J+XljwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZpZXdfYnV0dG9uXCIgaWQ9XCJjbG9zZVwiPuKFqTwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2hlYWRlcj5cclxuICAgICAgPGRpdiBjbGFzcz1cImVkaXRfYnV0dG9uc1wiPlxyXG4gICAgICAgICR7YnV0dG9uc1xyXG4gICAgICAgICAgLm1hcChcclxuICAgICAgICAgICAgKGJ1dHRvbikgPT4gaHRtbGBcclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdF9idXR0b25cIj5cclxuICAgICAgICAgICAgICAgICR7YnV0dG9uLnRpdGxlfSg8dT4ke2J1dHRvbi5rZXl9PC91PilcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3B1cFwiPlxyXG4gICAgICAgICAgICAgICAgICAke2J1dHRvbi5zbG90c1xyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAoc2xvdCkgPT4gaHRtbGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1YlwiIGRhdGEtaWQ9XCIke3Nsb3QuaWR9XCIgZGF0YS1kaXNhYmxlPVwiJHshIXNsb3QuZGlzYWJsZX1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiR7c2xvdC50ZXh0fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICR7c2xvdC5rZXkubGVuZ3RoID4gMCA/IGA8ZGl2PiR7c2xvdC5rZXkuam9pbignICsgJyl9PC9kaXY+YCA6ICcnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIGBcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5qb2luKCcnKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2xpY2soZSkge1xyXG4gICAgY29uc3Qgdmlld0J1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy52aWV3X2J1dHRvbicpO1xyXG4gICAgY29uc3QgZWRpdEJ1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5lZGl0X2J1dHRvbicpO1xyXG4gICAgY29uc3Qgc3ViID0gZS50YXJnZXQuY2xvc2VzdCgnLnN1YicpO1xyXG5cclxuICAgIGlmICh2aWV3QnV0dG9uKSB7XHJcbiAgICAgIHRoaXMuY2xpY2tWaWV3QnV0dG9uKHZpZXdCdXR0b24pO1xyXG4gICAgfSBlbHNlIGlmIChlZGl0QnV0dG9uKSB7XHJcbiAgICAgIHRoaXMuY2xpY2tFZGl0QnV0dG9uKGVkaXRCdXR0b24sIHN1Yik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsb3NlUG9wdXAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrVmlld0J1dHRvbih2aWV3QnV0dG9uKSB7XHJcbiAgICBzd2l0Y2ggKHZpZXdCdXR0b24uaWQpIHtcclxuICAgICAgY2FzZSAnZnVsbCc6XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2Z1bGxzY3JlZW4nKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnbWluaSc6XHJcbiAgICAgIGNhc2UgJ2Nsb3NlJzpcclxuICAgICAgICByb3V0ZXIuYmFjaygpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xpY2tFZGl0QnV0dG9uKGVkaXRCdXR0b24sIHN1Yikge1xyXG4gICAgaWYgKHN1Yikge1xyXG4gICAgICBjb25zdCBzbG90SWQgPSBOdW1iZXIoc3ViLmRhdGFzZXQuaWQpO1xyXG4gICAgICBjb25zdCB7IG9uQ2xpY2sgfSA9IHNsb3RzLmZpbmQoKHNsb3QpID0+IHNsb3QuaWQgPT09IHNsb3RJZCkgfHwge307XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljay5jYWxsKHRoaXMpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRvZ2dsZVBvcHVwKGVkaXRCdXR0b24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlUG9wdXAoZWRpdEJ1dHRvbikge1xyXG4gICAgY29uc3QgcG9wdXAgPSBlZGl0QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cCcpO1xyXG4gICAgaWYgKHBvcHVwLmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpKSB7XHJcbiAgICAgIHBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xyXG4gICAgICBwb3B1cC5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbG9zZVBvcHVwKCkge1xyXG4gICAgY29uc3QgcG9wdXAgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC5zaG93Jyk7XHJcbiAgICBwb3B1cD8uY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRpdGxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCd0aXRsZScpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XHJcbmltcG9ydCBzYW5kYm94REIgZnJvbSAnLi9jb3JlL0luZGV4ZWREQic7XHJcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vdmlldy9Db21tb24vRm9vdGVyJztcclxuaW1wb3J0IEhvbWUgZnJvbSAnLi92aWV3L0hvbWUnO1xyXG5pbXBvcnQgVGV0cmlzIGZyb20gJy4vdmlldy9UZXRyaXMnO1xyXG5pbXBvcnQgRmxhcHB5QmlyZCBmcm9tICcuL3ZpZXcvRmxhcHB5QmlyZCc7XHJcbmltcG9ydCBJY29ucyBmcm9tICcuL3ZpZXcvQ29tbW9uL0ljb25zJztcclxuaW1wb3J0IEljb24gZnJvbSAnLi92aWV3L0NvbW1vbi9JY29uJztcclxuaW1wb3J0IE5vdGVQYWQgZnJvbSAnLi92aWV3L05vdGVQYWQnO1xyXG5pbXBvcnQgTm90ZVBhZEhlYWRlciBmcm9tICcuL3ZpZXcvTm90ZVBhZC9jb21wb25lbnRzL05vdGVQYWRIZWFkZXInO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4vY29yZS9Sb3V0ZXInO1xyXG5cclxuKGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgc2FuZGJveERCLm9wZW5EQigpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IGFsZXJ0KCdJbmRleGVkRELrpbwg7IKs7Jqp7ZWgIOyImCDsl4bsirXri4jri6QuJykpO1xyXG4gIH1cclxuXHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1hcHAnLCBBcHApO1xyXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbXktZm9vdGVyJywgRm9vdGVyKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWhvbWUnLCBIb21lKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LXRldHJpcycsIFRldHJpcyk7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1mbGFwcHliaXJkJywgRmxhcHB5QmlyZCk7XHJcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1pY29ucycsIEljb25zKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LWljb24nLCBJY29uKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LW5vdGVwYWQnLCBOb3RlUGFkKTtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ215LW5vdGVwYWQtaGVhZGVyJywgTm90ZVBhZEhlYWRlcik7XHJcbn0pKCk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHJvdXRlci5yZW5kZXIoKSk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsICgpID0+IHJvdXRlci5yZW5kZXIoKSk7XHJcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZGIiLCJjb25zdHJ1Y3RvciIsImRiTmFtZSIsImRiVmVyc2lvbiIsInN0b3JlcyIsInRoaXMiLCJhc3luYyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdCIsIndpbmRvdyIsImluZGV4ZWREQiIsIm9wZW4iLCJvbnN1Y2Nlc3MiLCJyZXN1bHQiLCJvbmVycm9yIiwiZSIsIm9udXBncmFkZW5lZWRlZCIsImZvckVhY2giLCJzdG9yZSIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsImRlbGV0ZU9iamVjdFN0b3JlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwic3RvcmVOYW1lIiwiaWQiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiZ2V0IiwiZ2V0QWxsIiwiZGF0YSIsIm1vZGlmaWVkRGF0YSIsIkRhdGUiLCJnZXRUaW1lIiwicHV0IiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZGVsZXRlIiwicmVuZGVyUmF3Iiwic3RyaW5nIiwidmFsdWVzIiwiU3RyaW5nIiwicmF3IiwiV2ViQ29tcG9uZW50IiwiSFRNTEVsZW1lbnQiLCJjb25uZWN0ZWRDYWxsYmFjayIsInJlbmRlciIsImlubmVySFRNTCIsImluamVjdEhUTUwiLCJBcHAiLCJCQVNFX1VSTCIsInJvdXRlcyIsInBhdGgiLCJodG1sIiwibGFiZWwiLCJpY29uU3JjIiwibWFpbkljb25zIiwicmVkdWNlIiwicHJldiIsInJvdXRlciIsImdldExvY2FsSWNvbnMiLCJpY29uIiwidGl0bGUiLCJyb3V0ZSIsInBhdGhUb1JlZ2V4cCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJjdXJyZW50UGF0aCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJmaW5kIiwidmFsdWUiLCJnZXRVcmxGcm9tIiwidGVzdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImdldElkRnJvbVBhdGgiLCJyZXBsYWNlVG8iLCJtYXRjaCIsIm5hdmlnYXRlVG8iLCJ1cmwiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwicmVwbGFjZVN0YXRlIiwiYmFjayIsIkZvb3RlciIsInN1cGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUNsaWNrIiwiYmluZCIsImpvaW4iLCJ0YXJnZXQiLCJjbG9zZXN0IiwiZGF0YXNldCIsIkhvbWUiLCJCTE9DS1MiLCJJIiwiSiIsIkwiLCJPIiwiUyIsIlQiLCJaIiwiQkxPQ0tfQ0xBU1NFUyIsIlNDT1JFUyIsIkJPQVJEX1dJRFRIIiwiVGV0cm9taW5vIiwiY3JlYXRlTmV3QmxvY2siLCJyb3RhdGUiLCJib2FyZCIsInJvdGF0ZWRCbG9jayIsImJsb2NrIiwibWFwIiwiXyIsImkiLCJyb3ciLCJyZXZlcnNlIiwicm90YXRlZFdpZHRoIiwibGVuZ3RoIiwicm90YXRlZEhlaWdodCIsIm5ld1giLCJ4IiwibmV3WSIsInkiLCJjYW5Nb3ZlIiwibW92ZUxlZnQiLCJtb3ZlUmlnaHQiLCJtb3ZlRG93biIsImZyZWV6ZSIsInN0b3BHYW1lIiwiY29sIiwiaiIsIiR0ZXRyaXMiLCJjbGVhcmVkUm93cyIsInRldHJvbWlub0NvdW50ZXIiLCJkcm9wSW50ZXJ2YWwiLCJldmVyeSIsImNlbGwiLCJzcGxpY2UiLCJ1bnNoaWZ0IiwiQXJyYXkiLCJmaWxsIiwicmVtb3ZlRnVsbFJvd3MiLCJzY29yZSIsIk9iamVjdCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImluaXRpYWxCbG9ja1BvcyIsImdldEluaXRpYWxCbG9ja1BvcyIsIm5leHRYIiwibmV4dFkiLCJ3aWR0aCIsImZpcnN0Tm9uRW1wdHlSb3dJbmRleCIsImZpbmRJbmRleCIsInNvbWUiLCJjbG9uZSIsImNsb25lZCIsIlRldHJpcyIsImdldEluaXRpYWxCb2FyZCIsInN0YXJ0IiwidGV0cm9taW5vIiwibGFzdFRpbWUiLCJhbmltYXRpb25JZCIsInN0YXJ0R2FtZSIsImtleWRvd25IYW5kbGVyIiwiZHJvcEJsb2NrIiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwibmFtZSIsImhlaWdodCIsImZyb20iLCJ1cGRhdGVCb2FyZCIsInBlcmZvcm1hbmNlIiwibm93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidGltZXN0YW1wIiwicHJldlRldHJvbWlubyIsIm5ld0JvYXJkIiwia2V5IiwicmVtb3ZlT2xkQmxvY2siLCJwdXROZXdCbG9jayIsIkpTT04iLCJwYXJzZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInN0cmluZ2lmeSIsIkZsYXBweUJpcmQiLCJJY29ucyIsImljb25zIiwiaGFuZGxlRG91YmxlQ2xpY2siLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlSWNvbkNoYW5nZSIsImhhbmRsZUljb25EZWxldGUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwidG9nZ2xlQXR0cmlidXRlIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjaGVja2VkRWwiLCJkZXRhaWwiLCJwcmV2SWNvbkluZGV4IiwibmV3SWNvbnMiLCJmaWx0ZXIiLCJJY29uIiwiaWNvbnNyYyIsIk5vdGVQYWQiLCJjb250ZW50IiwiaGFuZGxlU2F2ZSIsImhhbmRsZUxvY2FsU2F2ZSIsImhhbmRsZURlbGV0ZSIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwicHJldmVudERlZmF1bHQiLCJub3RlUGFkRGF0YSIsImdldE5vdGVQYWREYXRhIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwibGluayIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG93bmxvYWQiLCJjbGljayIsInN0b3BQcm9wYWdhdGlvbiIsImFsZXJ0IiwiaWNvbkNoYW5nZUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZXJyIiwiY29uZmlybSIsImljb25EZWxldGVFdmVudCIsInRyaW0iLCJwcm9tcHQiLCJOdW1iZXIiLCJkaXNhYmxlIiwiYnV0dG9ucyIsInNsb3RzIiwidGV4dCIsIm9uQ2xpY2siLCJub3RlcGFkIiwiYnViYmxlcyIsImFjYyIsImN1ciIsIk5vdGVQYWRIZWFkZXIiLCJpbm5lclRleHQiLCJidXR0b24iLCJzbG90Iiwidmlld0J1dHRvbiIsImVkaXRCdXR0b24iLCJzdWIiLCJjbGlja1ZpZXdCdXR0b24iLCJjbGlja0VkaXRCdXR0b24iLCJjbG9zZVBvcHVwIiwicGFyZW50RWxlbWVudCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInNsb3RJZCIsImNhbGwiLCJ0b2dnbGVQb3B1cCIsInBvcHVwIiwicmVtb3ZlIiwiYWRkIiwicXVldWVNaWNyb3Rhc2siLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJzb3VyY2VSb290IjoiIn0=